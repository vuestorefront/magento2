import { CustomQuery, MethodOptions } from '../../types';
import { {{ capitalizedMethodName }}Query, {{ capitalizedMethodName }}QueryVariables } from '@vue-storefront/magento-types';
import { client } from '../../client';
import { AxiosRequestSender } from '@vue-storefront/sdk-axios-request-sender'
import { DeepPartial } from 'ts-essentials';
import { ApolloQueryResult } from '@apollo/client';

/**
 * {{ camelCaseMethodName }} response type
 */
export type {{ capitalizedMethodName }}Response<T extends DeepPartial<{{ capitalizedMethodName }}Query> = {{ capitalizedMethodName }}Query> = ApolloQueryResult<T>

/**
 * Method to TODO (to do what?)
 *
 * @remarks
 * This method sends a POST request to the
 * {@link @vue-storefront/magento-api#ApiMethods.{{ camelCaseMethodName }} | {{ camelCaseMethodName }} } endpoint
 * of the Vue Storefront API Middleware.
 * The default GraphQL query used by this method can be found
 * {@link @vue-storefront/magento-api#{{ camelCaseMethodName }} | here}.
 *
 * @param params -
 * Parameter object which can be used with this method.
 * Refer to its type definition to learn about possible properties.
 *
 * @param options -
 * Options that can be passed to additionally configure the request
 * or customize the logic in a plugin.
 *
 * @typeParam Res - Customizable response interface to be used with custom queries.
 *
 * @returns
 * Returns a representation of the {@link @vue-storefront/magento2-sdk#{{ capitalizedMethodName }}Response | {{ capitalizedMethodName }}Response}.
 *
 * @example
 * Simple usage:
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 *
 * // fetch TODO (fetch what?)
 * const TODO = await sdk.magento.{{ camelCaseMethodName }}();
 * ```
 *
 * @example
 * Creating a custom GraphQL query for TODO (for doing what?)
 *
 * ```ts
 * module.exports = {
 *   integrations: {
 *     magento: {
 *       customQueries: {
 *         '{{ kebabCaseMethodName }}-custom-query': ({ variables, metadata }) => ({
 *            variables,
 *            query: `
 *              TODO (paste query from api-client/src/api/{{ camelCaseMethodName }}/${{ camelCaseMethodName }}.ts)
 *              `
 *            `
 *         }),
 *       },
 *     }
 *   }
 * };
 * ```
 *
 * @example
 * Using a custom GraphQL query to TODO (to do what?)
 *
 * ```ts
 * import { sdk } from '~/sdk.config.ts';
 * // reduce the amount of fields returned by the query, when compared to the default query
 * const customQuery = {
 *   {{ camelCaseMethodName }}: '{{ kebabCaseMethodName }}-custom-query',
 *   metadata: {
 *     fields: 'TODO'
 *   }
 * };
 *
 * const TODO = await sdk.magento.{{ camelCaseMethodName }}(TODO, { customQuery });
 *
 * // TODO will contain only the fields specified in the custom query.
 * ```
 */
export async function {{ camelCaseMethodName }}<RES extends {{ capitalizedMethodName }}Response>(params: {{ capitalizedMethodName }}QueryVariables, options?: MethodOptions<CustomQuery<'{{ camelCaseMethodName }}'>>) {
  return new AxiosRequestSender(client)
    .setUrl('{{ camelCaseMethodName }}')
    .setMethod('POST')
    .setProps([params, options?.customQuery, options?.customHeaders])
    .setConfig(options?.clientConfig)
    .send<RES>();
}
