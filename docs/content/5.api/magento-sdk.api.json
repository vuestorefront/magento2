{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.18.1",
    "schemaVersion": 1004,
    "oldestForwardsCompatibleVersion": 1001,
    "tsdocConfig": {
      "$schema": "https://developer.microsoft.com/json-schemas/tsdoc/v0/tsdoc.schema.json",
      "noStandardTags": true,
      "tagDefinitions": [
        {
          "tagName": "@alpha",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@beta",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@defaultValue",
          "syntaxKind": "block"
        },
        {
          "tagName": "@decorator",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@deprecated",
          "syntaxKind": "block"
        },
        {
          "tagName": "@eventProperty",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@example",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@experimental",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@inheritDoc",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@internal",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@label",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@link",
          "syntaxKind": "inline",
          "allowMultiple": true
        },
        {
          "tagName": "@override",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@packageDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@param",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@privateRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@public",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@readonly",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@remarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@returns",
          "syntaxKind": "block"
        },
        {
          "tagName": "@sealed",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@see",
          "syntaxKind": "block"
        },
        {
          "tagName": "@throws",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@typeParam",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@virtual",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@betaDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@internalRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@preapproved",
          "syntaxKind": "modifier"
        }
      ],
      "supportForTags": {
        "@alpha": true,
        "@beta": true,
        "@defaultValue": true,
        "@decorator": true,
        "@deprecated": true,
        "@eventProperty": true,
        "@example": true,
        "@experimental": true,
        "@inheritDoc": true,
        "@internal": true,
        "@label": true,
        "@link": true,
        "@override": true,
        "@packageDocumentation": true,
        "@param": true,
        "@privateRemarks": true,
        "@public": true,
        "@readonly": true,
        "@remarks": true,
        "@returns": true,
        "@sealed": true,
        "@see": true,
        "@throws": true,
        "@typeParam": true,
        "@virtual": true,
        "@betaDocumentation": true,
        "@internalRemarks": true,
        "@preapproved": true
      }
    }
  },
  "kind": "Package",
  "canonicalReference": "@vue-storefront/magento-sdk!",
  "docComment": "/**\n * Api Client for Magento 2 integration for Vue Storefront 2.\n *\n * @remarks\n *\n * The `@vue-storefront/magento-api` library includes Apollo Client, GraphQL operations and Middleware endpoints that allow you to communicate with Magento.\n *\n * @packageDocumentation\n */\n",
  "name": "@vue-storefront/magento-sdk",
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "@vue-storefront/magento-sdk!",
      "name": "",
      "members": [
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-sdk!addProductsToCart:function(1)",
          "docComment": "/**\n * Method to add products to cart (returns cart)\n *\n * @remarks\n *\n * This method sends a POST request to the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/addProductsToCart | addProductsToCart} endpoint of the Vue Storefront API Middleware. The default GraphQL query used by this method can be found {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/addProductsToCart | here}.\n *\n * @param params - Parameter object which can be used with this method. Refer to its type definition to learn about possible properties.\n *\n * @param options - Options that can be passed to additionally configure the request or customize the logic in a plugin.\n *\n * @typeParam Res - Customizable response interface to be used with custom queries.\n *\n * @returns Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/AddProductsToCartResponse | AddProductsToCartResponse}.\n *\n * @example\n *\n * Simple usage:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // add products to cart with default parameters (returns cart)\n * const cart = await sdk.magento.addProductsToCart(\n *   {\n *     cartId: '123',\n *     cartItems: [\n *       {\n *         sku: 'WSH12',\n *         quantity: 1,\n *         selected_options: [\n *           // option IDs retrieved from product\n *           'Y29uZmlndXJhYmxlLzkzLzUz',\n *           'Y29uZmlndXJhYmxlLzE0NC8xNzE='\n *         ]\n *       }\n *     ]\n *   }\n * );\n * ```\n *\n * @example\n *\n * Creating a custom GraphQL query for adding products to cart\n * ```ts\n * module.exports = {\n *   integrations: {\n *     magento: {\n *       customQueries: {\n *         'add-products-to-cart-custom-query': ({ variables, metadata }) => ({\n *            variables,\n *            query: `\n *              mutation addProductsToCart($cartId: String!, $cartItems: [CartItemInput!]!) {\n *                addProductsToCart(cartId: $cartId, cartItems: $cartItems) {\n *                  cart {\n *                    ${metadata.fields}\n *                  }\n *                }\n *              }`\n *\n *         }),\n *       },\n *     }\n *   }\n * };\n * ```\n *\n * @example\n *\n * Using a custom GraphQL query to modify response containing the cart, which is sent as part of the adding product to cart mutation\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n * // reduce the amount of fields returned by the query, when compared to the default query\n * const customQuery = {\n *   cart: 'add-products-to-cart-custom-query',\n *   metadata: {\n *     fields: 'id items { uid }'\n *   }\n * };\n *\n *\n * const cart = await sdk.magento.addProductsToCart(\n *   {\n *     cartId: '123',\n *     cartItems: [\n *       {\n *         sku: 'WSH12',\n *         quantity: 1,\n *         selected_options: [\n *           'Y29uZmlndXJhYmxlLzkzLzUz',\n *           'Y29uZmlndXJhYmxlLzE0NC8xNzE='\n *         ]\n *       }\n *     ]\n *   },\n *   { customQuery }\n * );\n *\n * // Result will contain only the fields specified in the custom query.\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function addProductsToCart<RES extends "
            },
            {
              "kind": "Reference",
              "text": "AddProductsToCartResponse",
              "canonicalReference": "@vue-storefront/magento-sdk!AddProductsToCartResponse:type"
            },
            {
              "kind": "Content",
              "text": ">(params: "
            },
            {
              "kind": "Reference",
              "text": "AddProductsToCartMutationVariables",
              "canonicalReference": "@vue-storefront/magento-types!AddProductsToCartMutationVariables:type"
            },
            {
              "kind": "Content",
              "text": ", options?: "
            },
            {
              "kind": "Reference",
              "text": "MethodOptions",
              "canonicalReference": "@vue-storefront/magento-sdk!MethodOptions:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CustomQuery",
              "canonicalReference": "@vue-storefront/magento-sdk!CustomQuery:type"
            },
            {
              "kind": "Content",
              "text": "<'addProductsToCart'>>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<RES>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 10,
            "endIndex": 12
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "params",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "RES",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "addProductsToCart"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!AddProductsToCartMutation:type",
          "docComment": "/**\n * mutation type for the {@link addProductsToCart} method.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type AddProductsToCartMutation = "
            },
            {
              "kind": "Content",
              "text": "{\n    addProductsToCart: "
            },
            {
              "kind": "Reference",
              "text": "Mutation",
              "canonicalReference": "@vue-storefront/magento-types!Mutation:interface"
            },
            {
              "kind": "Content",
              "text": "['addProductsToCart'];\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "AddProductsToCartMutation",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!AddProductsToCartResponse:type",
          "docComment": "/**\n * Add products to cart response type\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type AddProductsToCartResponse<T extends "
            },
            {
              "kind": "Reference",
              "text": "DeepPartial",
              "canonicalReference": "ts-essentials!DeepPartial:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "AddProductsToCartMutation",
              "canonicalReference": "@vue-storefront/magento-sdk!AddProductsToCartMutation:type"
            },
            {
              "kind": "Content",
              "text": "> "
            },
            {
              "kind": "Content",
              "text": "= "
            },
            {
              "kind": "Reference",
              "text": "AddProductsToCartMutation",
              "canonicalReference": "@vue-storefront/magento-sdk!AddProductsToCartMutation:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "ApolloQueryResult",
              "canonicalReference": "@apollo/client/core!ApolloQueryResult:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "AddProductsToCartResponse",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 8,
            "endIndex": 10
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!AddProductsToWishlistMutation:type",
          "docComment": "/**\n * mutation for the {@link addProductToWishList} method.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type AddProductsToWishlistMutation = "
            },
            {
              "kind": "Content",
              "text": "{\n    addProductsToWishlist: "
            },
            {
              "kind": "Reference",
              "text": "Mutation",
              "canonicalReference": "@vue-storefront/magento-types!Mutation:interface"
            },
            {
              "kind": "Content",
              "text": "['addProductsToWishlist'];\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "AddProductsToWishlistMutation",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-sdk!addProductToWishList:function(1)",
          "docComment": "/**\n * Method to add products to wishlist\n *\n * @remarks\n *\n * This method sends a POST request to the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/addProductToWishList | addProductToWishList} endpoint of the Vue Storefront API Middleware. The default GraphQL query used by this method can be found {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/addProductToWishListQuery | here}.\n *\n * @param params - Parameter object which can be used with this method. Refer to its type definition to learn about possible properties.\n *\n * @param options - Options that can be passed to additionally configure the request or customize the logic in a plugin.\n *\n * @typeParam Res - Customizable response interface to be used with custom queries.\n *\n * @returns Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/AddProductToWishListResponse}.\n *\n * @example\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * const wishlist = await sdk.magento.addProductToWishList({\n *   // Wishlist ID\n *   id: '258',\n *   // Products to add to wishlist with given ID\n *   items: [{quantity: 1, sku: 'WSH12'}]\n * });\n * ```\n *\n * @example\n *\n * Creating a custom GraphQL query for searching categories\n * ```ts\n * module.exports = {\n *   integrations: {\n *     magento: {\n *       customQueries: {\n *         'add-product-to-wishlist-custom-query': ({ variables, metadata }) => ({\n *           variables,\n *           query: `\n *             mutation addProductsToWishlist($id: ID!, $items: [WishlistItemInput!]!) {\n *               addProductsToWishlist(wishlistId: $id, wishlistItems: $items) {\n *                 wishlist {\n *                   ${metadata.fields}\n *                 }\n *               }\n *             }`\n *         }),\n *       },\n *     }\n *   }\n * }\n * ```\n *\n * @example\n *\n * Using a custom GraphQL query (mutation) to add products to wishlist\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n * const customQuery = {\n *    addProductsToWishList: 'add-product-to-wishlist-custom-query',\n *    metadata: {\n *      fields: 'id items_count'\n *    }\n * };\n *\n * const result = await sdk.magento.addProductToWishList({\n *  id: '258',\n *  items: [{ quantity: 1, sku: '258'}]\n * }, { customQuery });\n *\n * // Returned wishlist will contain only the fields specified in the custom query.\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function addProductToWishList<RES extends "
            },
            {
              "kind": "Reference",
              "text": "AddProductToWishListResponse",
              "canonicalReference": "@vue-storefront/magento-sdk!AddProductToWishListResponse:type"
            },
            {
              "kind": "Content",
              "text": ">(params: "
            },
            {
              "kind": "Reference",
              "text": "AddProductsToWishlistMutationVariables",
              "canonicalReference": "@vue-storefront/magento-types!AddProductsToWishlistMutationVariables:type"
            },
            {
              "kind": "Content",
              "text": ", options?: "
            },
            {
              "kind": "Reference",
              "text": "MethodOptions",
              "canonicalReference": "@vue-storefront/magento-sdk!MethodOptions:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CustomQuery",
              "canonicalReference": "@vue-storefront/magento-sdk!CustomQuery:type"
            },
            {
              "kind": "Content",
              "text": "<'addProductsToWishlist'>>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<RES>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 10,
            "endIndex": 12
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "params",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "RES",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "addProductToWishList"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!AddProductToWishListResponse:type",
          "docComment": "/**\n * addProductToWishList response type\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type AddProductToWishListResponse<T extends "
            },
            {
              "kind": "Reference",
              "text": "DeepPartial",
              "canonicalReference": "ts-essentials!DeepPartial:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "AddProductsToWishlistMutation",
              "canonicalReference": "@vue-storefront/magento-sdk!AddProductsToWishlistMutation:type"
            },
            {
              "kind": "Content",
              "text": "> "
            },
            {
              "kind": "Content",
              "text": "= "
            },
            {
              "kind": "Reference",
              "text": "AddProductsToWishlistMutation",
              "canonicalReference": "@vue-storefront/magento-sdk!AddProductsToWishlistMutation:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "ApolloQueryResult",
              "canonicalReference": "@apollo/client/core!ApolloQueryResult:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "AddProductToWishListResponse",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 8,
            "endIndex": 10
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-sdk!applyCouponToCart:function(1)",
          "docComment": "/**\n * Method to apply coupon to cart\n *\n * @remarks\n *\n * This method sends a POST request to the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/applyCouponToCart | applyCouponToCart} endpoint of the Vue Storefront API Middleware. The default GraphQL query used by this method can be found {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/applyCouponToCart | here}.\n *\n * @param params - Parameter object which can be used with this method. Refer to its type definition to learn about possible properties.\n *\n * @param options - Options that can be passed to additionally configure the request or customize the logic in a plugin.\n *\n * @typeParam Res - Customizable response interface to be used with custom queries.\n *\n * @returns Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/ApplyCouponToCartResponse | ApplyCouponToCartResponse}.\n *\n * @example\n *\n * Simple usage:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // apply coupon parameters\n * const params = {\n *  cart_id: 'test-cart-id',\n *  coupon_code: 'test-coupon-code'\n * };\n *\n * // The result of the coupon application\n * const result = await sdk.magento.applyCouponToCart(params);\n * ```\n *\n * @example\n *\n * Creating a custom GraphQL query for getting cart\n * ```ts\n * module.exports = {\n *   integrations: {\n *     magento: {\n *       customQueries: {\n *         'apply-coupon-to-cart-custom-query': ({ variables, metadata }) => ({\n *            variables,\n *            query: `\n *              mutation applyCouponToCart($input: ApplyCouponToCartInput) {\n *                applyCouponToCart(input: $input) {\n *                  ${metadata.fields}\n *                }\n *              }`\n *         }),\n *       },\n *     }\n *   }\n * };\n * ```\n *\n * @example\n *\n * Using a custom GraphQL query to fetch reduced amount of data\n * ```ts\n *  import { sdk } from '~/sdk.config.ts';\n *  const customQuery = {\n *    applyCouponToCart: 'apply-coupon-to-cart-custom-query',\n *      metadata: {\n *        fields: 'cart { applied_coupons { code } }'\n *      }\n *    };\n *\n *  const params = {\n *    cart_id: 'test-cart-id',\n *    coupon_code: 'test-coupon-code'\n *  };\n *\n *  // The result will contain only fields configured in the custom query\n *  const result = await sdk.magento.applyCouponToCart(params, { customQuery });\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function applyCouponToCart<RES extends "
            },
            {
              "kind": "Reference",
              "text": "ApplyCouponToCartResponse",
              "canonicalReference": "@vue-storefront/magento-sdk!ApplyCouponToCartResponse:type"
            },
            {
              "kind": "Content",
              "text": ">(params: "
            },
            {
              "kind": "Reference",
              "text": "ApplyCouponToCartInput",
              "canonicalReference": "@vue-storefront/magento-types!ApplyCouponToCartInput:interface"
            },
            {
              "kind": "Content",
              "text": ", options?: "
            },
            {
              "kind": "Reference",
              "text": "MethodOptions",
              "canonicalReference": "@vue-storefront/magento-sdk!MethodOptions:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CustomQuery",
              "canonicalReference": "@vue-storefront/magento-sdk!CustomQuery:type"
            },
            {
              "kind": "Content",
              "text": "<'applyCouponToCart'>>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<RES>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 10,
            "endIndex": 12
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "params",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "RES",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "applyCouponToCart"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!ApplyCouponToCartMutation:type",
          "docComment": "/**\n * mutation type for the {@link applyCouponToCart} method.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ApplyCouponToCartMutation = "
            },
            {
              "kind": "Content",
              "text": "{\n    applyCouponToCart: "
            },
            {
              "kind": "Reference",
              "text": "Mutation",
              "canonicalReference": "@vue-storefront/magento-types!Mutation:interface"
            },
            {
              "kind": "Content",
              "text": "['applyCouponToCart'];\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ApplyCouponToCartMutation",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!ApplyCouponToCartResponse:type",
          "docComment": "/**\n * Apply coupon to cart response type\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ApplyCouponToCartResponse<T extends "
            },
            {
              "kind": "Reference",
              "text": "DeepPartial",
              "canonicalReference": "ts-essentials!DeepPartial:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ApplyCouponToCartMutation",
              "canonicalReference": "@vue-storefront/magento-sdk!ApplyCouponToCartMutation:type"
            },
            {
              "kind": "Content",
              "text": "> "
            },
            {
              "kind": "Content",
              "text": "= "
            },
            {
              "kind": "Reference",
              "text": "ApplyCouponToCartMutation",
              "canonicalReference": "@vue-storefront/magento-sdk!ApplyCouponToCartMutation:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "FetchResult",
              "canonicalReference": "@apollo/client/link/core!FetchResult:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ApplyCouponToCartResponse",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 8,
            "endIndex": 10
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-sdk!availableStores:function(1)",
          "docComment": "/**\n * Method to fetch available stores\n *\n * @remarks\n *\n * This method sends a GET request to the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/availableStores | availableStores} endpoint of the Vue Storefront API Middleware. The default GraphQL query used by this method can be found {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/availableStores | here}.\n *\n * @param options - Options that can be passed to additionally configure the request or customize the logic in a plugin.\n *\n * @typeParam Res - Customizable response interface to be used with custom queries.\n *\n * @returns Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/AvailableStoresResponse | AvailableStoresResponse}.\n *\n * @example\n *\n * Simple usage:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // fetch available stores\n * const result = await sdk.magento.availableStores();\n *\n * // result.data.availableStores contains the available stores\n * ```\n *\n * @example\n *\n * Creating a custom GraphQL query\n * ```ts\n * module.exports = {\n *   integrations: {\n *     magento: {\n *       customQueries: {\n *         'available-stores-custom-query': ({ variables, metadata }) => ({\n *            variables,\n *            query: `\n *              query availableStores {\n *                availableStores {\n *                  ${metadata?.fields}\n *                }\n *              }\n *            `\n *         }),\n *       },\n *     }\n *   }\n * };\n * ```\n *\n * @example\n *\n * Using a custom GraphQL query to reduce the amount of fields returned by the query\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n * // reduce the amount of fields returned by the query, when compared to the default query\n * const customQuery = {\n *   availableStores: 'available-stores-custom-query',\n *   metadata: {\n *     fields: 'code store_name'\n *   }\n * };\n *\n * const result = await sdk.magento.availableStores({ customQuery });\n *\n * // result.data.availableStores contains the available stores with only the fields specified in the custom query\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function availableStores<RES extends "
            },
            {
              "kind": "Reference",
              "text": "AvailableStoresResponse",
              "canonicalReference": "@vue-storefront/magento-sdk!AvailableStoresResponse:type"
            },
            {
              "kind": "Content",
              "text": ">(options?: "
            },
            {
              "kind": "Reference",
              "text": "MethodOptions",
              "canonicalReference": "@vue-storefront/magento-sdk!MethodOptions:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CustomQuery",
              "canonicalReference": "@vue-storefront/magento-sdk!CustomQuery:type"
            },
            {
              "kind": "Content",
              "text": "<'availableStores'>>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<RES>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 8,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "RES",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "availableStores"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!AvailableStoresQuery:type",
          "docComment": "/**\n * query type for the {@link availableStores} method.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type AvailableStoresQuery = "
            },
            {
              "kind": "Content",
              "text": "{\n    availableStores: "
            },
            {
              "kind": "Reference",
              "text": "Query",
              "canonicalReference": "@vue-storefront/magento-types!Query:interface"
            },
            {
              "kind": "Content",
              "text": "['availableStores'];\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "AvailableStoresQuery",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!AvailableStoresResponse:type",
          "docComment": "/**\n * availableStores response type\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type AvailableStoresResponse<T extends "
            },
            {
              "kind": "Reference",
              "text": "DeepPartial",
              "canonicalReference": "ts-essentials!DeepPartial:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "AvailableStoresQuery",
              "canonicalReference": "@vue-storefront/magento-sdk!AvailableStoresQuery:type"
            },
            {
              "kind": "Content",
              "text": "> "
            },
            {
              "kind": "Content",
              "text": "= "
            },
            {
              "kind": "Reference",
              "text": "AvailableStoresQuery",
              "canonicalReference": "@vue-storefront/magento-sdk!AvailableStoresQuery:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "ApolloQueryResult",
              "canonicalReference": "@apollo/client/core!ApolloQueryResult:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "AvailableStoresResponse",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 8,
            "endIndex": 10
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-sdk!cart:function(1)",
          "docComment": "/**\n * Method to get cart\n *\n * @remarks\n *\n * This method sends a POST request to the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/cart | cart} endpoint of the Vue Storefront API Middleware. The default GraphQL query used by this method can be found {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/cart | here}.\n *\n * @param params - Parameter object which can be used with this method. Refer to its type definition to learn about possible properties.\n *\n * @param options - Options that can be passed to additionally configure the request or customize the logic in a plugin.\n *\n * @typeParam Res - Customizable response interface to be used with custom queries.\n *\n * @returns Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/CartResponse | CartResponse}.\n *\n * @example\n *\n * Simple usage:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // fetch cart with default parameters\n * const cart = await sdk.magento.cart({ cartId: '123' });\n * ```\n *\n * @example\n *\n * Creating a custom GraphQL query for getting cart\n * ```ts\n * module.exports = {\n *   integrations: {\n *     magento: {\n *       customQueries: {\n *         'cart-custom-query': ({ variables, metadata }) => ({\n *            variables,\n *            query: `\n *              query cart($cartId: String!) {\n *                cart(cart_id:$cartId) {\n *                  ${metadata.fields}\n *                }\n *              }`\n *            `\n *         }),\n *       },\n *     }\n *   }\n * };\n * ```\n *\n * @example\n *\n * Using a custom GraphQL query to fetch cart\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n * // reduce the amount of fields returned by the query, when compared to the default query\n * const customQuery = {\n *   cart: 'cart-custom-query',\n *   metadata: {\n *     fields: 'id items { uid }'\n *   }\n * };\n *\n * const cart = await sdk.magento.cart({ cartId: '123'}, { customQuery });\n *\n * // Cart will contain only the fields specified in the custom query.\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function cart<RES extends "
            },
            {
              "kind": "Reference",
              "text": "CartResponse",
              "canonicalReference": "@vue-storefront/magento-sdk!CartResponse:type"
            },
            {
              "kind": "Content",
              "text": ">(params: "
            },
            {
              "kind": "Reference",
              "text": "CartQueryVariables",
              "canonicalReference": "@vue-storefront/magento-types!CartQueryVariables:type"
            },
            {
              "kind": "Content",
              "text": ", options?: "
            },
            {
              "kind": "Reference",
              "text": "MethodOptions",
              "canonicalReference": "@vue-storefront/magento-sdk!MethodOptions:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CustomQuery",
              "canonicalReference": "@vue-storefront/magento-sdk!CustomQuery:type"
            },
            {
              "kind": "Content",
              "text": "<'cart'>>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<RES>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 10,
            "endIndex": 12
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "params",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "RES",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "cart"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!CartQuery:type",
          "docComment": "/**\n * query type for the {@link cart} method.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type CartQuery = "
            },
            {
              "kind": "Content",
              "text": "{\n    cart: "
            },
            {
              "kind": "Reference",
              "text": "Query",
              "canonicalReference": "@vue-storefront/magento-types!Query:interface"
            },
            {
              "kind": "Content",
              "text": "['cart'];\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "CartQuery",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!CartResponse:type",
          "docComment": "/**\n * Category list response type\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type CartResponse<T extends "
            },
            {
              "kind": "Reference",
              "text": "DeepPartial",
              "canonicalReference": "ts-essentials!DeepPartial:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CartQuery",
              "canonicalReference": "@vue-storefront/magento-sdk!CartQuery:type"
            },
            {
              "kind": "Content",
              "text": "> "
            },
            {
              "kind": "Content",
              "text": "= "
            },
            {
              "kind": "Reference",
              "text": "CartQuery",
              "canonicalReference": "@vue-storefront/magento-sdk!CartQuery:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "ApolloQueryResult",
              "canonicalReference": "@apollo/client/core!ApolloQueryResult:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "CartResponse",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 8,
            "endIndex": 10
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-sdk!cartTotalQty:function(1)",
          "docComment": "/**\n * Method to resolve cart total quantity This method is optimized to fetch only total quantity of the cart and not the whole cart object. Do not use `cart` query inf you want to fetch only total quantity of the cart.\n *\n * @remarks\n *\n * This method sends a POST request to the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/cartTotalQty | cartTotalQty} endpoint of the Vue Storefront API Middleware. The default GraphQL query used by this method can be found {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/cartTotalQty | here}.\n *\n * @param params - Parameter object which can be used with this method. Refer to its type definition to learn about possible properties.\n *\n * @param options - Options that can be passed to additionally configure the request or customize the logic in a plugin.\n *\n * @typeParam Res - Customizable response interface to be used with custom queries.\n *\n * @returns Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/CartTotalQtyResponse | CartTotalQtyResponse}.\n *\n * @example\n *\n * Simple usage:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // fetch total quantity of the cart\n * const { data } await sdk.magento.cartTotalQty({cartId: 'some_cart_id' });\n *\n * // total quantity of the cart available in data.cart.total_quantity\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function cartTotalQty<RES extends "
            },
            {
              "kind": "Reference",
              "text": "CartTotalQtyResponse",
              "canonicalReference": "@vue-storefront/magento-sdk!CartTotalQtyResponse:type"
            },
            {
              "kind": "Content",
              "text": ">(params: "
            },
            {
              "kind": "Reference",
              "text": "CartQueryVariables",
              "canonicalReference": "@vue-storefront/magento-types!CartQueryVariables:type"
            },
            {
              "kind": "Content",
              "text": ", options?: "
            },
            {
              "kind": "Reference",
              "text": "MethodBaseOptions",
              "canonicalReference": "@vue-storefront/magento-sdk!MethodBaseOptions:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<RES>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "params",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "RES",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "cartTotalQty"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!CartTotalQtyQuery:type",
          "docComment": "/**\n * Cart total query type\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type CartTotalQtyQuery = "
            },
            {
              "kind": "Content",
              "text": "{\n    cart: {\n        total_quantity: number;\n    };\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "CartTotalQtyQuery",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!CartTotalQtyResponse:type",
          "docComment": "/**\n * Cart total quantity response type\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type CartTotalQtyResponse<T extends "
            },
            {
              "kind": "Reference",
              "text": "CartTotalQtyQuery",
              "canonicalReference": "@vue-storefront/magento-sdk!CartTotalQtyQuery:type"
            },
            {
              "kind": "Content",
              "text": " "
            },
            {
              "kind": "Content",
              "text": "= "
            },
            {
              "kind": "Reference",
              "text": "CartTotalQtyQuery",
              "canonicalReference": "@vue-storefront/magento-sdk!CartTotalQtyQuery:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "ApolloQueryResult",
              "canonicalReference": "@apollo/client/core!ApolloQueryResult:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "CartTotalQtyResponse",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 6,
            "endIndex": 8
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-sdk!categoryList:function(1)",
          "docComment": "/**\n * Method to list of all categories without filters\n *\n * @remarks\n *\n * This method sends a GET request to the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/categoryList | categoryList} endpoint of the Vue Storefront API Middleware. The default GraphQL query used by this method can be found {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/categoryList | here}.\n *\n * @param params - Parameter object which can be used with this method. Refer to its type definition to learn about possible properties.\n *\n * @param options - Options that can be passed to additionally configure the request or customize the logic in a plugin.\n *\n * @typeParam Res - Customizable response interface to be used with custom queries.\n *\n * @returns Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/CategoryListResponse | CategoryListResponse}.\n *\n * @example\n *\n * Simple usage:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // fetch list of categories with default parameters\n * const categoryList = await sdk.magento.categoryList({});\n * ```\n *\n * @example\n *\n * Creating a custom GraphQL query for adding product details.\n * ```ts\n * module.exports = {\n *   integrations: {\n *     magento: {\n *       customQueries: {\n *         'category-list-custom-query': ({ variables, metadata }) => ({\n *            variables,\n *            query: `\n *              query categoryList {\n *                 categories {\n *                   ${metadata.fields}\n *                 }\n *               }\n *            `\n *         }),\n *       },\n *     }\n *   }\n * };\n * ```\n *\n * @example\n *\n * Using a custom GraphQL query to fetch product details.\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n * const customQuery = {\n *  categoryList: 'category-list-custom-query',\n *    metadata: {\n *      fields: 'items { uid name }'\n *    }\n * };\n *\n * const categoryList = await sdk.magento.categoryList({}, { customQuery });\n *\n * // Category list will contain only the fields specified in the custom query.\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function categoryList<RES extends "
            },
            {
              "kind": "Reference",
              "text": "CategoryListResponse",
              "canonicalReference": "@vue-storefront/magento-sdk!CategoryListResponse:type"
            },
            {
              "kind": "Content",
              "text": ">(params: "
            },
            {
              "kind": "Reference",
              "text": "CategoryListQueryVariables",
              "canonicalReference": "@vue-storefront/magento-types!CategoryListQueryVariables:type"
            },
            {
              "kind": "Content",
              "text": ", options?: "
            },
            {
              "kind": "Reference",
              "text": "MethodOptions",
              "canonicalReference": "@vue-storefront/magento-sdk!MethodOptions:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CustomQuery",
              "canonicalReference": "@vue-storefront/magento-sdk!CustomQuery:type"
            },
            {
              "kind": "Content",
              "text": "<'categoryList'>>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<RES>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 10,
            "endIndex": 12
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "params",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "RES",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "categoryList"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!CategoryListQuery:type",
          "docComment": "/**\n * query type for the {@link categoryList} method.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type CategoryListQuery = "
            },
            {
              "kind": "Content",
              "text": "{\n    categories: "
            },
            {
              "kind": "Reference",
              "text": "Query",
              "canonicalReference": "@vue-storefront/magento-types!Query:interface"
            },
            {
              "kind": "Content",
              "text": "['categories'];\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "CategoryListQuery",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!CategoryListResponse:type",
          "docComment": "/**\n * Category list response type\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type CategoryListResponse<T extends "
            },
            {
              "kind": "Reference",
              "text": "DeepPartial",
              "canonicalReference": "ts-essentials!DeepPartial:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CategoryListQuery",
              "canonicalReference": "@vue-storefront/magento-sdk!CategoryListQuery:type"
            },
            {
              "kind": "Content",
              "text": "> "
            },
            {
              "kind": "Content",
              "text": "= "
            },
            {
              "kind": "Reference",
              "text": "CategoryListQuery",
              "canonicalReference": "@vue-storefront/magento-sdk!CategoryListQuery:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "ApolloQueryResult",
              "canonicalReference": "@apollo/client/core!ApolloQueryResult:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "CategoryListResponse",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 8,
            "endIndex": 10
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-sdk!categorySearch:function(1)",
          "docComment": "/**\n * Method to search categories\n *\n * @remarks\n *\n * This method sends a GET request to the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/categorySearch | categorySearch} endpoint of the Vue Storefront API Middleware. The default GraphQL query used by this method can be found {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/categorySearchQuery | here}.\n *\n * @param params - Parameter object which can be used with this method. Refer to its type definition to learn about possible properties.\n *\n * @param options - Options that can be passed to additionally configure the request or customize the logic in a plugin.\n *\n * @typeParam Res - Customizable response interface to be used with custom queries.\n *\n * @returns Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/CategorySearchResponse | CategorySearchResponse}.\n *\n * @example\n *\n * Simple usage without filters\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // fetch list of categories with default parameters\n * const categories = await sdk.magento.categorySearch();\n * ```\n *\n * @example\n *\n * Usage with filters\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // make a request to fetch list of categories with custom parameters\n * const details = await sdk.magento.categorySearch({\n *  filters: {\n *    category_uid: {\n *      in: ['MjA=']\n *    }\n *  }\n * });\n * ```\n *\n * @example\n *\n * Creating a custom GraphQL query for searching categories\n * ```ts\n * module.exports = {\n *   integrations: {\n *     magento: {\n *       customQueries: {\n *         'category-search-custom-query': ({ variables, metadata }) => ({\n *            variables,\n *            query: `\n *                 query categorySearch($filters: CategoryFilterInput) {\n *                   categoryList(filters: $filters) {\n *                     ${metadata.fields}\n *                   }\n *                 }\n *            `\n *         }),\n *       },\n *     }\n *   }\n * };\n * ```\n *\n * @example\n *\n * Using a custom GraphQL query to search categories.\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n * const customQuery = {\n *    categorySearch: 'category-search-custom-query',\n *    metadata: {\n *      fields: 'children_count products { total_count }'\n *    }\n * };\n *\n * const result = await sdk.magento.categorySearch({\n *  filter: {\n *    category_uid: {\n *      in: ['=MjA']\n *    }\n *  }\n * }, { customQuery });\n *\n * // Details will contain only the fields specified in the custom query.\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function categorySearch<RES extends "
            },
            {
              "kind": "Reference",
              "text": "CategorySearchResponse",
              "canonicalReference": "@vue-storefront/magento-sdk!CategorySearchResponse:type"
            },
            {
              "kind": "Content",
              "text": ">(params?: "
            },
            {
              "kind": "Reference",
              "text": "CategorySearchQueryVariables",
              "canonicalReference": "@vue-storefront/magento-types!CategorySearchQueryVariables:type"
            },
            {
              "kind": "Content",
              "text": ", options?: "
            },
            {
              "kind": "Reference",
              "text": "MethodOptions",
              "canonicalReference": "@vue-storefront/magento-sdk!MethodOptions:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CustomQuery",
              "canonicalReference": "@vue-storefront/magento-sdk!CustomQuery:type"
            },
            {
              "kind": "Content",
              "text": "<'categorySearch'>>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<RES>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 10,
            "endIndex": 12
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "params",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "RES",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "categorySearch"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!CategorySearchQuery:type",
          "docComment": "/**\n * query type for the {@link categorySearch} method.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type CategorySearchQuery = "
            },
            {
              "kind": "Content",
              "text": "{\n    categoryList: "
            },
            {
              "kind": "Reference",
              "text": "CategoryTree",
              "canonicalReference": "@vue-storefront/magento-types!CategoryTree:interface"
            },
            {
              "kind": "Content",
              "text": "[];\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "CategorySearchQuery",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!CategorySearchResponse:type",
          "docComment": "/**\n * Category search response type\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type CategorySearchResponse<T extends "
            },
            {
              "kind": "Reference",
              "text": "DeepPartial",
              "canonicalReference": "ts-essentials!DeepPartial:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CategorySearchQuery",
              "canonicalReference": "@vue-storefront/magento-sdk!CategorySearchQuery:type"
            },
            {
              "kind": "Content",
              "text": "> "
            },
            {
              "kind": "Content",
              "text": "= "
            },
            {
              "kind": "Reference",
              "text": "CategorySearchQuery",
              "canonicalReference": "@vue-storefront/magento-sdk!CategorySearchQuery:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "ApolloQueryResult",
              "canonicalReference": "@apollo/client/core!ApolloQueryResult:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "CategorySearchResponse",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 8,
            "endIndex": 10
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-sdk!changeCustomerPassword:function(1)",
          "docComment": "/**\n * Method to change customer password.\n *\n * @remarks\n *\n * This method sends a POST request to the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/changeCustomerPassword | changeCustomerPassword} endpoint of the Vue Storefront API Middleware. The default GraphQL query used by this method can be found {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/changeCustomerPassword | here}.\n *\n * @param params - Parameter object which can be used with this method. Refer to its type definition to learn about possible properties.\n *\n * @param options - Options that can be passed to additionally configure the request or customize the logic in a plugin.\n *\n * @typeParam Res - Customizable response interface to be used with custom queries.\n *\n * @returns Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/ChangeCustomerPasswordResponse | ChangeCustomerPasswordResponse}.\n *\n * @example\n *\n * Simple usage, change customer password:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * const result = await sdk.magento.changeCustomerPassword({\n *  currentPassword: 'currentPassword',\n *  newPassword: 'newPassword'\n * });\n * ```\n *\n * @example\n *\n * Creating a custom GraphQL query for changeCustomerPassword:\n * ```ts\n * module.exports = {\n *   integrations: {\n *     magento: {\n *       customQueries: {\n *         'change-customer-password-custom-query': ({ variables, metadata }) => ({\n *            variables,\n *            query: `\n *              mutation changeCustomerPassword($currentPassword: String!, $newPassword: String!) {\n *               changeCustomerPassword(\n *                 currentPassword: $currentPassword\n *                 newPassword: $newPassword\n *               ) {\n *                 ${metadata.fields}\n *               }\n *             }\n *            `\n *         }),\n *       },\n *     }\n *   }\n * };\n * ```\n *\n * @example\n *\n * Using a custom GraphQL query to narrow down the response data:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n * // reduce the amount of fields returned by the query, when compared to the default query\n * const customQuery = {\n *   changeCustomerPassword: 'change-customer-password-custom-query',\n *   metadata: {\n *     fields: 'email'\n *   }\n * };\n *\n * const result = await sdk.magento.changeCustomerPassword({\n *  currentPassword: 'currentPassword',\n *  newPassword: 'newPassword'\n * }, { customQuery });\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function changeCustomerPassword<RES extends "
            },
            {
              "kind": "Reference",
              "text": "ChangeCustomerPasswordResponse",
              "canonicalReference": "@vue-storefront/magento-sdk!ChangeCustomerPasswordResponse:type"
            },
            {
              "kind": "Content",
              "text": ">(params: "
            },
            {
              "kind": "Reference",
              "text": "ChangeCustomerPasswordInput",
              "canonicalReference": "@vue-storefront/magento-sdk!ChangeCustomerPasswordInput:type"
            },
            {
              "kind": "Content",
              "text": ", options?: "
            },
            {
              "kind": "Reference",
              "text": "MethodOptions",
              "canonicalReference": "@vue-storefront/magento-sdk!MethodOptions:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CustomQuery",
              "canonicalReference": "@vue-storefront/magento-sdk!CustomQuery:type"
            },
            {
              "kind": "Content",
              "text": "<'changeCustomerPassword'>>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<RES>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 10,
            "endIndex": 12
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "params",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "RES",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "changeCustomerPassword"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!ChangeCustomerPasswordInput:type",
          "docComment": "/**\n * Parameters for the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/changeCustomerPassword | changeCustomerPassword} method.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ChangeCustomerPasswordInput = "
            },
            {
              "kind": "Content",
              "text": "{\n    currentPassword: string;\n    newPassword: string;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ChangeCustomerPasswordInput",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!ChangeCustomerPasswordMutation:type",
          "docComment": "/**\n * mutation type for the {@link changeCustomerPassword} method.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ChangeCustomerPasswordMutation = "
            },
            {
              "kind": "Content",
              "text": "{\n    changeCustomerPassword: "
            },
            {
              "kind": "Reference",
              "text": "Mutation",
              "canonicalReference": "@vue-storefront/magento-types!Mutation:interface"
            },
            {
              "kind": "Content",
              "text": "['changeCustomerPassword'];\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ChangeCustomerPasswordMutation",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!ChangeCustomerPasswordResponse:type",
          "docComment": "/**\n * changeCustomerPassword response type\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ChangeCustomerPasswordResponse<T extends "
            },
            {
              "kind": "Reference",
              "text": "DeepPartial",
              "canonicalReference": "ts-essentials!DeepPartial:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ChangeCustomerPasswordMutation",
              "canonicalReference": "@vue-storefront/magento-sdk!ChangeCustomerPasswordMutation:type"
            },
            {
              "kind": "Content",
              "text": "> "
            },
            {
              "kind": "Content",
              "text": "= "
            },
            {
              "kind": "Reference",
              "text": "ChangeCustomerPasswordMutation",
              "canonicalReference": "@vue-storefront/magento-sdk!ChangeCustomerPasswordMutation:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "FetchResult",
              "canonicalReference": "@apollo/client/link/core!FetchResult:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ChangeCustomerPasswordResponse",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 8,
            "endIndex": 10
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!CmsBlockQuery:type",
          "docComment": "/**\n * query type for the {@link cmsBlocks} method.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type CmsBlockQuery = "
            },
            {
              "kind": "Content",
              "text": "{\n    cmsBlocks: "
            },
            {
              "kind": "Reference",
              "text": "Query",
              "canonicalReference": "@vue-storefront/magento-types!Query:interface"
            },
            {
              "kind": "Content",
              "text": "['cmsBlocks'];\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "CmsBlockQuery",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-sdk!cmsBlocks:function(1)",
          "docComment": "/**\n * Method to fetch cms blocks.\n *\n * @remarks\n *\n * This method sends a GET request to the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/cmsBlocks | cmsBlocks} endpoint of the Vue Storefront API Middleware. The default GraphQL query used by this method can be found {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/cmsBlocks | here}.\n *\n * @param params - Parameter object which can be used with this method. Refer to its type definition to learn about possible properties.\n *\n * @param options - Options that can be passed to additionally configure the request or customize the logic in a plugin.\n *\n * @typeParam Res - Customizable response interface to be used with custom queries.\n *\n * @returns Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/CmsBlocksResponse | CmsBlocksResponse}.\n *\n * @example\n *\n * Simple usage:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // fetch few cms blocks by their identifiers\n * const { data } = await sdk.magento.cmsBlocks({\n *   identifiers: ['id1', 'id2']\n * });\n *\n * // result will contain cms blocks with the specified identifiers\n * data.cmsBlocks.items.forEach(block => console.log(block.identifier));\n * ```\n *\n * @example\n *\n * Creating a custom GraphQL query\n * ```ts\n * module.exports = {\n *   integrations: {\n *     magento: {\n *       customQueries: {\n *         'cms-blocks-custom-query': ({ variables, metadata }) => ({\n *            variables,\n *            query: `\n *              query cmsBlock($identifiers: [String]) {\n *                cmsBlocks(identifiers: $identifiers) {\n *                  items {\n *                    ${metadata.fields}\n *                  }\n *                }\n *              }\n *            `\n *         }),\n *       },\n *     }\n *   }\n * };\n * ```\n *\n * @example\n *\n * Using a custom GraphQL query to reduce the amount of fields returned by the query\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n * // reduce the amount of fields returned by the query, when compared to the default query\n * // fetch only title\n * const customQuery = {\n *   cmsBlocks: 'cms-blocks-custom-query',\n *   metadata: {\n *     fields: 'title'\n *   }\n * };\n *\n * const { data } = await sdk.magento.cmsBlocks({\n *   identifiers: ['id1', 'id2']\n * }, { customQuery });\n *\n * // data will contain only block titles\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function cmsBlocks<RES extends "
            },
            {
              "kind": "Reference",
              "text": "CmsBlocksResponse",
              "canonicalReference": "@vue-storefront/magento-sdk!CmsBlocksResponse:type"
            },
            {
              "kind": "Content",
              "text": ">(params: "
            },
            {
              "kind": "Reference",
              "text": "CmsBlockQueryVariables",
              "canonicalReference": "@vue-storefront/magento-types!CmsBlockQueryVariables:type"
            },
            {
              "kind": "Content",
              "text": ", options?: "
            },
            {
              "kind": "Reference",
              "text": "MethodOptions",
              "canonicalReference": "@vue-storefront/magento-sdk!MethodOptions:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CustomQuery",
              "canonicalReference": "@vue-storefront/magento-sdk!CustomQuery:type"
            },
            {
              "kind": "Content",
              "text": "<'cmsBlocks'>>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<RES>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 10,
            "endIndex": 12
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "params",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "RES",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "cmsBlocks"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!CmsBlocksResponse:type",
          "docComment": "/**\n * cmsBlocks response type\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type CmsBlocksResponse<T extends "
            },
            {
              "kind": "Reference",
              "text": "DeepPartial",
              "canonicalReference": "ts-essentials!DeepPartial:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CmsBlockQuery",
              "canonicalReference": "@vue-storefront/magento-sdk!CmsBlockQuery:type"
            },
            {
              "kind": "Content",
              "text": "> "
            },
            {
              "kind": "Content",
              "text": "= "
            },
            {
              "kind": "Reference",
              "text": "CmsBlockQuery",
              "canonicalReference": "@vue-storefront/magento-sdk!CmsBlockQuery:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "ApolloQueryResult",
              "canonicalReference": "@apollo/client/core!ApolloQueryResult:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "CmsBlocksResponse",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 8,
            "endIndex": 10
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-sdk!cmsPage:function(1)",
          "docComment": "/**\n * Method to fetch CMS page\n *\n * @remarks\n *\n * This method sends a GET request to the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/cmsPage | cmsPage} endpoint of the Vue Storefront API Middleware. The default GraphQL query used by this method can be found {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/cmsPage | here}.\n *\n * @param params - Parameter object which can be used with this method. Refer to its type definition to learn about possible properties.\n *\n * @param options - Options that can be passed to additionally configure the request or customize the logic in a plugin.\n *\n * @typeParam Res - Customizable response interface to be used with custom queries.\n *\n * @returns Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/CmsPageResponse | CmsPageResponse}.\n *\n * @example\n *\n * Simple usage:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // fetch home page by the page identifier\n * const result = await sdk.magento.cmsPage({\n *   identifier: 'home'\n * });\n * ```\n *\n * @example\n *\n * Creating a custom GraphQL query\n * ```ts\n * module.exports = {\n *   integrations: {\n *     magento: {\n *       customQueries: {\n *         'cms-page-custom-query': ({ variables, metadata }) => ({\n *            variables,\n *            query: `\n *              query cmsPage($identifier: String) {\n *                cmsPage(identifier:$identifier) {\n *                  ${metadata?.fields}\n *                }\n *              }\n *            `\n *         }),\n *       },\n *     }\n *   }\n * };\n * ```\n *\n * @example\n *\n * Using a custom GraphQL query to reduce the amount of fields returned by the query\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n * // reduce the amount of fields to only the content and title\n * const customQuery = {\n *   cmsPage: 'cms-page-custom-query',\n *   metadata: {\n *     fields: 'title content'\n *   }\n * };\n *\n * const result = await sdk.magento.cmsPage({\n *   identifier: 'home'\n * }, { customQuery });\n *\n * // result will only contain the title and content fields\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function cmsPage<RES extends "
            },
            {
              "kind": "Reference",
              "text": "CmsPageResponse",
              "canonicalReference": "@vue-storefront/magento-sdk!CmsPageResponse:type"
            },
            {
              "kind": "Content",
              "text": ">(params: "
            },
            {
              "kind": "Reference",
              "text": "CmsPageQueryVariables",
              "canonicalReference": "@vue-storefront/magento-types!CmsPageQueryVariables:type"
            },
            {
              "kind": "Content",
              "text": ", options?: "
            },
            {
              "kind": "Reference",
              "text": "MethodOptions",
              "canonicalReference": "@vue-storefront/magento-sdk!MethodOptions:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CustomQuery",
              "canonicalReference": "@vue-storefront/magento-sdk!CustomQuery:type"
            },
            {
              "kind": "Content",
              "text": "<'cmsPage'>>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<RES>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 10,
            "endIndex": 12
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "params",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "RES",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "cmsPage"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!CmsPageQuery:type",
          "docComment": "/**\n * query type for the {@link cmsPage} method.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type CmsPageQuery = "
            },
            {
              "kind": "Content",
              "text": "{\n    cmsPage: "
            },
            {
              "kind": "Reference",
              "text": "Query",
              "canonicalReference": "@vue-storefront/magento-types!Query:interface"
            },
            {
              "kind": "Content",
              "text": "['cmsPage'];\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "CmsPageQuery",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!CmsPageResponse:type",
          "docComment": "/**\n * cmsPage response type\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type CmsPageResponse<T extends "
            },
            {
              "kind": "Reference",
              "text": "DeepPartial",
              "canonicalReference": "ts-essentials!DeepPartial:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CmsPageQuery",
              "canonicalReference": "@vue-storefront/magento-sdk!CmsPageQuery:type"
            },
            {
              "kind": "Content",
              "text": "> "
            },
            {
              "kind": "Content",
              "text": "= "
            },
            {
              "kind": "Reference",
              "text": "CmsPageQuery",
              "canonicalReference": "@vue-storefront/magento-sdk!CmsPageQuery:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "ApolloQueryResult",
              "canonicalReference": "@apollo/client/core!ApolloQueryResult:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "CmsPageResponse",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 8,
            "endIndex": 10
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-sdk!countries:function(1)",
          "docComment": "/**\n * Method to fetch list of countries\n *\n * @remarks\n *\n * This method sends a GET request to the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/countries | countries} endpoint of the Vue Storefront API Middleware. The default GraphQL query used by this method can be found {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/countries | here}.\n *\n * @param options - Options that can be passed to additionally configure the request or customize the logic in a plugin.\n *\n * @typeParam Res - Customizable response interface to be used with custom queries.\n *\n * @returns Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/CountriesResponse | CountriesResponse}.\n *\n * @example\n *\n * Simple usage:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // fetch list of countries\n * const result = await sdk.magento.countries();\n *\n * // result.data.countries is an array of countries\n * ```\n *\n * @example\n *\n * Creating a custom GraphQL query\n * ```ts\n * module.exports = {\n *   integrations: {\n *     magento: {\n *       customQueries: {\n *         'countries-custom-query': ({ variables, metadata }) => ({\n *            variables,\n *            query: `\n *              query countriesList {\n *                countries {\n *                  ${metadata?.fields}\n *                }\n *              }\n *            `\n *         }),\n *       },\n *     }\n *   }\n * };\n * ```\n *\n * @example\n *\n * Using a custom GraphQL query to reduce the amount of fields returned by the query\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n * // reduce the amount of fields returned by the query, when compared to the default query\n * const customQuery = {\n *   countries: 'countries-custom-query',\n *   metadata: {\n *     fields: 'full_name_english'\n *   }\n * };\n *\n * const result = await sdk.magento.countries({ customQuery });\n *\n * // result.data.countries will only contain the full_name_english field\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function countries<RES extends "
            },
            {
              "kind": "Reference",
              "text": "CountriesResponse",
              "canonicalReference": "@vue-storefront/magento-sdk!CountriesResponse:type"
            },
            {
              "kind": "Content",
              "text": ">(options?: "
            },
            {
              "kind": "Reference",
              "text": "MethodOptions",
              "canonicalReference": "@vue-storefront/magento-sdk!MethodOptions:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CustomQuery",
              "canonicalReference": "@vue-storefront/magento-sdk!CustomQuery:type"
            },
            {
              "kind": "Content",
              "text": "<'countries'>>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<RES>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 8,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "RES",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "countries"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!CountriesQuery:type",
          "docComment": "/**\n * query type for the {@link countries} method.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type CountriesQuery = "
            },
            {
              "kind": "Content",
              "text": "{\n    countries: "
            },
            {
              "kind": "Reference",
              "text": "Query",
              "canonicalReference": "@vue-storefront/magento-types!Query:interface"
            },
            {
              "kind": "Content",
              "text": "['countries'];\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "CountriesQuery",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!CountriesResponse:type",
          "docComment": "/**\n * countries response type\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type CountriesResponse<T extends "
            },
            {
              "kind": "Reference",
              "text": "DeepPartial",
              "canonicalReference": "ts-essentials!DeepPartial:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CountriesQuery",
              "canonicalReference": "@vue-storefront/magento-sdk!CountriesQuery:type"
            },
            {
              "kind": "Content",
              "text": "> "
            },
            {
              "kind": "Content",
              "text": "= "
            },
            {
              "kind": "Reference",
              "text": "CountriesQuery",
              "canonicalReference": "@vue-storefront/magento-sdk!CountriesQuery:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "ApolloQueryResult",
              "canonicalReference": "@apollo/client/core!ApolloQueryResult:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "CountriesResponse",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 8,
            "endIndex": 10
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-sdk!createCustomer:function(1)",
          "docComment": "/**\n * Method to create a new customer.\n *\n * @remarks\n *\n * This method sends a POST request to the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/createCustomer | createCustomer} endpoint of the Vue Storefront API Middleware. The default GraphQL query used by this method can be found {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/createCustomer | here}.\n *\n * @param params - Parameter object which can be used with this method. Refer to its type definition to learn about possible properties.\n *\n * @param options - Options that can be passed to additionally configure the request or customize the logic in a plugin.\n *\n * @typeParam Res - Customizable response interface to be used with custom queries.\n *\n * @returns Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/CreateCustomerResponse | CreateCustomerResponse}.\n *\n * @example\n *\n * Simple usage with basic customer data:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * const params = {\n *   email: 'john.doe@gmail.com'\n *   firstname: 'John',\n *   lastname: 'Doe',\n * }\n *\n * const result = await sdk.magento.createCustomer(params);\n * ```\n *\n * @example\n *\n * Creating a custom GraphQL query for creating a customer\n * ```ts\n * module.exports = {\n *   integrations: {\n *     magento: {\n *       customQueries: {\n *         'create-customer-custom-query': ({ variables, metadata }) => ({\n *            variables,\n *            query: `\n *              query customer {\n *                customer {\n *                  ${metadata.fields}\n *                }\n *              }\n *            `\n *         }),\n *       },\n *     }\n *   }\n * };\n * ```\n *\n * @example\n *\n * Using a custom GraphQL query to fetch customer\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n * // reduce the amount of fields returned by the query, when compared to the default query\n *\n * const customQuery = {\n *   customer: 'create customer-custom-query',\n *   metadata: {\n *     fields: 'email firstname lastname'\n *   }\n * };\n *\n * const params = {\n *   email: 'john.doe@gmail.com'\n *   firstname: 'John',\n *   lastname: 'Doe',\n * }\n *\n * const result = await sdk.magento.createCustomer(params, { customQuery }\n *\n * // result will contain only the fields specified in the custom query.\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function createCustomer<RES extends "
            },
            {
              "kind": "Reference",
              "text": "CreateCustomerResponse",
              "canonicalReference": "@vue-storefront/magento-sdk!CreateCustomerResponse:type"
            },
            {
              "kind": "Content",
              "text": ">(params: "
            },
            {
              "kind": "Reference",
              "text": "CustomerCreateInput",
              "canonicalReference": "@vue-storefront/magento-types!CustomerCreateInput:interface"
            },
            {
              "kind": "Content",
              "text": ", options?: "
            },
            {
              "kind": "Reference",
              "text": "MethodOptions",
              "canonicalReference": "@vue-storefront/magento-sdk!MethodOptions:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CustomQuery",
              "canonicalReference": "@vue-storefront/magento-sdk!CustomQuery:type"
            },
            {
              "kind": "Content",
              "text": "<'createCustomer'>>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<RES>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 10,
            "endIndex": 12
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "params",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "RES",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "createCustomer"
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-sdk!createCustomerAddress:function(1)",
          "docComment": "/**\n * Method to create a customer address.\n *\n * @remarks\n *\n * This method sends a POST request to the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/createCustomerAddress | createCustomerAddress} endpoint of the Vue Storefront API Middleware. The default GraphQL query used by this method can be found {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/createCustomerAddress | here}.\n *\n * @param params - Parameter object which can be used with this method. Refer to its type definition to learn about possible properties.\n *\n * @param options - Options that can be passed to additionally configure the request or customize the logic in a plugin.\n *\n * @typeParam Res - Customizable response interface to be used with custom queries.\n *\n * @returns Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/CreateCustomerAddressResponse | CreateCustomerAddressResponse}.\n *\n * @example\n *\n * Simple usage:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * const address: CustomerAddressInput = {\n *  city: 'some city',\n *  country_code: CountryCodeEnum.Us,\n *  default_billing: false,\n *  default_shipping: false,\n *  firstname: 'John',\n *  lastname: 'Doe',\n *  postcode: '08701',\n *  street: ['street'],\n *  telephone: '123123123',\n *  region: {\n *    region_code: 'NJ',\n *    region_id: 41,\n *    region: 'New Jersey'\n *  }\n * };\n *\n * // customer address will be created for the currently logged in customer\n * await sdk.magento.createCustomerAddress(address);\n * ```\n *\n * @example\n *\n * Creating a custom GraphQL query\n * ```ts\n * module.exports = {\n *   integrations: {\n *     magento: {\n *       customQueries: {\n *         'create-customer-address-custom-query': ({ variables, metadata }) => ({\n *            variables,\n *            query: `\n *              mutation createCustomerAddress($input: CustomerAddressInput!) {\n *                createCustomerAddress(input: $input) {\n *                  ${metadata.fields}\n *                }\n *               }\n *            `\n *         }),\n *       },\n *     }\n *   }\n * };\n * ```\n *\n * @example\n *\n * Using a custom GraphQL query to reduce the amount of data returned by the API\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n * // reduce the amount of fields returned by the query, when compared to the default query\n * const customQuery = {\n *   createCustomerAddress: 'create-customer-address-custom-query',\n *   metadata: {\n *     fields: 'id city'\n *   }\n * };\n *\n * // address parameter is the same as in the simple usage example\n * const result = await sdk.magento.createCustomerAddress(address, { customQuery });\n *\n * result.data.createCustomerAddress.city; // 'some city'\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function createCustomerAddress<RES extends "
            },
            {
              "kind": "Reference",
              "text": "CreateCustomerAddressResponse",
              "canonicalReference": "@vue-storefront/magento-sdk!CreateCustomerAddressResponse:type"
            },
            {
              "kind": "Content",
              "text": ">(params: "
            },
            {
              "kind": "Reference",
              "text": "CustomerAddressInput",
              "canonicalReference": "@vue-storefront/magento-types!CustomerAddressInput:interface"
            },
            {
              "kind": "Content",
              "text": ", options?: "
            },
            {
              "kind": "Reference",
              "text": "MethodOptions",
              "canonicalReference": "@vue-storefront/magento-sdk!MethodOptions:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CustomQuery",
              "canonicalReference": "@vue-storefront/magento-sdk!CustomQuery:type"
            },
            {
              "kind": "Content",
              "text": "<'createCustomerAddress'>>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<RES>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 10,
            "endIndex": 12
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "params",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "RES",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "createCustomerAddress"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!CreateCustomerAddressMutation:type",
          "docComment": "/**\n * mutation type for the {@link createCustomerAddress} method.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type CreateCustomerAddressMutation = "
            },
            {
              "kind": "Content",
              "text": "{\n    createCustomerAddress: "
            },
            {
              "kind": "Reference",
              "text": "Mutation",
              "canonicalReference": "@vue-storefront/magento-types!Mutation:interface"
            },
            {
              "kind": "Content",
              "text": "['createCustomerAddress'];\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "CreateCustomerAddressMutation",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!CreateCustomerAddressResponse:type",
          "docComment": "/**\n * createCustomerAddress response type\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type CreateCustomerAddressResponse<T extends "
            },
            {
              "kind": "Reference",
              "text": "DeepPartial",
              "canonicalReference": "ts-essentials!DeepPartial:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CreateCustomerAddressMutation",
              "canonicalReference": "@vue-storefront/magento-sdk!CreateCustomerAddressMutation:type"
            },
            {
              "kind": "Content",
              "text": "> "
            },
            {
              "kind": "Content",
              "text": "= "
            },
            {
              "kind": "Reference",
              "text": "CreateCustomerAddressMutation",
              "canonicalReference": "@vue-storefront/magento-sdk!CreateCustomerAddressMutation:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "FetchResult",
              "canonicalReference": "@apollo/client/link/core!FetchResult:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "CreateCustomerAddressResponse",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 8,
            "endIndex": 10
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!CreateCustomerMutation:type",
          "docComment": "/**\n * mutation type for the {@link createCustomer} method.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type CreateCustomerMutation = "
            },
            {
              "kind": "Content",
              "text": "{\n    createCustomerV2: "
            },
            {
              "kind": "Reference",
              "text": "Mutation",
              "canonicalReference": "@vue-storefront/magento-types!Mutation:interface"
            },
            {
              "kind": "Content",
              "text": "['createCustomerV2'];\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "CreateCustomerMutation",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!CreateCustomerResponse:type",
          "docComment": "/**\n * createCustomer response type\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type CreateCustomerResponse<T extends "
            },
            {
              "kind": "Reference",
              "text": "DeepPartial",
              "canonicalReference": "ts-essentials!DeepPartial:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CreateCustomerMutation",
              "canonicalReference": "@vue-storefront/magento-sdk!CreateCustomerMutation:type"
            },
            {
              "kind": "Content",
              "text": "> "
            },
            {
              "kind": "Content",
              "text": "= "
            },
            {
              "kind": "Reference",
              "text": "CreateCustomerMutation",
              "canonicalReference": "@vue-storefront/magento-sdk!CreateCustomerMutation:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "FetchResult",
              "canonicalReference": "@apollo/client/link/core!FetchResult:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "CreateCustomerResponse",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 8,
            "endIndex": 10
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-sdk!createEmptyCart:function(1)",
          "docComment": "/**\n * Method to create an empty cart.\n *\n * @remarks\n *\n * This method sends a POST request to the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/createEmptyCart | createEmptyCart} endpoint of the Vue Storefront API Middleware. The default GraphQL query used by this method can be found {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/createEmptyCart | here}.\n *\n * @param options - Options that can be passed to additionally configure the request or customize the logic in a plugin.\n *\n * @typeParam Res - Customizable response interface to be used with custom queries.\n *\n * @returns Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/CreateEmptyCartResponse | CreateEmptyCartResponse}.\n *\n * @example\n *\n * Simple usage:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // create an empty cart\n * const cart = await sdk.magento.createEmptyCart();\n *\n * // cart id can be accessed from the response\n * const cartId = cart.data.createEmptyCart;\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function createEmptyCart<RES extends "
            },
            {
              "kind": "Reference",
              "text": "CreateEmptyCartResponse",
              "canonicalReference": "@vue-storefront/magento-sdk!CreateEmptyCartResponse:type"
            },
            {
              "kind": "Content",
              "text": ">(options?: "
            },
            {
              "kind": "Reference",
              "text": "MethodBaseOptions",
              "canonicalReference": "@vue-storefront/magento-sdk!MethodBaseOptions:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<RES>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "RES",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "createEmptyCart"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!CreateEmptyCartMutation:type",
          "docComment": "/**\n * mutation type for the {@link createEmptyCart} method.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type CreateEmptyCartMutation = "
            },
            {
              "kind": "Content",
              "text": "{\n    createEmptyCart: "
            },
            {
              "kind": "Reference",
              "text": "Mutation",
              "canonicalReference": "@vue-storefront/magento-types!Mutation:interface"
            },
            {
              "kind": "Content",
              "text": "['createEmptyCart'];\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "CreateEmptyCartMutation",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!CreateEmptyCartResponse:type",
          "docComment": "/**\n * createEmptyCart response type\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type CreateEmptyCartResponse<T extends "
            },
            {
              "kind": "Reference",
              "text": "DeepPartial",
              "canonicalReference": "ts-essentials!DeepPartial:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CreateEmptyCartMutation",
              "canonicalReference": "@vue-storefront/magento-sdk!CreateEmptyCartMutation:type"
            },
            {
              "kind": "Content",
              "text": "> "
            },
            {
              "kind": "Content",
              "text": "= "
            },
            {
              "kind": "Reference",
              "text": "CreateEmptyCartMutation",
              "canonicalReference": "@vue-storefront/magento-sdk!CreateEmptyCartMutation:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "FetchResult",
              "canonicalReference": "@apollo/client/link/core!FetchResult:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "CreateEmptyCartResponse",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 8,
            "endIndex": 10
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-sdk!createProductReview:function(1)",
          "docComment": "/**\n * Method to create product review\n *\n * @remarks\n *\n * This method sends a POST request to the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/createProductReview | createProductReview} endpoint of the Vue Storefront API Middleware. The default GraphQL query used by this method can be found {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/createProductReview | here}.\n *\n * @param params - Parameter object which can be used with this method. Refer to its type definition to learn about possible properties.\n *\n * @param options - Options that can be passed to additionally configure the request or customize the logic in a plugin.\n *\n * @typeParam Res - Customizable response interface to be used with custom queries.\n *\n * @returns Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/CreateProductReviewResponse | CreateProductReviewResponse}.\n *\n * @example\n *\n * Simple usage:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // create review data structure\n * const review = {\n *  sku: 'some-sku',\n *  nickname: 'john.doe',\n *  summary: 'awesome thing, whatever it is!',\n *  text: 'this is a test review',\n *  ratings: [{\n *    id: 'NA==', // base64 encoded id\n *    value_id: 'MjA=' // base64 encoded value_id\n *  }]\n * };\n *\n * const result = await sdk.magento.createProductReview(review);\n *\n * // result will contain the created review and summary data\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function createProductReview<RES extends "
            },
            {
              "kind": "Reference",
              "text": "CreateProductReviewResponse",
              "canonicalReference": "@vue-storefront/magento-sdk!CreateProductReviewResponse:type"
            },
            {
              "kind": "Content",
              "text": ">(params: "
            },
            {
              "kind": "Reference",
              "text": "CreateProductReviewInput",
              "canonicalReference": "@vue-storefront/magento-types!CreateProductReviewInput:interface"
            },
            {
              "kind": "Content",
              "text": ", options?: "
            },
            {
              "kind": "Reference",
              "text": "MethodBaseOptions",
              "canonicalReference": "@vue-storefront/magento-sdk!MethodBaseOptions:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<RES>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "params",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "RES",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "createProductReview"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!CreateProductReviewMutation:type",
          "docComment": "/**\n * mutation type for the {@link createProductReview} method.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type CreateProductReviewMutation = "
            },
            {
              "kind": "Content",
              "text": "{\n    createProductReview: "
            },
            {
              "kind": "Reference",
              "text": "Mutation",
              "canonicalReference": "@vue-storefront/magento-types!Mutation:interface"
            },
            {
              "kind": "Content",
              "text": "['createProductReview'];\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "CreateProductReviewMutation",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!CreateProductReviewResponse:type",
          "docComment": "/**\n * createProductReview response type\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type CreateProductReviewResponse<T extends "
            },
            {
              "kind": "Reference",
              "text": "DeepPartial",
              "canonicalReference": "ts-essentials!DeepPartial:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CreateProductReviewMutation",
              "canonicalReference": "@vue-storefront/magento-sdk!CreateProductReviewMutation:type"
            },
            {
              "kind": "Content",
              "text": "> "
            },
            {
              "kind": "Content",
              "text": "= "
            },
            {
              "kind": "Reference",
              "text": "CreateProductReviewMutation",
              "canonicalReference": "@vue-storefront/magento-sdk!CreateProductReviewMutation:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "FetchResult",
              "canonicalReference": "@apollo/client/link/core!FetchResult:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "CreateProductReviewResponse",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 8,
            "endIndex": 10
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-sdk!currency:function(1)",
          "docComment": "/**\n * Method to fetch available currencies in a store.\n *\n * @remarks\n *\n * This method sends a GET request to the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/currency | currency} endpoint of the Vue Storefront API Middleware. The default GraphQL query used by this method can be found {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/currency | here}.\n *\n * @param options - Options that can be passed to additionally configure the request or customize the logic in a plugin.\n *\n * @typeParam Res - Customizable response interface to be used with custom queries.\n *\n * @returns Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/CurrencyResponse | CurrencyResponse}.\n *\n * @example\n *\n * Simple usage:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // fetch available currencies\n * const result = await sdk.magento.currency();\n *\n * // result would be something like:\n * // {\n * //   \"data\": {\n * //     \"currency\": {\n * //       \"_currency_code\": \"EUR\",\n * //       \"_currency_symbol\": \"€\",\n * //       \"default_display_currency_code\": \"EUR\",\n * //       \"default_display_currency_symbol\": \"€\",\n * //       \"available_currency_codes\": [\n * //         \"EUR\",\n * //         \"USD\"\n * //       ],\n * //       \"exchange_rates\": [\n * //         {\n * //           \"currency_to\": \"EUR\",\n *  //          \"rate\": 1\n *  //        },\n *  //        {\n *  //          \"currency_to\": \"USD\",\n *  //          \"rate\": 1.2\n *  //        }\n *  //      ]\n *  //    }\n *  //  }\n *  // }\n * ```\n *\n * @example\n *\n * Creating a custom GraphQL query\n * ```ts\n * module.exports = {\n *   integrations: {\n *     magento: {\n *       customQueries: {\n *         'currency-custom-query': ({ variables, metadata }) => ({\n *            variables,\n *            query: `\n *              query currency {\n *                currency{\n *                  ${metadata?.fields}\n *                }\n *              }\n *            `\n *         }),\n *       },\n *     }\n *   }\n * };\n * ```\n *\n * @example\n *\n * Using a custom GraphQL query to fetch a list of currencies with limited number of fields\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n * // reduce the amount of fields returned by the query, when compared to the default query\n * const customQuery = {\n *   currency: 'currency-custom-query',\n *   metadata: {\n *     fields: '_currency_code'\n *   }\n * };\n *\n * const result = await sdk.magento.currency({ customQuery });\n *\n * // result will contain only the _currency_code field\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function currency<RES extends "
            },
            {
              "kind": "Reference",
              "text": "CurrencyResponse",
              "canonicalReference": "@vue-storefront/magento-sdk!CurrencyResponse:type"
            },
            {
              "kind": "Content",
              "text": ">(options?: "
            },
            {
              "kind": "Reference",
              "text": "MethodOptions",
              "canonicalReference": "@vue-storefront/magento-sdk!MethodOptions:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CustomQuery",
              "canonicalReference": "@vue-storefront/magento-sdk!CustomQuery:type"
            },
            {
              "kind": "Content",
              "text": "<'currency'>>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<RES>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 8,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "RES",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "currency"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!CurrencyQuery:type",
          "docComment": "/**\n * query type for the {@link currency} method.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type CurrencyQuery = "
            },
            {
              "kind": "Content",
              "text": "{\n    currency: "
            },
            {
              "kind": "Reference",
              "text": "Query",
              "canonicalReference": "@vue-storefront/magento-types!Query:interface"
            },
            {
              "kind": "Content",
              "text": "['currency'];\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "CurrencyQuery",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!CurrencyResponse:type",
          "docComment": "/**\n * currency response type\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type CurrencyResponse<T extends "
            },
            {
              "kind": "Reference",
              "text": "DeepPartial",
              "canonicalReference": "ts-essentials!DeepPartial:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CurrencyQuery",
              "canonicalReference": "@vue-storefront/magento-sdk!CurrencyQuery:type"
            },
            {
              "kind": "Content",
              "text": "> "
            },
            {
              "kind": "Content",
              "text": "= "
            },
            {
              "kind": "Reference",
              "text": "CurrencyQuery",
              "canonicalReference": "@vue-storefront/magento-sdk!CurrencyQuery:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "ApolloQueryResult",
              "canonicalReference": "@apollo/client/core!ApolloQueryResult:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "CurrencyResponse",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 8,
            "endIndex": 10
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-sdk!customer:function(1)",
          "docComment": "/**\n * Method to get current customer information\n *\n * @remarks\n *\n * This method sends a POST request to the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/customer | customer} endpoint of the Vue Storefront API Middleware. The default GraphQL query used by this method can be found {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/customer | here}.\n *\n * @param options - Options that can be passed to additionally configure the request or customize the logic in a plugin.\n *\n * @typeParam Res - Customizable response interface to be used with custom queries.\n *\n * @returns Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/CustomerResponse | CustomerResponse}.\n *\n * @example\n *\n * The `customer()` returns the currently active user. This means that the request needs to contain an authorization token, which will tell Magento whose customer data should be fetched.\n *\n * If your browser has a VSF customer cookie saved, you can just call `customer()` without any parameters - the token will be attached automatically on every request to the middleware.\n *\n * Simple usage:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // fetch customer\n * const customer = await sdk.magento.customer();\n * ```\n *\n * @example\n *\n * If you're calling `customer()` in a non-browser context (for example in integration tests) where it's not possible to save a cookie, you can attach the token manually using `customHeaders`\n *\n * Usage with manual authorization:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * const token = '123'\n * const customHeaders = { Authorization: `Bearer {token}` }\n *\n * // fetch customer\n * const customer = await sdk.magento.customer({ customHeaders });\n * ```\n *\n * @example\n *\n * Creating a custom GraphQL query for fetching customer\n * ```ts\n * module.exports = {\n *   integrations: {\n *     magento: {\n *       customQueries: {\n *         'customer-custom-query': ({ variables, metadata }) => ({\n *            variables,\n *            query: `\n *              query customer {\n *                customer {\n *                  ${metadata.fields}\n *                }\n *              }\n *            `\n *         }),\n *       },\n *     }\n *   }\n * };\n * ```\n *\n * @example\n *\n * Using a custom GraphQL query to fetch customer\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n * // reduce the amount of fields returned by the query, when compared to the default query\n * const customQuery = {\n *   customer: 'customer-custom-query',\n *   metadata: {\n *     fields: 'email firstname lastname'\n *   }\n * };\n *\n * const customer = await sdk.magento.customer({ customQuery });\n *\n * // customer will contain only the fields specified in the custom query.\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function customer<RES extends "
            },
            {
              "kind": "Reference",
              "text": "CustomerResponse",
              "canonicalReference": "@vue-storefront/magento-sdk!CustomerResponse:type"
            },
            {
              "kind": "Content",
              "text": ">(options?: "
            },
            {
              "kind": "Reference",
              "text": "MethodOptions",
              "canonicalReference": "@vue-storefront/magento-sdk!MethodOptions:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CustomQuery",
              "canonicalReference": "@vue-storefront/magento-sdk!CustomQuery:type"
            },
            {
              "kind": "Content",
              "text": "<'customer'>>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<RES>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 8,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "RES",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "customer"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!CustomerAvailablePaymentMethodsQuery:type",
          "docComment": "/**\n * query type for the {@link getAvailableCustomerPaymentMethods} method.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type CustomerAvailablePaymentMethodsQuery = "
            },
            {
              "kind": "Content",
              "text": "{\n    cart: "
            },
            {
              "kind": "Reference",
              "text": "Query",
              "canonicalReference": "@vue-storefront/magento-types!Query:interface"
            },
            {
              "kind": "Content",
              "text": "['customerCart'];\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "CustomerAvailablePaymentMethodsQuery",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!CustomerAvailableShippingMethodsQuery:type",
          "docComment": "/**\n * query type for the {@link getAvailableCustomerShippingMethods} method.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type CustomerAvailableShippingMethodsQuery = "
            },
            {
              "kind": "Content",
              "text": "{\n    customerCart: "
            },
            {
              "kind": "Reference",
              "text": "Query",
              "canonicalReference": "@vue-storefront/magento-types!Query:interface"
            },
            {
              "kind": "Content",
              "text": "['customerCart'];\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "CustomerAvailableShippingMethodsQuery",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-sdk!customerCart:function(1)",
          "docComment": "/**\n * Method to fetch customer cart\n *\n * @remarks\n *\n * This method sends a POST request to the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/customerCart | customerCart} endpoint of the Vue Storefront API Middleware. The default GraphQL query used by this method can be found {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/customerCart | here}.\n *\n * @param options - Options that can be passed to additionally configure the request or customize the logic in a plugin.\n *\n * @typeParam Res - Customizable response interface to be used with custom queries.\n *\n * @returns Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/CustomerCartResponse | CustomerCartResponse}.\n *\n * @example\n *\n * Simple usage:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // fetch customer cart\n * const { data } = await sdk.magento.customerCart();\n *\n * // data contains cart details\n * const email = data?.customerCart?.email;\n *\n * ```\n *\n * @example\n *\n * Creating a custom GraphQL query for customerCart\n * ```ts\n * module.exports = {\n *   integrations: {\n *     magento: {\n *       customQueries: {\n *         'customer-cart-custom-query': ({ variables, metadata }) => ({\n *            variables,\n *            query: `\n *              query customerCart {\n *                customerCart {\n *                  ${metadata.fields}\n *                }\n *              }`\n *         }),\n *       },\n *     }\n *   }\n * };\n * ```\n *\n * @example\n *\n * Using a custom GraphQL query to reduce the amount of fields returned by the query, when compared to the default query\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n * // reduce the amount of fields returned by the query, when compared to the default query\n * const customQuery = {\n *   customerCart: 'customer-cart-custom-query',\n *   metadata: {\n *     fields: 'id email items { id sku }\n *   }\n * };\n *\n * const result = await sdk.magento.customerCart({ customQuery });\n *\n * // result contains cart details with only the fields specified in the custom query\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function customerCart<RES extends "
            },
            {
              "kind": "Reference",
              "text": "CustomerCartResponse",
              "canonicalReference": "@vue-storefront/magento-sdk!CustomerCartResponse:type"
            },
            {
              "kind": "Content",
              "text": ">(options?: "
            },
            {
              "kind": "Reference",
              "text": "MethodOptions",
              "canonicalReference": "@vue-storefront/magento-sdk!MethodOptions:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CustomQuery",
              "canonicalReference": "@vue-storefront/magento-sdk!CustomQuery:type"
            },
            {
              "kind": "Content",
              "text": "<'customerCart'>>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<RES>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 8,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "RES",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "customerCart"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!CustomerCartQuery:type",
          "docComment": "/**\n * query type for the {@link customerCart} method.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type CustomerCartQuery = "
            },
            {
              "kind": "Content",
              "text": "{\n    customerCart: "
            },
            {
              "kind": "Reference",
              "text": "Query",
              "canonicalReference": "@vue-storefront/magento-types!Query:interface"
            },
            {
              "kind": "Content",
              "text": "['customerCart'];\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "CustomerCartQuery",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!CustomerCartResponse:type",
          "docComment": "/**\n * customerCart response type\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type CustomerCartResponse<T extends "
            },
            {
              "kind": "Reference",
              "text": "DeepPartial",
              "canonicalReference": "ts-essentials!DeepPartial:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CustomerCartQuery",
              "canonicalReference": "@vue-storefront/magento-sdk!CustomerCartQuery:type"
            },
            {
              "kind": "Content",
              "text": "> "
            },
            {
              "kind": "Content",
              "text": "= "
            },
            {
              "kind": "Reference",
              "text": "CustomerCartQuery",
              "canonicalReference": "@vue-storefront/magento-sdk!CustomerCartQuery:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "ApolloQueryResult",
              "canonicalReference": "@apollo/client/core!ApolloQueryResult:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "CustomerCartResponse",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 8,
            "endIndex": 10
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!CustomerProductReviewQuery:type",
          "docComment": "/**\n * Method to fetch customer reviews\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type CustomerProductReviewQuery = "
            },
            {
              "kind": "Content",
              "text": "{\n    customer: "
            },
            {
              "kind": "Reference",
              "text": "Query",
              "canonicalReference": "@vue-storefront/magento-types!Query:interface"
            },
            {
              "kind": "Content",
              "text": "['customer'];\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "CustomerProductReviewQuery",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!CustomerQuery:type",
          "docComment": "/**\n * query type for the {@link customer} method.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type CustomerQuery = "
            },
            {
              "kind": "Content",
              "text": "{\n    customer: "
            },
            {
              "kind": "Reference",
              "text": "Query",
              "canonicalReference": "@vue-storefront/magento-types!Query:interface"
            },
            {
              "kind": "Content",
              "text": "['customer'];\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "CustomerQuery",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!CustomerResponse:type",
          "docComment": "/**\n * customer response type\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type CustomerResponse<T extends "
            },
            {
              "kind": "Reference",
              "text": "DeepPartial",
              "canonicalReference": "ts-essentials!DeepPartial:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CustomerQuery",
              "canonicalReference": "@vue-storefront/magento-sdk!CustomerQuery:type"
            },
            {
              "kind": "Content",
              "text": "> "
            },
            {
              "kind": "Content",
              "text": "= "
            },
            {
              "kind": "Reference",
              "text": "CustomerQuery",
              "canonicalReference": "@vue-storefront/magento-sdk!CustomerQuery:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "ApolloQueryResult",
              "canonicalReference": "@apollo/client/core!ApolloQueryResult:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "CustomerResponse",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 8,
            "endIndex": 10
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-sdk!customMutation:function(1)",
          "docComment": "/**\n * Method to send an arbitrary GraphQL mutation to the Magento GraphQL endpoint For sending query, please see {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/customQuery | customQuery}.\n *\n * @remarks\n *\n * This method sends a POST request to the {@link @vue-storefront/magento-api#ApiMethods.customMutation | customMutation} endpoint of the Vue Storefront API Middleware.\n *\n * @param params - Parameter object which can be used with this method. Refer to its type definition to learn about possible properties.\n *\n * @param options - Options that can be passed to additionally configure the request or customize the logic in a plugin.\n *\n * @typeParam RES - Set response type of passed query\n *\n * @typeParam INPUT - Customizable response interface to be used with custom queries.\n *\n * @returns Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/CustomQueryResponse | CustomQueryResponse}.\n *\n * @example\n *\n * Simple usage:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // Prepare custom mutation\n * // Do not use gql-tag (gql``) here.\n * // For syntax highlighting (provided by respective IDE extensions), add the `#graphql` comment at the start of the template string\n * const mutation = `#graphql\n *  mutation generateCustomerToken($email: String!, $password: String!) {\n *    generateCustomerToken(email: $email, password: $password) {\n *      token\n *    }\n *  }\n * `;\n *\n * // Prepare mutation variables\n * const mutationVariables: GenerateCustomerTokenInput = {\n *  email: TEST_USER_EMAIL,\n *  password: TEST_USER_PASSWORD\n * };\n *\n * // use custom mutation and variables to fetch response adjusted to your needs\n * const result = await sdk.magento.customMutation<CustomMutationResponse<GenerateCustomerTokenMutation>, CustomMutationInput<GenerateCustomerTokenInput>>({\n *  mutation,\n *  mutationVariables\n * });\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function customMutation<RES extends "
            },
            {
              "kind": "Reference",
              "text": "CustomMutationResponse",
              "canonicalReference": "@vue-storefront/magento-sdk!CustomMutationResponse:type"
            },
            {
              "kind": "Content",
              "text": "<any>"
            },
            {
              "kind": "Content",
              "text": ", INPUT extends "
            },
            {
              "kind": "Reference",
              "text": "CustomMutationInput",
              "canonicalReference": "@vue-storefront/magento-sdk!CustomMutationInput:type"
            },
            {
              "kind": "Content",
              "text": "<any>"
            },
            {
              "kind": "Content",
              "text": ">(params: "
            },
            {
              "kind": "Content",
              "text": "INPUT"
            },
            {
              "kind": "Content",
              "text": ", options?: "
            },
            {
              "kind": "Reference",
              "text": "MethodBaseOptions",
              "canonicalReference": "@vue-storefront/magento-sdk!MethodBaseOptions:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<RES>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 11,
            "endIndex": 13
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "params",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              }
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "RES",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "INPUT",
              "constraintTokenRange": {
                "startIndex": 4,
                "endIndex": 6
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "customMutation"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!CustomMutationInput:type",
          "docComment": "/**\n * Custom mutation input type\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type CustomMutationInput<TQueryVariables> = "
            },
            {
              "kind": "Content",
              "text": "{\n    mutation: string;\n    mutationVariables?: TQueryVariables;\n    fetchPolicy?: "
            },
            {
              "kind": "Reference",
              "text": "FetchPolicy",
              "canonicalReference": "@apollo/client/core!FetchPolicy:type"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "CustomMutationInput",
          "typeParameters": [
            {
              "typeParameterName": "TQueryVariables",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!CustomMutationResponse:type",
          "docComment": "/**\n * customQuery response type\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type CustomMutationResponse<T> = "
            },
            {
              "kind": "Reference",
              "text": "FetchResult",
              "canonicalReference": "@apollo/client/link/core!FetchResult:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "CustomMutationResponse",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-sdk!customQuery:function(1)",
          "docComment": "/**\n * Method to send an arbitrary GraphQL query to the Magento GraphQL endpoint For sending mutation, please see {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/customMutation | customMutation}.\n *\n * @remarks\n *\n * This method sends a POST request to the {@link @vue-storefront/magento-api#ApiMethods.customQuery | customQuery} endpoint of the Vue Storefront API Middleware.\n *\n * @param params - Parameter object which can be used with this method. Refer to its type definition to learn about possible properties.\n *\n * @param options - Options that can be passed to additionally configure the request or customize the logic in a plugin.\n *\n * @typeParam RES - Set response type of passed query\n *\n * @typeParam INPUT - Customizable response interface to be used with custom queries.\n *\n * @returns Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/CustomQueryResponse | CustomQueryResponse}.\n *\n * @example\n *\n * Simple usage:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // Do not use gql-tag (gql``) here.\n * // For syntax highlighting (provided by respective IDE extensions), add the `#graphql` comment at the start of the template string\n *\n * const query = `#graphql\n *   query($search: String!) {\n *     products(search: $search) {\n *       items {\n *         name\n *       }\n *     }\n *  }\n * `;\n *\n * const queryVariables: GetProductSearchParams = { search: \"t-shirt\" };\n *\n * // fetch query response\n * const customQueryResult = await sdk.magento.customQuery<CustomQueryResponse<ProductsListQuery>, CustomQueryInput<GetProductSearchParams>>({\n *   query: query,\n *   queryVariables\n * });\n * ```\n *\n * @example\n *\n * If you want the method to send a GET instead of a POST request, use the `options.clientConfig` parameter.\n * ```ts\n * const customQueryResult = await sdk.magento.customQuery(\n *   {\n *     query,\n *     queryVariables\n *   },\n *   {\n *     clientConfig: {\n *       method: 'GET'\n *     }\n *   }\n * );\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function customQuery<RES extends "
            },
            {
              "kind": "Reference",
              "text": "CustomQueryResponse",
              "canonicalReference": "@vue-storefront/magento-sdk!CustomQueryResponse:type"
            },
            {
              "kind": "Content",
              "text": "<any>"
            },
            {
              "kind": "Content",
              "text": ", INPUT extends "
            },
            {
              "kind": "Reference",
              "text": "CustomQueryInput",
              "canonicalReference": "@vue-storefront/magento-sdk!CustomQueryInput:type"
            },
            {
              "kind": "Content",
              "text": "<any>"
            },
            {
              "kind": "Content",
              "text": ">(params: "
            },
            {
              "kind": "Content",
              "text": "INPUT"
            },
            {
              "kind": "Content",
              "text": ", options?: "
            },
            {
              "kind": "Reference",
              "text": "MethodBaseOptions",
              "canonicalReference": "@vue-storefront/magento-sdk!MethodBaseOptions:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<RES>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 11,
            "endIndex": 13
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "params",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              }
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "RES",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "INPUT",
              "constraintTokenRange": {
                "startIndex": 4,
                "endIndex": 6
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "customQuery"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!CustomQuery:type",
          "docComment": "/**\n * Generic utility type for creating method-specific `customQuery` interfaces.\n *\n * @remarks\n *\n * This utility type uses the concept of {@link https://www.typescriptlang.org/docs/handbook/2/conditional-types.html#distributive-conditional-types | Distributive Conditional Types} to handle SDK methods with multiple custom query keys (e.g. `getMe`).\n *\n * @typeParam KEY - union of possible custom query keys for the method.\n *\n * @example\n * ```ts\n * import type { CustomQuery } from '../../types/MethodOptions';\n *\n * type CreateCartCustomQuery = CustomQuery<'createCart'>;\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type CustomQuery<KEY extends "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "KEY extends string ? "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<KEY, string> & {\n    metadata?: unknown;\n} : unknown"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "CustomQuery",
          "typeParameters": [
            {
              "typeParameterName": "KEY",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!CustomQueryInput:type",
          "docComment": "/**\n * Custom query input type\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type CustomQueryInput<TQueryVariables> = "
            },
            {
              "kind": "Content",
              "text": "{\n    query: string;\n    queryVariables?: TQueryVariables;\n    fetchPolicy?: "
            },
            {
              "kind": "Reference",
              "text": "FetchPolicy",
              "canonicalReference": "@apollo/client/core!FetchPolicy:type"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "CustomQueryInput",
          "typeParameters": [
            {
              "typeParameterName": "TQueryVariables",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!CustomQueryResponse:type",
          "docComment": "/**\n * customQuery response type\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type CustomQueryResponse<T> = "
            },
            {
              "kind": "Reference",
              "text": "ApolloQueryResult",
              "canonicalReference": "@apollo/client/core!ApolloQueryResult:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "CustomQueryResponse",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-sdk!deleteCustomerAddress:function(1)",
          "docComment": "/**\n * Method to delete a customer address.\n *\n * @remarks\n *\n * This method sends a POST request to the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/deleteCustomerAddress | deleteCustomerAddress} endpoint of the Vue Storefront API Middleware. The default GraphQL query used by this method can be found {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/deleteCustomerAddress | here}.\n *\n * @param params - Parameter object which can be used with this method. Refer to its type definition to learn about possible properties.\n *\n * @param options - Options that can be passed to additionally configure the request or customize the logic in a plugin.\n *\n * @typeParam Res - Customizable response interface to be used with custom queries.\n *\n * @returns Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/DeleteCustomerAddressResponse | DeleteCustomerAddressResponse}.\n *\n * @example\n *\n * Simple usage:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * const addressId = 12;\n * // customer address will be remove for the currently logged in customer\n * const response = await sdk.magento.deleteCustomerAddress({ id: addressId });\n * // response.data?.deleteCustomerAddress - result is stored here, it's boolean\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function deleteCustomerAddress<RES extends "
            },
            {
              "kind": "Reference",
              "text": "DeleteCustomerAddressResponse",
              "canonicalReference": "@vue-storefront/magento-sdk!DeleteCustomerAddressResponse:type"
            },
            {
              "kind": "Content",
              "text": ">(params: "
            },
            {
              "kind": "Reference",
              "text": "DeleteCustomerAddressMutationVariables",
              "canonicalReference": "@vue-storefront/magento-types!DeleteCustomerAddressMutationVariables:type"
            },
            {
              "kind": "Content",
              "text": ", options?: "
            },
            {
              "kind": "Reference",
              "text": "MethodBaseOptions",
              "canonicalReference": "@vue-storefront/magento-sdk!MethodBaseOptions:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<RES>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "params",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "RES",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "deleteCustomerAddress"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!DeleteCustomerAddressMutation:type",
          "docComment": "/**\n * mutation type for the {@link deleteCustomerAddress} method.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type DeleteCustomerAddressMutation = "
            },
            {
              "kind": "Content",
              "text": "{\n    deleteCustomerAddress: "
            },
            {
              "kind": "Reference",
              "text": "Mutation",
              "canonicalReference": "@vue-storefront/magento-types!Mutation:interface"
            },
            {
              "kind": "Content",
              "text": "['deleteCustomerAddress'];\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "DeleteCustomerAddressMutation",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!DeleteCustomerAddressResponse:type",
          "docComment": "/**\n * deleteCustomerAddress response type\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type DeleteCustomerAddressResponse<T extends "
            },
            {
              "kind": "Reference",
              "text": "DeepPartial",
              "canonicalReference": "ts-essentials!DeepPartial:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "DeleteCustomerAddressMutation",
              "canonicalReference": "@vue-storefront/magento-sdk!DeleteCustomerAddressMutation:type"
            },
            {
              "kind": "Content",
              "text": "> "
            },
            {
              "kind": "Content",
              "text": "= "
            },
            {
              "kind": "Reference",
              "text": "DeleteCustomerAddressMutation",
              "canonicalReference": "@vue-storefront/magento-sdk!DeleteCustomerAddressMutation:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "FetchResult",
              "canonicalReference": "@apollo/client/link/core!FetchResult:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "DeleteCustomerAddressResponse",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 8,
            "endIndex": 10
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-sdk!generateCustomerToken:function(1)",
          "docComment": "/**\n * Method to generate customer token\n *\n * @remarks\n *\n * This method sends a POST request to the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/generateCustomerToken | generateCustomerToken} endpoint of the Vue Storefront API Middleware. The default GraphQL query used by this method can be found {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/generateCustomerToken | here}.\n *\n * @param params - Parameter object which can be used with this method. Refer to its type definition to learn about possible properties.\n *\n * @param options - Options that can be passed to additionally configure the request or customize the logic in a plugin.\n *\n * @typeParam Res - Customizable response interface to be used with custom queries.\n *\n * @returns Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/GenerateCustomerTokenResponse | GenerateCustomerTokenResponse}.\n *\n * @example\n *\n * Simple usage:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // fetch token\n * const result = await sdk.magento.generateCustomerToken({\n *   email: 'some-email',\n *   password: 'some-password'\n * });\n *\n * // Token is now available in result.data.generateCustomerToken.token\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function generateCustomerToken<RES extends "
            },
            {
              "kind": "Reference",
              "text": "GenerateCustomerTokenResponse",
              "canonicalReference": "@vue-storefront/magento-sdk!GenerateCustomerTokenResponse:type"
            },
            {
              "kind": "Content",
              "text": ">(params: "
            },
            {
              "kind": "Reference",
              "text": "GenerateCustomerTokenInput",
              "canonicalReference": "@vue-storefront/magento-sdk!GenerateCustomerTokenInput:type"
            },
            {
              "kind": "Content",
              "text": ", options?: "
            },
            {
              "kind": "Reference",
              "text": "MethodBaseOptions",
              "canonicalReference": "@vue-storefront/magento-sdk!MethodBaseOptions:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<RES>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "params",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "RES",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "generateCustomerToken"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!GenerateCustomerTokenInput:type",
          "docComment": "/**\n * Parameters used in the {@link generateCustomerToken} method.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type GenerateCustomerTokenInput = "
            },
            {
              "kind": "Content",
              "text": "{\n    email: string;\n    password: string;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "GenerateCustomerTokenInput",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!GenerateCustomerTokenMutation:type",
          "docComment": "/**\n * mutation type for the {@link generateCustomerToken} method.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type GenerateCustomerTokenMutation = "
            },
            {
              "kind": "Content",
              "text": "{\n    generateCustomerToken: "
            },
            {
              "kind": "Reference",
              "text": "Mutation",
              "canonicalReference": "@vue-storefront/magento-types!Mutation:interface"
            },
            {
              "kind": "Content",
              "text": "['generateCustomerToken'];\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "GenerateCustomerTokenMutation",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!GenerateCustomerTokenResponse:type",
          "docComment": "/**\n * generateCustomerToken response type\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type GenerateCustomerTokenResponse<T extends "
            },
            {
              "kind": "Reference",
              "text": "DeepPartial",
              "canonicalReference": "ts-essentials!DeepPartial:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "GenerateCustomerTokenMutation",
              "canonicalReference": "@vue-storefront/magento-sdk!GenerateCustomerTokenMutation:type"
            },
            {
              "kind": "Content",
              "text": "> "
            },
            {
              "kind": "Content",
              "text": "= "
            },
            {
              "kind": "Reference",
              "text": "GenerateCustomerTokenMutation",
              "canonicalReference": "@vue-storefront/magento-sdk!GenerateCustomerTokenMutation:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "FetchResult",
              "canonicalReference": "@apollo/client/link/core!FetchResult:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "GenerateCustomerTokenResponse",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 8,
            "endIndex": 10
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-sdk!getAvailableCustomerPaymentMethods:function(1)",
          "docComment": "/**\n * Method to fetch available payment methods for a logged in customer.\n *\n * @remarks\n *\n * This method sends a POST request to the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/getAvailableCustomerPaymentMethods | getAvailableCustomerPaymentMethods} endpoint of the Vue Storefront API Middleware. The default GraphQL query used by this method can be found {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/getAvailableCustomerPaymentMethods | here}.\n *\n * @param options - Options that can be passed to additionally configure the request or customize the logic in a plugin.\n *\n * @typeParam Res - Customizable response interface to be used with custom queries.\n *\n * @returns Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/GetAvailableCustomerPaymentMethodsResponse | GetAvailableCustomerPaymentMethodsResponse}.\n *\n * @example\n *\n * Simple usage:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // fetch available payment methods for a logged in customer\n * const result = await sdk.magento.getAvailableCustomerPaymentMethods();\n *\n * // example result\n * {\n *   \"data\": {\n *     \"cart\": {\n *       \"__typename\": \"Cart\",\n *       \"available_payment_methods\": [\n *         {\n *           \"__typename\": \"AvailablePaymentMethod\",\n *           \"code\": \"checkmo\",\n *           \"title\": \"Check / Money order\"\n *         }\n *       ]\n *     }\n *   },\n *   \"loading\": false,\n *   \"networkStatus\": 7\n * }\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getAvailableCustomerPaymentMethods<RES extends "
            },
            {
              "kind": "Reference",
              "text": "GetAvailableCustomerPaymentMethodsResponse",
              "canonicalReference": "@vue-storefront/magento-sdk!GetAvailableCustomerPaymentMethodsResponse:type"
            },
            {
              "kind": "Content",
              "text": ">(options?: "
            },
            {
              "kind": "Reference",
              "text": "MethodBaseOptions",
              "canonicalReference": "@vue-storefront/magento-sdk!MethodBaseOptions:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<RES>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "RES",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "getAvailableCustomerPaymentMethods"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!GetAvailableCustomerPaymentMethodsResponse:type",
          "docComment": "/**\n * getAvailableCustomerPaymentMethods response type\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type GetAvailableCustomerPaymentMethodsResponse<T extends "
            },
            {
              "kind": "Reference",
              "text": "DeepPartial",
              "canonicalReference": "ts-essentials!DeepPartial:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CustomerAvailablePaymentMethodsQuery",
              "canonicalReference": "@vue-storefront/magento-sdk!CustomerAvailablePaymentMethodsQuery:type"
            },
            {
              "kind": "Content",
              "text": "> "
            },
            {
              "kind": "Content",
              "text": "= "
            },
            {
              "kind": "Reference",
              "text": "CustomerAvailablePaymentMethodsQuery",
              "canonicalReference": "@vue-storefront/magento-sdk!CustomerAvailablePaymentMethodsQuery:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "ApolloQueryResult",
              "canonicalReference": "@apollo/client/core!ApolloQueryResult:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "GetAvailableCustomerPaymentMethodsResponse",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 8,
            "endIndex": 10
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-sdk!getAvailableCustomerShippingMethods:function(1)",
          "docComment": "/**\n * Method to fetch available shipping methods for current customer. Customer must be logged in.\n *\n * @remarks\n *\n * This method sends a POST request to the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/getAvailableCustomerShippingMethods | getAvailableCustomerShippingMethods} endpoint of the Vue Storefront API Middleware. The default GraphQL query used by this method can be found {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/getAvailableCustomerShippingMethods | here}.\n *\n * @param options - Options that can be passed to additionally configure the request or customize the logic in a plugin.\n *\n * @typeParam Res - Customizable response interface to be used with custom queries.\n *\n * @returns Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/GetAvailableCustomerShippingMethodsResponse | GetAvailableCustomerShippingMethodsResponse}.\n *\n * @example\n *\n * Simple usage:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // fetch available shipping methods for current customer\n * const result = await sdk.magento.getAvailableCustomerShippingMethods();\n * // e.g. output:\n * // {\n * //   \"data\": {\n * //     \"customerCart\": {\n * //       \"shipping_addresses\": [\n * //         address1: {\n * //          \"available_shipping_methods\": [...]\n * //         },\n * //       ]\n * //     }\n * ```\n *\n * @example\n *\n * Creating a custom GraphQL query\n * ```ts\n * module.exports = {\n *   integrations: {\n *     magento: {\n *       customQueries: {\n *         'get-available-customer-shipping-methods-custom-query': ({ variables, metadata }) => ({\n *            variables,\n *            query: `\n *              query CustomerAvailableShippingMethods {\n *                customerCart {\n *                  ${metadata?.fields}\n *                }\n *              }\n *            `\n *         }),\n *       },\n *     }\n *   }\n * };\n * ```\n *\n * @example\n *\n * Using a custom GraphQL query to reduce the amount of data returned by the API\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n * // reduce the amount of fields returned by the query, when compared to the default query\n *\n * const customQuery = {\n *  getAvailableCustomerShippingMethods: 'get-available-customer-shipping-methods-custom-query',\n *  metadata: {\n *    fields: 'shipping_addresses { available_shipping_methods { available method_title } }'\n *  }\n * };\n *\n * const result = await sdk.magento.getAvailableCustomerShippingMethods({ customQuery });\n *\n * // the result will contain only the data defined in the custom query\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getAvailableCustomerShippingMethods<RES extends "
            },
            {
              "kind": "Reference",
              "text": "GetAvailableCustomerShippingMethodsResponse",
              "canonicalReference": "@vue-storefront/magento-sdk!GetAvailableCustomerShippingMethodsResponse:type"
            },
            {
              "kind": "Content",
              "text": ">(options?: "
            },
            {
              "kind": "Reference",
              "text": "MethodOptions",
              "canonicalReference": "@vue-storefront/magento-sdk!MethodOptions:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CustomQuery",
              "canonicalReference": "@vue-storefront/magento-sdk!CustomQuery:type"
            },
            {
              "kind": "Content",
              "text": "<'getAvailableCustomerShippingMethods'>>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<RES>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 8,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "RES",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "getAvailableCustomerShippingMethods"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!GetAvailableCustomerShippingMethodsResponse:type",
          "docComment": "/**\n * getAvailableCustomerShippingMethods response type\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type GetAvailableCustomerShippingMethodsResponse<T extends "
            },
            {
              "kind": "Reference",
              "text": "DeepPartial",
              "canonicalReference": "ts-essentials!DeepPartial:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CustomerAvailableShippingMethodsQuery",
              "canonicalReference": "@vue-storefront/magento-sdk!CustomerAvailableShippingMethodsQuery:type"
            },
            {
              "kind": "Content",
              "text": "> "
            },
            {
              "kind": "Content",
              "text": "= "
            },
            {
              "kind": "Reference",
              "text": "CustomerAvailableShippingMethodsQuery",
              "canonicalReference": "@vue-storefront/magento-sdk!CustomerAvailableShippingMethodsQuery:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "ApolloQueryResult",
              "canonicalReference": "@apollo/client/core!ApolloQueryResult:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "GetAvailableCustomerShippingMethodsResponse",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 8,
            "endIndex": 10
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-sdk!getAvailablePaymentMethods:function(1)",
          "docComment": "/**\n * Method to get available payment methods for the received guest cart. To get available customer payment methods use {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/getAvailableCustomerPaymentMethods | getAvailableCustomerPaymentMethods}.\n *\n * @remarks\n *\n * This method sends a POST request to the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/getAvailablePaymentMethods | getAvailablePaymentMethods} endpoint of the Vue Storefront API Middleware. The default GraphQL query used by this method can be found {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/getAvailablePaymentMethods | here}.\n *\n * @param params - Parameter object which can be used with this method. Refer to its type definition to learn about possible properties.\n *\n * @param options - Options that can be passed to additionally configure the request or customize the logic in a plugin.\n *\n * @typeParam Res - Customizable response interface to be used with custom queries.\n *\n * @returns Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/GetAvailablePaymentMethodsResponse | GetAvailablePaymentMethodsResponse}.\n *\n * @example\n *\n * Simple usage:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // fetch guest available payment methods\n * const result = await sdk.magento.getAvailablePaymentMethods({\n *  cartId: 'masked-cart-id'\n * });\n *\n * // example result\n * {\n *   \"data\": {\n *     \"cart\": {\n *       \"__typename\": \"Cart\",\n *       \"available_payment_methods\": [\n *         {\n *           \"__typename\": \"AvailablePaymentMethod\",\n *           \"code\": \"checkmo\",\n *           \"title\": \"Check / Money order\"\n *         }\n *       ]\n *     }\n *   },\n *   \"loading\": false,\n *   \"networkStatus\": 7\n * }\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getAvailablePaymentMethods<RES extends "
            },
            {
              "kind": "Reference",
              "text": "GetAvailablePaymentMethodsResponse",
              "canonicalReference": "@vue-storefront/magento-sdk!GetAvailablePaymentMethodsResponse:type"
            },
            {
              "kind": "Content",
              "text": ">(params: "
            },
            {
              "kind": "Reference",
              "text": "GuestAvailablePaymentMethodsQueryVariables",
              "canonicalReference": "@vue-storefront/magento-types!GuestAvailablePaymentMethodsQueryVariables:type"
            },
            {
              "kind": "Content",
              "text": ", options?: "
            },
            {
              "kind": "Reference",
              "text": "MethodBaseOptions",
              "canonicalReference": "@vue-storefront/magento-sdk!MethodBaseOptions:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<RES>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "params",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "RES",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "getAvailablePaymentMethods"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!GetAvailablePaymentMethodsResponse:type",
          "docComment": "/**\n * getAvailablePaymentMethods response type\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type GetAvailablePaymentMethodsResponse<T extends "
            },
            {
              "kind": "Reference",
              "text": "DeepPartial",
              "canonicalReference": "ts-essentials!DeepPartial:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "GuestAvailablePaymentMethodsQuery",
              "canonicalReference": "@vue-storefront/magento-sdk!GuestAvailablePaymentMethodsQuery:type"
            },
            {
              "kind": "Content",
              "text": "> "
            },
            {
              "kind": "Content",
              "text": "= "
            },
            {
              "kind": "Reference",
              "text": "GuestAvailablePaymentMethodsQuery",
              "canonicalReference": "@vue-storefront/magento-sdk!GuestAvailablePaymentMethodsQuery:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "ApolloQueryResult",
              "canonicalReference": "@apollo/client/core!ApolloQueryResult:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "GetAvailablePaymentMethodsResponse",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 8,
            "endIndex": 10
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-sdk!getAvailableShippingMethods:function(1)",
          "docComment": "/**\n * Method to fetch guest's available shipping methods\n *\n * @remarks\n *\n * This method sends a POST request to the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/getAvailableShippingMethods | getAvailableShippingMethods} endpoint of the Vue Storefront API Middleware. The default GraphQL query used by this method can be found {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/getAvailableShippingMethods | here}.\n *\n * @param params - Parameter object which can be used with this method. Refer to its type definition to learn about possible properties.\n *\n * @param options - Options that can be passed to additionally configure the request or customize the logic in a plugin.\n *\n * @typeParam Res - Customizable response interface to be used with custom queries.\n *\n * @returns Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/GetAvailableShippingMethodsResponse | GetAvailableShippingMethodsResponse}.\n *\n * @example\n *\n * Simple usage:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // fetch guest's available shipping methods\n * const result = await sdk.magento.getAvailableShippingMethods({\n *   cart_id: TEST_CART_ID\n * });\n * // array of available shipping methods for selected shipping address:\n * result.data.cart.shipping_addresses[0].available_shipping_methods[0];\n * ```\n *\n * @example\n *\n * Creating a custom GraphQL query for fetching only what's requested from shipping methods\n * ```ts\n * module.exports = {\n *   integrations: {\n *     magento: {\n *       customQueries: {\n *         'get-available-shipping-methods-custom-query': ({ variables, metadata }) => ({\n *            variables,\n *            query: `\n *              query GuestAvailableShippingMethods($cart_id: String!) {\n *                cart(cart_id:$cart_id) {\n *                  shipping_addresses {\n *                    available_shipping_methods {\n *                      ${metadata.fields}\n *                    }\n *                  }\n *                }\n *              }\n *            `\n *         }),\n *       },\n *     }\n *   }\n * };\n * ```\n *\n * @example\n *\n * Using a custom GraphQL query to fetch only method_title field\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n * // reduce the amount of fields returned by the query, when compared to the default query\n * const customQuery = {\n *   shippingMethods: 'get-available-shipping-methods-custom-query',\n *   metadata: {\n *     fields: 'method_title'\n *   }\n * };\n *\n * const result = await sdk.magento.getAvailableShippingMethods({ cart_id: '123'}, { customQuery });\n *\n * // result contains the customer addresses with only the city method_title. Of course, it has same shape as in the \"simple usage\" example.\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getAvailableShippingMethods<RES extends "
            },
            {
              "kind": "Reference",
              "text": "GetAvailableShippingMethodsResponse",
              "canonicalReference": "@vue-storefront/magento-sdk!GetAvailableShippingMethodsResponse:type"
            },
            {
              "kind": "Content",
              "text": ">(params: "
            },
            {
              "kind": "Reference",
              "text": "GuestAvailableShippingMethodsQueryVariables",
              "canonicalReference": "@vue-storefront/magento-types!GuestAvailableShippingMethodsQueryVariables:type"
            },
            {
              "kind": "Content",
              "text": ", options?: "
            },
            {
              "kind": "Reference",
              "text": "MethodOptions",
              "canonicalReference": "@vue-storefront/magento-sdk!MethodOptions:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CustomQuery",
              "canonicalReference": "@vue-storefront/magento-sdk!CustomQuery:type"
            },
            {
              "kind": "Content",
              "text": "<'shippingMethods'>>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<RES>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 10,
            "endIndex": 12
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "params",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "RES",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "getAvailableShippingMethods"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!GetAvailableShippingMethodsResponse:type",
          "docComment": "/**\n * getAvailableShippingMethods response type\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type GetAvailableShippingMethodsResponse<T extends "
            },
            {
              "kind": "Reference",
              "text": "DeepPartial",
              "canonicalReference": "ts-essentials!DeepPartial:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "GuestAvailableShippingMethodsQuery",
              "canonicalReference": "@vue-storefront/magento-sdk!GuestAvailableShippingMethodsQuery:type"
            },
            {
              "kind": "Content",
              "text": "> "
            },
            {
              "kind": "Content",
              "text": "= "
            },
            {
              "kind": "Reference",
              "text": "GuestAvailableShippingMethodsQuery",
              "canonicalReference": "@vue-storefront/magento-sdk!GuestAvailableShippingMethodsQuery:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "ApolloQueryResult",
              "canonicalReference": "@apollo/client/core!ApolloQueryResult:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "GetAvailableShippingMethodsResponse",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 8,
            "endIndex": 10
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-sdk!getCustomerAddresses:function(1)",
          "docComment": "/**\n * Method to get customer addresses. Customer must be logged in before calling this method.\n *\n * @remarks\n *\n * This method sends a POST request to the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/getCustomerAddresses | getCustomerAddresses} endpoint of the Vue Storefront API Middleware. The default GraphQL query used by this method can be found {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/getCustomerAddresses | here}.\n *\n * @param options - Options that can be passed to additionally configure the request or customize the logic in a plugin.\n *\n * @typeParam Res - Customizable response interface to be used with custom queries.\n *\n * @returns Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/GetCustomerAddressesResponse | GetCustomerAddressesResponse}.\n *\n * @example\n *\n * Simple usage:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // fetch customer addresses if customer is logged in\n * const { data } = await sdk.magento.getCustomerAddresses();\n *\n * // data contains the customer addresses\n * data.customer.addresses; // array of customer addresses\n * ```\n *\n * @example\n *\n * Creating a custom GraphQL query\n * ```ts\n * module.exports = {\n *   integrations: {\n *     magento: {\n *       customQueries: {\n *         'get-customer-addresses-custom-query': ({ variables, metadata }) => ({\n *            variables,\n *            query: `\n *              query getCustomerAddresses {\n *                customer {\n *                  addresses {\n *                    ${metadata.fields}\n *                  }\n *                }\n *              }\n *            `\n *         }),\n *       },\n *     }\n *   }\n * };\n * ```\n *\n * @example\n *\n * Using a custom GraphQL query to reduce the amount of data returned by the query\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n * // reduce the amount of fields returned by the query, when compared to the default query\n * const customQuery = {\n *   getCustomerAddresses: 'get-customer-addresses-custom-query',\n *   metadata: {\n *     fields: 'city'\n *   }\n * };\n *\n * const { data } = await sdk.magento.getCustomerAddresses({ customQuery });\n *\n * // data contains the customer addresses with only the city field\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getCustomerAddresses<RES extends "
            },
            {
              "kind": "Reference",
              "text": "GetCustomerAddressesResponse",
              "canonicalReference": "@vue-storefront/magento-sdk!GetCustomerAddressesResponse:type"
            },
            {
              "kind": "Content",
              "text": ">(options?: "
            },
            {
              "kind": "Reference",
              "text": "MethodOptions",
              "canonicalReference": "@vue-storefront/magento-sdk!MethodOptions:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CustomQuery",
              "canonicalReference": "@vue-storefront/magento-sdk!CustomQuery:type"
            },
            {
              "kind": "Content",
              "text": "<'getCustomerAddresses'>>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<RES>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 8,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "RES",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "getCustomerAddresses"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!GetCustomerAddressesQuery:type",
          "docComment": "/**\n * query type for the {@link getCustomerAddresses} method.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type GetCustomerAddressesQuery = "
            },
            {
              "kind": "Content",
              "text": "{\n    customer: "
            },
            {
              "kind": "Reference",
              "text": "Query",
              "canonicalReference": "@vue-storefront/magento-types!Query:interface"
            },
            {
              "kind": "Content",
              "text": "['customer'];\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "GetCustomerAddressesQuery",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!GetCustomerAddressesResponse:type",
          "docComment": "/**\n * getCustomerAddresses response type\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type GetCustomerAddressesResponse<T extends "
            },
            {
              "kind": "Reference",
              "text": "DeepPartial",
              "canonicalReference": "ts-essentials!DeepPartial:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "GetCustomerAddressesQuery",
              "canonicalReference": "@vue-storefront/magento-sdk!GetCustomerAddressesQuery:type"
            },
            {
              "kind": "Content",
              "text": "> "
            },
            {
              "kind": "Content",
              "text": "= "
            },
            {
              "kind": "Reference",
              "text": "GetCustomerAddressesQuery",
              "canonicalReference": "@vue-storefront/magento-sdk!GetCustomerAddressesQuery:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "ApolloQueryResult",
              "canonicalReference": "@apollo/client/core!ApolloQueryResult:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "GetCustomerAddressesResponse",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 8,
            "endIndex": 10
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!GuestAvailablePaymentMethodsQuery:type",
          "docComment": "/**\n * query type for the {@link getAvailablePaymentMethods} method.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type GuestAvailablePaymentMethodsQuery = "
            },
            {
              "kind": "Content",
              "text": "{\n    cart: "
            },
            {
              "kind": "Reference",
              "text": "Query",
              "canonicalReference": "@vue-storefront/magento-types!Query:interface"
            },
            {
              "kind": "Content",
              "text": "['cart'];\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "GuestAvailablePaymentMethodsQuery",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!GuestAvailableShippingMethodsQuery:type",
          "docComment": "/**\n * query type for the {@link getAvailableShippingMethods} method.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type GuestAvailableShippingMethodsQuery = "
            },
            {
              "kind": "Content",
              "text": "{\n    cart: "
            },
            {
              "kind": "Reference",
              "text": "Query",
              "canonicalReference": "@vue-storefront/magento-types!Query:interface"
            },
            {
              "kind": "Content",
              "text": "['cart'];\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "GuestAvailableShippingMethodsQuery",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-sdk!mergeCarts:function(1)",
          "docComment": "/**\n * Method to merge carts\n *\n * @remarks\n *\n * This method sends a POST request to the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/mergeCarts | mergeCarts} endpoint of the Vue Storefront API Middleware. The default GraphQL query used by this method can be found {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/mergeCarts | here}.\n *\n * @param params - Parameter object which can be used with this method. Refer to its type definition to learn about possible properties.\n *\n * @param options - Options that can be passed to additionally configure the request or customize the logic in a plugin.\n *\n * @typeParam Res - Customizable response interface to be used with custom queries.\n *\n * @returns Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/MergeCartsResponse | MergeCartsResponse}.\n *\n * @example\n *\n * Simple usage:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * const params = {\n *   sourceCartId: 'pCS0ykep1l3wGlPKSyWLJq5fb1DxIQcp',\n *   // this cart needs to have been created by a logged in user\n *   destinationCartId: 'xiYYh2ep0l3xGtPsz2WLJf5f31DxBJx0'\n * }\n *\n * // merge carts and return the result (cart)\n * const mergedCart = await sdk.magento.mergeCarts(params);\n * ```\n *\n * @example\n *\n * Creating a custom GraphQL query for merging carts\n * ```ts\n * module.exports = {\n *   integrations: {\n *     magento: {\n *       customQueries: {\n *         'merge-carts-custom-query': ({ variables, metadata }) => ({\n *            variables,\n *            query: `\n *              mutation mergeCarts($sourceCartId: String!, $destinationCartId: String!) {\n *                mergeCarts(source_cart_id: $sourceCartId, destination_cart_id: $destinationCartId) {\n *                  ${metadata.fields}\n *                }\n *              }\n *            `\n *         }),\n *       },\n *     }\n *   }\n * };\n * ```\n *\n * @example\n *\n * Using a custom GraphQL query to merge carts\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n * // reduce the amount of fields returned by the query, when compared to the default query\n * const customQuery = {\n *   cart: 'merge-carts-custom-query',\n *   metadata: {\n *     fields: 'id items { product { name } }'\n *   }\n * };\n *\n * const params = {\n *   sourceCartId: 'pCS0ykep1l3wGlPKSyWLJq5fb1DxIQcp',\n *   destinationCartId: 'xiYYh2ep0l3xGtPsz2WLJf5f31DxBJx0'\n * }\n * const mergedCart = await sdk.magento.mergeCarts(params, { customQuery });\n *\n * // Merged cart will contain only the fields specified in the custom query.\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function mergeCarts<RES extends "
            },
            {
              "kind": "Reference",
              "text": "MergeCartsResponse",
              "canonicalReference": "@vue-storefront/magento-sdk!MergeCartsResponse:type"
            },
            {
              "kind": "Content",
              "text": ">(params: "
            },
            {
              "kind": "Reference",
              "text": "MergeCartsMutationVariables",
              "canonicalReference": "@vue-storefront/magento-types!MergeCartsMutationVariables:type"
            },
            {
              "kind": "Content",
              "text": ", options?: "
            },
            {
              "kind": "Reference",
              "text": "MethodOptions",
              "canonicalReference": "@vue-storefront/magento-sdk!MethodOptions:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CustomQuery",
              "canonicalReference": "@vue-storefront/magento-sdk!CustomQuery:type"
            },
            {
              "kind": "Content",
              "text": "<'mergeCarts'>>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<RES>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 10,
            "endIndex": 12
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "params",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "RES",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "mergeCarts"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!MergeCartsMutation:type",
          "docComment": "/**\n * mutation type for the {@link mergeCarts} method.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type MergeCartsMutation = "
            },
            {
              "kind": "Content",
              "text": "{\n    mergeCarts: "
            },
            {
              "kind": "Reference",
              "text": "Mutation",
              "canonicalReference": "@vue-storefront/magento-types!Mutation:interface"
            },
            {
              "kind": "Content",
              "text": "['mergeCarts'];\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "MergeCartsMutation",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!MergeCartsResponse:type",
          "docComment": "/**\n * mergeCarts response type\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type MergeCartsResponse<T extends "
            },
            {
              "kind": "Reference",
              "text": "DeepPartial",
              "canonicalReference": "ts-essentials!DeepPartial:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "MergeCartsMutation",
              "canonicalReference": "@vue-storefront/magento-sdk!MergeCartsMutation:type"
            },
            {
              "kind": "Content",
              "text": "> "
            },
            {
              "kind": "Content",
              "text": "= "
            },
            {
              "kind": "Reference",
              "text": "MergeCartsMutation",
              "canonicalReference": "@vue-storefront/magento-sdk!MergeCartsMutation:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "ApolloQueryResult",
              "canonicalReference": "@apollo/client/core!ApolloQueryResult:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "MergeCartsResponse",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 8,
            "endIndex": 10
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!MethodBaseOptions:type",
          "docComment": "/**\n * Options available for methods which do not use custom queries.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type MethodBaseOptions = "
            },
            {
              "kind": "Content",
              "text": "{\n    clientConfig?: "
            },
            {
              "kind": "Reference",
              "text": "AxiosRequestConfig",
              "canonicalReference": "axios!AxiosRequestConfig:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    customHeaders?: "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<string, string>;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "MethodBaseOptions",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!MethodOptions:type",
          "docComment": "/**\n * Options available for methods which use custom queries.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type MethodOptions<CustomQueryType> = "
            },
            {
              "kind": "Reference",
              "text": "MethodBaseOptions",
              "canonicalReference": "@vue-storefront/magento-sdk!MethodBaseOptions:type"
            },
            {
              "kind": "Content",
              "text": " & {\n    customQuery?: CustomQueryType;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "MethodOptions",
          "typeParameters": [
            {
              "typeParameterName": "CustomQueryType",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@vue-storefront/magento-sdk!ModuleOptions:interface",
          "docComment": "/**\n * Connector options.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ModuleOptions "
            }
          ],
          "releaseTag": "Public",
          "name": "ModuleOptions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@vue-storefront/magento-sdk!ModuleOptions#apiUrl:member",
              "docComment": "/**\n * The API URL of the Magento instance\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "apiUrl: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "apiUrl",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@vue-storefront/magento-sdk!ModuleOptions#ssrApiUrl:member",
              "docComment": "/**\n * The SSR API URL of the Magento instance\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ssrApiUrl: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "ssrApiUrl",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-sdk!placeOrder:function(1)",
          "docComment": "/**\n * Method to place an order.\n *\n * @remarks\n *\n * This method sends a POST request to the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/placeOrder | placeOrder} endpoint of the Vue Storefront API Middleware. The default GraphQL query used by this method can be found {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/placeOrder | here}.\n *\n * @param params - Parameter object which can be used with this method. Refer to its type definition to learn about possible properties.\n *\n * @param options - Options that can be passed to additionally configure the request or customize the logic in a plugin.\n *\n * @typeParam Res - Customizable response interface to be used with custom queries.\n *\n * @returns Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/PlaceOrderResponse | PlaceOrderResponse}.\n *\n * @example\n *\n * Simple usage:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // place an order\n * const result = await sdk.magento.placeOrder({cart_id: 'some-cart-id'});\n *\n * // example result:\n * {\n *   \"data\": {\n *     \"placeOrder\": {\n *       \"__typename\": \"PlaceOrderOutput\",\n *       \"order\": {\n *         \"__typename\": \"Order\",\n *         \"order_number\": \"000000522\"\n *       }\n *     }\n *   }\n * }\n * ```\n *\n * @example\n *\n * The complete flow of placing an order for a guest user:\n *\n * ```ts const emptyCart = await sdk.magento.createEmptyCart(); // create an empty cart const cartId = emptyCart?.data?.createEmptyCart || ''; // get cart id from the response\n *\n * // set guest email on the cart await sdk.magento.setGuestEmailOnCart({ cart_id: cartId, email: 'john.doe+test@vuestorefront.io' });\n *\n * // add products to the cart await sdk.magento.addProductsToCart({ cartId, cartItems: [ { quantity: 1, sku: 'some-sku', // size and color selected_options: ['Y29uZmlndXJhYmxlLzkzLzUz', 'Y29uZmlndXJhYmxlLzE0NC8xNzE='] } ] });\n *\n * const address = { firstname: 'John', lastname: 'Doe', city: 'New York', country_code: 'US', street: ['Street 1', 'Street 2'], telephone: '123 123 123', region: 'AL', postcode: '10001', save_in_address_book: false }\n *\n * // set shipping and billing address await sdk.magento.setShippingAddressesOnCart({ cart_id: cartId, shipping_addresses: [{ address }] }); await sdk.magento.setBillingAddressOnCart({ cart_id: cartId, billing_address: { address } });\n *\n * // await sdk.magento.setShippingMethodsOnCart({ cart_id: cartId, shipping_methods: [{ carrier_code: 'flatrate', method_code: 'flatrate' }] }); await sdk.magento.setPaymentMethodOnCart({ cart_id: cartId, payment_method: { code: 'checkmo' } });\n *\n * // place the order const result = await sdk.magento.placeOrder({ cart_id: cartId });\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function placeOrder<RES extends "
            },
            {
              "kind": "Reference",
              "text": "PlaceOrderResponse",
              "canonicalReference": "@vue-storefront/magento-sdk!PlaceOrderResponse:type"
            },
            {
              "kind": "Content",
              "text": ">(params: "
            },
            {
              "kind": "Reference",
              "text": "PlaceOrderInput",
              "canonicalReference": "@vue-storefront/magento-types!PlaceOrderInput:interface"
            },
            {
              "kind": "Content",
              "text": ", options?: "
            },
            {
              "kind": "Reference",
              "text": "MethodOptions",
              "canonicalReference": "@vue-storefront/magento-sdk!MethodOptions:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CustomQuery",
              "canonicalReference": "@vue-storefront/magento-sdk!CustomQuery:type"
            },
            {
              "kind": "Content",
              "text": "<'placeOrder'>>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<RES>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 10,
            "endIndex": 12
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "params",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "RES",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "placeOrder"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!PlaceOrderMutation:type",
          "docComment": "/**\n * mutation type for the {@link placeOrder} method.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type PlaceOrderMutation = "
            },
            {
              "kind": "Content",
              "text": "{\n    placeOrder: "
            },
            {
              "kind": "Reference",
              "text": "Mutation",
              "canonicalReference": "@vue-storefront/magento-types!Mutation:interface"
            },
            {
              "kind": "Content",
              "text": "['placeOrder'];\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "PlaceOrderMutation",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!PlaceOrderResponse:type",
          "docComment": "/**\n * placeOrder response type\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type PlaceOrderResponse<T extends "
            },
            {
              "kind": "Reference",
              "text": "DeepPartial",
              "canonicalReference": "ts-essentials!DeepPartial:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "PlaceOrderMutation",
              "canonicalReference": "@vue-storefront/magento-sdk!PlaceOrderMutation:type"
            },
            {
              "kind": "Content",
              "text": "> "
            },
            {
              "kind": "Content",
              "text": "= "
            },
            {
              "kind": "Reference",
              "text": "PlaceOrderMutation",
              "canonicalReference": "@vue-storefront/magento-sdk!PlaceOrderMutation:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "FetchResult",
              "canonicalReference": "@apollo/client/link/core!FetchResult:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "PlaceOrderResponse",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 8,
            "endIndex": 10
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-sdk!productDetails:function(1)",
          "docComment": "/**\n * Method to get products details\n *\n * @remarks\n *\n * This method sends a GET request to the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/productDetails | productDetails} endpoint of the Vue Storefront API Middleware. The default GraphQL query used by this method can be found {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/productDetailsQuery | here}.\n *\n * @param params - Parameter object which can be used with this method. Refer to its type definition to learn about possible properties.\n *\n * @param options - Options that can be passed to additionally configure the request or customize the logic in a plugin.\n *\n * @typeParam Res - Customizable response interface to be used with custom queries.\n *\n * @returns Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/ProductDetailsResponse | ProductDetailsResponse}.\n *\n * @example\n *\n * Simple usage without filters, sorting or pagination:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // fetch list of products with default parameters\n * const details = await sdk.magento.productDetails({});\n * ```\n *\n * @example\n *\n * Usage with filters, sorting and pagination:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // make a request to fetch list of products with custom parameters\n * const details = await sdk.magento.productDetails({\n *  pageSize: 20,\n *  currentPage: 1,\n *  filter: {\n *    sku: {\n *      eq: PRODUCT_SKU\n *    }\n *  }\n * });\n * ```\n *\n * @example\n *\n * Creating a custom GraphQL query for adding product details.\n * ```ts\n * module.exports = {\n *   integrations: {\n *     magento: {\n *       customQueries: {\n *         'product-details-custom-query': ({ variables, metadata }) => ({\n *            variables,\n *            query: `\n *              query productDetails(\n *                $search: String = \"\",\n *                $filter: ProductAttributeFilterInput,\n *                $pageSize: Int = 10,\n *                $currentPage: Int = 1,\n *                $sort: ProductAttributeSortInput\n *              ) {\n *                products(search: $search, filter: $filter, sort: $sort, pageSize: $pageSize, currentPage: $currentPage) {\n *                  ${metadata.fields}\n *                }\n *              }\n *            `\n *         }),\n *       },\n *     }\n *   }\n * };\n * ```\n *\n * @example\n *\n * Using a custom GraphQL query to fetch product details.\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n * const customQuery = {\n *  productDetails: 'product-details-custom-query',\n *    metadata: {\n *      fields: 'items { sku name }'\n *    }\n * };\n *\n * const details = await sdk.magento.productDetails({\n *  filter: {\n *    sku: {\n *      eq: 'some-sku' // optional SKU filter\n *    }\n *  }\n * }, { customQuery });\n *\n * // Details will contain only the fields specified in the custom query.\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function productDetails<RES extends "
            },
            {
              "kind": "Reference",
              "text": "ProductDetailsResponse",
              "canonicalReference": "@vue-storefront/magento-sdk!ProductDetailsResponse:type"
            },
            {
              "kind": "Content",
              "text": ">(params: "
            },
            {
              "kind": "Reference",
              "text": "GetProductSearchParams",
              "canonicalReference": "@vue-storefront/magento-types!GetProductSearchParams:type"
            },
            {
              "kind": "Content",
              "text": ", options?: "
            },
            {
              "kind": "Reference",
              "text": "MethodOptions",
              "canonicalReference": "@vue-storefront/magento-sdk!MethodOptions:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CustomQuery",
              "canonicalReference": "@vue-storefront/magento-sdk!CustomQuery:type"
            },
            {
              "kind": "Content",
              "text": "<'productDetails'>>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<RES>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 10,
            "endIndex": 12
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "params",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "RES",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "productDetails"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!ProductDetailsQuery:type",
          "docComment": "/**\n * query type for the {@link productDetails} method.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ProductDetailsQuery = "
            },
            {
              "kind": "Content",
              "text": "{\n    products: "
            },
            {
              "kind": "Reference",
              "text": "Query",
              "canonicalReference": "@vue-storefront/magento-types!Query:interface"
            },
            {
              "kind": "Content",
              "text": "['products'];\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ProductDetailsQuery",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!ProductDetailsResponse:type",
          "docComment": "/**\n * Product details response type\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ProductDetailsResponse<T extends "
            },
            {
              "kind": "Reference",
              "text": "DeepPartial",
              "canonicalReference": "ts-essentials!DeepPartial:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ProductDetailsQuery",
              "canonicalReference": "@vue-storefront/magento-sdk!ProductDetailsQuery:type"
            },
            {
              "kind": "Content",
              "text": "> "
            },
            {
              "kind": "Content",
              "text": "= "
            },
            {
              "kind": "Reference",
              "text": "ProductDetailsQuery",
              "canonicalReference": "@vue-storefront/magento-sdk!ProductDetailsQuery:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "ApolloQueryResult",
              "canonicalReference": "@apollo/client/core!ApolloQueryResult:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ProductDetailsResponse",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 8,
            "endIndex": 10
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-sdk!productReview:function(1)",
          "docComment": "/**\n * Method to fetch product reviews\n *\n * @remarks\n *\n * This method sends a GET request to the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/productReview | productReview} endpoint of the Vue Storefront API Middleware. The default GraphQL query used by this method can be found {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/productReview | here}.\n *\n * @param params - Parameter object which can be used with this method. Refer to its type definition to learn about possible properties.\n *\n * @param options - Options that can be passed to additionally configure the request or customize the logic in a plugin.\n *\n * @typeParam Res - Customizable response interface to be used with custom queries.\n *\n * @returns Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/ProductReviewResponse | ProductReviewResponse}.\n *\n * @example\n *\n * Simple usage:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // fetch all products reviews (default pagination limit is 10)\n * const result = await sdk.magento.productReview({});\n * ```\n *\n * @example\n *\n * Fetching reviews for a specific product:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * const result = await sdk.magento.productReview({ filter: { sku: { eq: '24-MB01' } );\n * ```\n *\n * @example\n *\n * Creating a custom GraphQL query\n * ```ts\n * module.exports = {\n *   integrations: {\n *     magento: {\n *       customQueries: {\n *         'product-review-custom-query': ({ variables, metadata }) => ({\n *            variables,\n *            query: `\n *              query productReview($search: String = \"\", $filter: ProductAttributeFilterInput, $pageSize: Int = 10, $currentPage: Int = 1, $sort: ProductAttributeSortInput) {\n *                products(search: $search, filter: $filter, sort: $sort) {\n *                  items {\n *                    review_count\n *                    reviews(pageSize: $pageSize, currentPage: $currentPage) {\n *                      items {\n *                        ${metadata?.fields}\n *                      }\n *                    }\n *                  }\n *                }\n *              }\n *            `\n *         }),\n *       },\n *     }\n *   }\n * };\n * ```\n *\n * @example\n *\n * Using a custom GraphQL query to change the amount of fields returned by the query:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n * // reduce the amount of fields returned by the query, when compared to the default query\n * const customQuery = {\n *   productReview: 'product-review-custom-query',\n *   metadata: {\n *     fields: 'average_rating'\n *   }\n * };\n *\n * const result = await sdk.magento.productReview({}, { customQuery });\n *\n * // result.data.products.items[0].reviews.items[0] will only contain the average_rating field\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function productReview<RES extends "
            },
            {
              "kind": "Reference",
              "text": "ProductReviewResponse",
              "canonicalReference": "@vue-storefront/magento-sdk!ProductReviewResponse:type"
            },
            {
              "kind": "Content",
              "text": ">(params: "
            },
            {
              "kind": "Reference",
              "text": "GetProductSearchParams",
              "canonicalReference": "@vue-storefront/magento-types!GetProductSearchParams:type"
            },
            {
              "kind": "Content",
              "text": ", options?: "
            },
            {
              "kind": "Reference",
              "text": "MethodOptions",
              "canonicalReference": "@vue-storefront/magento-sdk!MethodOptions:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CustomQuery",
              "canonicalReference": "@vue-storefront/magento-sdk!CustomQuery:type"
            },
            {
              "kind": "Content",
              "text": "<'productReview'>>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<RES>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 10,
            "endIndex": 12
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "params",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "RES",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "productReview"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!ProductReviewQuery:type",
          "docComment": "/**\n * query type for the {@link productReview} method.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ProductReviewQuery = "
            },
            {
              "kind": "Content",
              "text": "{\n    products: "
            },
            {
              "kind": "Reference",
              "text": "Query",
              "canonicalReference": "@vue-storefront/magento-types!Query:interface"
            },
            {
              "kind": "Content",
              "text": "['products'];\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ProductReviewQuery",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-sdk!productReviewRatingsMetadata:function(1)",
          "docComment": "/**\n * Method to get the active ratings attributes and the values each rating can have.\n *\n * @remarks\n *\n * This method sends a GET request to the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/productReviewRatingsMetadata | productReviewRatingsMetadata} endpoint of the Vue Storefront API Middleware. The default GraphQL query used by this method can be found {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/productReviewRatingsMetadata | here}.\n *\n * @param options - Options that can be passed to additionally configure the request or customize the logic in a plugin.\n *\n * @typeParam Res - Customizable response interface to be used with custom queries.\n *\n * @returns Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/ProductReviewRatingsMetadataResponse | ProductReviewRatingsMetadataResponse}.\n *\n * @example\n *\n * Simple usage:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // fetch the active ratings attributes and the values each rating can have\n * const { data } = await sdk.magento.productReviewRatingsMetadata();\n *\n * data.productReviewRatingsMetadata.items; // array of review's attributes\n * data.productReviewRatingsMetadata.items[0].values; // array of possible values of the review's attributes\n * ```\n *\n * @example\n *\n * Creating a custom GraphQL query\n * ```ts\n * module.exports = {\n *   integrations: {\n *     magento: {\n *       customQueries: {\n *         'product-review-ratings-metadata-custom-query': ({ variables, metadata }) => ({\n *            variables,\n *            query: `\n *              query productReviewRatingsMetadata {\n *                productReviewRatingsMetadata {\n *                  items {\n *                    ${metadata.fields}\n *                  }\n *                }\n *              }\n *            `\n *         }),\n *       },\n *     }\n *   }\n * };\n * ```\n *\n * @example\n *\n * Using a custom GraphQL query to reduce the amount of data returned by the query\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n * // reduce the amount of fields returned by the query, when compared to the default query\n * const customQuery = {\n *   productReviewRatingsMetadata: 'product-review-ratings-metadata-custom-query',\n *   metadata: {\n *     fields: `\n *      name\n *      values {\n *        value\n *      }\n *     `\n *   }\n * };\n *\n * const { data } = await sdk.magento.productReviewRatingsMetadata({ customQuery });\n *\n * // data.productReviewRatingsMetadata.items[0] will contain only the fields specified in the custom query.\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function productReviewRatingsMetadata<RES extends "
            },
            {
              "kind": "Reference",
              "text": "ProductReviewRatingsMetadataResponse",
              "canonicalReference": "@vue-storefront/magento-sdk!ProductReviewRatingsMetadataResponse:type"
            },
            {
              "kind": "Content",
              "text": ">(options?: "
            },
            {
              "kind": "Reference",
              "text": "MethodOptions",
              "canonicalReference": "@vue-storefront/magento-sdk!MethodOptions:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CustomQuery",
              "canonicalReference": "@vue-storefront/magento-sdk!CustomQuery:type"
            },
            {
              "kind": "Content",
              "text": "<'productReviewRatingsMetadata'>>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<RES>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 8,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "RES",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "productReviewRatingsMetadata"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!ProductReviewRatingsMetadataQuery:type",
          "docComment": "/**\n * query type for the {@link productReviewRatingsMetadata} method.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ProductReviewRatingsMetadataQuery = "
            },
            {
              "kind": "Content",
              "text": "{\n    productReviewRatingsMetadata: "
            },
            {
              "kind": "Reference",
              "text": "Query",
              "canonicalReference": "@vue-storefront/magento-types!Query:interface"
            },
            {
              "kind": "Content",
              "text": "['productReviewRatingsMetadata'];\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ProductReviewRatingsMetadataQuery",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!ProductReviewRatingsMetadataResponse:type",
          "docComment": "/**\n * productReviewRatingsMetadata response type\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ProductReviewRatingsMetadataResponse<T extends "
            },
            {
              "kind": "Reference",
              "text": "DeepPartial",
              "canonicalReference": "ts-essentials!DeepPartial:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ProductReviewRatingsMetadataQuery",
              "canonicalReference": "@vue-storefront/magento-sdk!ProductReviewRatingsMetadataQuery:type"
            },
            {
              "kind": "Content",
              "text": "> "
            },
            {
              "kind": "Content",
              "text": "= "
            },
            {
              "kind": "Reference",
              "text": "ProductReviewRatingsMetadataQuery",
              "canonicalReference": "@vue-storefront/magento-sdk!ProductReviewRatingsMetadataQuery:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "ApolloQueryResult",
              "canonicalReference": "@apollo/client/core!ApolloQueryResult:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ProductReviewRatingsMetadataResponse",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 8,
            "endIndex": 10
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!ProductReviewResponse:type",
          "docComment": "/**\n * productReview response type\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ProductReviewResponse<T extends "
            },
            {
              "kind": "Reference",
              "text": "DeepPartial",
              "canonicalReference": "ts-essentials!DeepPartial:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ProductReviewQuery",
              "canonicalReference": "@vue-storefront/magento-sdk!ProductReviewQuery:type"
            },
            {
              "kind": "Content",
              "text": "> "
            },
            {
              "kind": "Content",
              "text": "= "
            },
            {
              "kind": "Reference",
              "text": "ProductReviewQuery",
              "canonicalReference": "@vue-storefront/magento-sdk!ProductReviewQuery:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "ApolloQueryResult",
              "canonicalReference": "@apollo/client/core!ApolloQueryResult:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ProductReviewResponse",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 8,
            "endIndex": 10
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-sdk!products:function(1)",
          "docComment": "/**\n * Method to get products\n *\n * @remarks\n *\n * This method sends a GET request to the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/products | products} endpoint of the Vue Storefront API Middleware. The default GraphQL query used by this method can be found {@link @vue-storefront/magento-types#productsListQuery | here}.\n *\n * @param params - Parameter object which can be used with this method. Refer to its type definition to learn about possible properties.\n *\n * @param options - Options that can be passed to additionally configure the request or customize the logic in a plugin.\n *\n * @typeParam Res - Customizable response interface to be used with custom queries.\n *\n * @returns Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/ProductsListResponse | ProductsListResponse}.\n *\n * @example\n *\n * Simple usage without filters, sorting or pagination:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // fetch list of products with default parameters\n * const details = await sdk.magento.products({});\n * ```\n *\n * @example\n *\n * Usage with filters, sorting and pagination:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // make a request to fetch list of products with custom parameters\n * const details = await sdk.magento.products({\n *  pageSize: 20,\n *  currentPage: 1,\n *  filter: {\n *    sku: {\n *      eq: PRODUCT_SKU\n *    }\n *  }\n * });\n * ```\n *\n * @example\n *\n * Creating a custom GraphQL query for fetching products.\n * ```ts\n * module.exports = {\n *   integrations: {\n *     magento: {\n *       customQueries: {\n *         'products-custom-query': ({ variables, metadata }) => ({\n *            variables,\n *            query: `\n *              query productsList(\n *                $search: String = \"\",\n *                $filter: ProductAttributeFilterInput,\n *                $pageSize: Int = 10,\n *                $currentPage: Int = 1,\n *                $sort: ProductAttributeSortInput\n *              ) {\n *                products(search: $search, filter: $filter, sort: $sort, pageSize: $pageSize, currentPage: $currentPage) {\n *                  ${metadata.fields}\n *                }\n *              }\n *            `\n *         }),\n *       },\n *     }\n *   }\n * };\n * ```\n *\n * @example\n *\n * Using a custom GraphQL query to fetch products list.\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n * const customQuery = {\n *  products: 'products-custom-query',\n *    metadata: {\n *      fields: 'items { sku name }'\n *    }\n * };\n *\n * const products = await sdk.magento.products({\n *  filter: {\n *    sku: {\n *      eq: 'some-sku' // optional SKU filter\n *    }\n *  }\n * }, { customQuery });\n *\n * // Products will contain only the fields specified in the custom query.\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function products<RES extends "
            },
            {
              "kind": "Reference",
              "text": "ProductsListResponse",
              "canonicalReference": "@vue-storefront/magento-sdk!ProductsListResponse:type"
            },
            {
              "kind": "Content",
              "text": ">(params: "
            },
            {
              "kind": "Reference",
              "text": "GetProductSearchParams",
              "canonicalReference": "@vue-storefront/magento-types!GetProductSearchParams:type"
            },
            {
              "kind": "Content",
              "text": ", options?: "
            },
            {
              "kind": "Reference",
              "text": "MethodOptions",
              "canonicalReference": "@vue-storefront/magento-sdk!MethodOptions:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CustomQuery",
              "canonicalReference": "@vue-storefront/magento-sdk!CustomQuery:type"
            },
            {
              "kind": "Content",
              "text": "<'products'>>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<RES>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 10,
            "endIndex": 12
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "params",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "RES",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "products"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!ProductsListQuery:type",
          "docComment": "/**\n * query type for the {@link products} method.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ProductsListQuery = "
            },
            {
              "kind": "Content",
              "text": "{\n    products: "
            },
            {
              "kind": "Reference",
              "text": "Query",
              "canonicalReference": "@vue-storefront/magento-types!Query:interface"
            },
            {
              "kind": "Content",
              "text": "['products'];\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ProductsListQuery",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!ProductsListResponse:type",
          "docComment": "/**\n * Products list response type\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ProductsListResponse<T extends "
            },
            {
              "kind": "Reference",
              "text": "DeepPartial",
              "canonicalReference": "ts-essentials!DeepPartial:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ProductsListQuery",
              "canonicalReference": "@vue-storefront/magento-sdk!ProductsListQuery:type"
            },
            {
              "kind": "Content",
              "text": "> "
            },
            {
              "kind": "Content",
              "text": "= "
            },
            {
              "kind": "Reference",
              "text": "ProductsListQuery",
              "canonicalReference": "@vue-storefront/magento-sdk!ProductsListQuery:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "ApolloQueryResult",
              "canonicalReference": "@apollo/client/core!ApolloQueryResult:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ProductsListResponse",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 8,
            "endIndex": 10
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-sdk!relatedProducts:function(1)",
          "docComment": "/**\n * Method to get related products\n *\n * @remarks\n *\n * This method sends a GET request to the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/relatedProduct | relatedProduct} endpoint of the Vue Storefront API Middleware. The default GraphQL query used by this method can be found {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/relatedProduct | here}.\n *\n * @param params - Parameter object which can be used with this method. Refer to its type definition to learn about possible properties.\n *\n * @param options - Options that can be passed to additionally configure the request or customize the logic in a plugin.\n *\n * @typeParam Res - Customizable response interface to be used with custom queries.\n *\n * @returns Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/RelatedProductsResponse | RelatedProductsResponse}.\n *\n * @example\n *\n * Simple usage without filters, sorting or pagination:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // Fetch list of products filtered by the SKU\n * // Only the parent product is affected by filters\n * const products = await sdk.magento.relatedProduct({\n *  pageSize: 1,\n *  filter: {\n *    sku: {\n *      eq: PRODUCT_SKU\n *    }\n *  }\n * });\n * ```\n *\n * @example\n *\n * Usage with filters, sorting and pagination:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // make a request to fetch list of products with custom parameters\n * const products = await sdk.magento.relatedProduct({\n *  pageSize: 20,\n *  currentPage: 1,\n *  filter: {\n *    sku: {\n *      eq: PRODUCT_SKU\n *    }\n *  }\n * });\n * ```\n *\n * @example\n *\n * Creating a custom GraphQL query getting related products.\n * ```ts\n * module.exports = {\n *   integrations: {\n *     magento: {\n *       customQueries: {\n *         'related-product-custom-query': ({ variables, metadata }) => ({\n *            variables,\n *            query: `\n *              query relatedProduct(\n *                $search: String = \"\",\n *                $filter: ProductAttributeFilterInput,\n *                $pageSize: Int = 10,\n *                $currentPage: Int = 1,\n *                $sort: ProductAttributeSortInput\n *              ) {\n *                products(search: $search, filter: $filter, sort: $sort, pageSize: $pageSize, currentPage: $currentPage) {\n *                  ${metadata.fields}\n *                }\n *              }\n *            `\n *         }),\n *       },\n *     }\n *   }\n * };\n * ```\n *\n * @example\n *\n * Using a custom GraphQL query to fetch related products.\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n * const customQuery = {\n *  relatedProduct: 'related-product-custom-query',\n *    metadata: {\n *      fields: 'items { related_products { uid __typename } }'\n *    }\n * };\n *\n * const result = await sdk.magento.relatedProduct({\n *  filter: {\n *    sku: {\n *      eq: 'some-sku' // optional SKU filter\n *    }\n *  }\n * }, { customQuery });\n *\n * // Result will contain only the fields specified in the custom query.\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function relatedProducts<RES extends "
            },
            {
              "kind": "Reference",
              "text": "RelatedProductsResponse",
              "canonicalReference": "@vue-storefront/magento-sdk!RelatedProductsResponse:type"
            },
            {
              "kind": "Content",
              "text": ">(params: "
            },
            {
              "kind": "Reference",
              "text": "GetProductSearchParams",
              "canonicalReference": "@vue-storefront/magento-types!GetProductSearchParams:type"
            },
            {
              "kind": "Content",
              "text": ", options?: "
            },
            {
              "kind": "Reference",
              "text": "MethodOptions",
              "canonicalReference": "@vue-storefront/magento-sdk!MethodOptions:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CustomQuery",
              "canonicalReference": "@vue-storefront/magento-sdk!CustomQuery:type"
            },
            {
              "kind": "Content",
              "text": "<'relatedProducts'>>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<RES>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 10,
            "endIndex": 12
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "params",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "RES",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "relatedProducts"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!RelatedProductsQuery:type",
          "docComment": "/**\n * query type for the {@link relatedProducts} method.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type RelatedProductsQuery = "
            },
            {
              "kind": "Content",
              "text": "{\n    products: "
            },
            {
              "kind": "Reference",
              "text": "Query",
              "canonicalReference": "@vue-storefront/magento-types!Query:interface"
            },
            {
              "kind": "Content",
              "text": "['products'];\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "RelatedProductsQuery",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!RelatedProductsResponse:type",
          "docComment": "/**\n * Related product response\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type RelatedProductsResponse<T extends "
            },
            {
              "kind": "Reference",
              "text": "DeepPartial",
              "canonicalReference": "ts-essentials!DeepPartial:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "RelatedProductsQuery",
              "canonicalReference": "@vue-storefront/magento-sdk!RelatedProductsQuery:type"
            },
            {
              "kind": "Content",
              "text": "> "
            },
            {
              "kind": "Content",
              "text": "= "
            },
            {
              "kind": "Reference",
              "text": "RelatedProductsQuery",
              "canonicalReference": "@vue-storefront/magento-sdk!RelatedProductsQuery:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "ApolloQueryResult",
              "canonicalReference": "@apollo/client/core!ApolloQueryResult:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "RelatedProductsResponse",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 8,
            "endIndex": 10
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-sdk!removeCouponFromCart:function(1)",
          "docComment": "/**\n * Method to remove coupon from cart\n *\n * @remarks\n *\n * This method sends a POST request to the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/removeCouponFromCart | removeCouponFromCart} endpoint of the Vue Storefront API Middleware. The default GraphQL query used by this method can be found {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/removeCouponFromCart | here}.\n *\n * @param params - Parameter object which can be used with this method. Refer to its type definition to learn about possible properties.\n *\n * @param options - Options that can be passed to additionally configure the request or customize the logic in a plugin.\n *\n * @typeParam Res - Customizable response interface to be used with custom queries.\n *\n * @returns Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/RemoveCouponFromCartResponse | RemoveCouponFromCartResponse}.\n *\n * @example\n *\n * Simple usage:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // assuming that the coupon code is already applied to the cart\n * const params = {\n *  cart_id: 'test-cart-id',\n * };\n *\n * // Remove coupon from cart\n * const result = await sdk.magento.removeCouponFromCart(params);\n * ```\n *\n * @example\n *\n * Creating a custom GraphQL query for getting cart\n * ```ts\n * module.exports = {\n *   integrations: {\n *     magento: {\n *       customQueries: {\n *         'remove-coupon-from-cart-custom-query': ({ variables, metadata }) => ({\n *            variables,\n *            query: `\n *              mutation removeCouponFromCart($input: RemoveCouponFromCartInput) {\n *                removeCouponFromCart(input: $input) {\n *                  ${metadata.fields}\n *                }\n *              }`\n *         }),\n *       },\n *     }\n *   }\n * };\n * ```\n *\n * @example\n *\n * Using a custom GraphQL query to fetch reduced amount of data\n * ```ts\n *  import { sdk } from '~/sdk.config.ts';\n *\n *  const customQuery = {\n *    removeCouponFromCart: 'remove-coupon-from-cart-custom-query',\n *      metadata: {\n *        fields: 'cart { applied_coupons { code } }'\n *      }\n *    };\n *\n *  // The only required parameter is cart_id\n *  const params = {\n *    cart_id: 'test-cart-id',\n *  };\n *\n *  // The result will contain only fields configured in the custom query\n *  const result = await sdk.magento.removeCouponFromCart(params, { customQuery });\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function removeCouponFromCart<RES extends "
            },
            {
              "kind": "Reference",
              "text": "RemoveCouponFromCartResponse",
              "canonicalReference": "@vue-storefront/magento-sdk!RemoveCouponFromCartResponse:type"
            },
            {
              "kind": "Content",
              "text": ">(params: "
            },
            {
              "kind": "Reference",
              "text": "RemoveCouponFromCartInput",
              "canonicalReference": "@vue-storefront/magento-types!RemoveCouponFromCartInput:interface"
            },
            {
              "kind": "Content",
              "text": ", options?: "
            },
            {
              "kind": "Reference",
              "text": "MethodOptions",
              "canonicalReference": "@vue-storefront/magento-sdk!MethodOptions:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CustomQuery",
              "canonicalReference": "@vue-storefront/magento-sdk!CustomQuery:type"
            },
            {
              "kind": "Content",
              "text": "<'removeCouponFromCart'>>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<RES>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 10,
            "endIndex": 12
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "params",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "RES",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "removeCouponFromCart"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!RemoveCouponFromCartMutation:type",
          "docComment": "/**\n * mutation type for the {@link removeCouponFromCart} method.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type RemoveCouponFromCartMutation = "
            },
            {
              "kind": "Content",
              "text": "{\n    removeCouponFromCart: "
            },
            {
              "kind": "Reference",
              "text": "Mutation",
              "canonicalReference": "@vue-storefront/magento-types!Mutation:interface"
            },
            {
              "kind": "Content",
              "text": "['removeCouponFromCart'];\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "RemoveCouponFromCartMutation",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!RemoveCouponFromCartResponse:type",
          "docComment": "/**\n * Category list response type\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type RemoveCouponFromCartResponse<T extends "
            },
            {
              "kind": "Reference",
              "text": "DeepPartial",
              "canonicalReference": "ts-essentials!DeepPartial:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "RemoveCouponFromCartMutation",
              "canonicalReference": "@vue-storefront/magento-sdk!RemoveCouponFromCartMutation:type"
            },
            {
              "kind": "Content",
              "text": "> "
            },
            {
              "kind": "Content",
              "text": "= "
            },
            {
              "kind": "Reference",
              "text": "RemoveCouponFromCartMutation",
              "canonicalReference": "@vue-storefront/magento-sdk!RemoveCouponFromCartMutation:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "FetchResult",
              "canonicalReference": "@apollo/client/link/core!FetchResult:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "RemoveCouponFromCartResponse",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 8,
            "endIndex": 10
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-sdk!removeItemFromCart:function(1)",
          "docComment": "/**\n * Method to remove item from cart.\n *\n * @remarks\n *\n * This method sends a POST request to the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/removeItemFromCart | removeItemFromCart} endpoint of the Vue Storefront API Middleware. The default GraphQL query used by this method can be found {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/removeItemFromCart | here}.\n *\n * @param params - Parameter object which can be used with this method. Refer to its type definition to learn about possible properties.\n *\n * @param options - Options that can be passed to additionally configure the request or customize the logic in a plugin.\n *\n * @typeParam Res - Customizable response interface to be used with custom queries.\n *\n * @returns Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/RemoveItemFromCartResponse | RemoveItemFromCartResponse}.\n *\n * @example\n *\n * Simple usage:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // Assumes that the cart has an item with the UID 'MY='.\n * // Configure method parameters\n * const params = { cart_id: TEST_CART_ID, cart_item_uid: 'MY=' }\n *\n * const result = await sdk.magento.removeItemFromCart(params);\n *\n * // result will contain the updated cart.\n * // you can look at the cart items to see that the item with the UID 'MY=' has been removed.\n * const hasItem = result.data?.removeItemFromCart!.cart!.items!.find(item => item!.uid === 'MY=');\n * ```\n *\n * @example\n *\n * Creating a custom GraphQL query for manipulating the cart response data.\n * ```ts\n * module.exports = {\n *   integrations: {\n *     magento: {\n *       customQueries: {\n *         'remove-item-from-cart-custom-query': ({ variables, metadata }) => ({\n *            variables,\n *            query: `\n *              mutation removeItemFromCart($input: RemoveItemFromCartInput) {\n *                removeItemFromCart(input: $input) {\n *                  cart {\n *                    ${metadata.fields}\n *                  }\n *                }\n *              }`\n *          }),\n *       },\n *     }\n *   }\n * };\n * ```\n *\n * @example\n *\n * Using a custom GraphQL query created in the previous example.\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n * // reduce the amount of fields returned by the query, when compared to the default query\n * // this will reduce the amount of data transferred from the server to the client.\n *\n * // All we need is the cart ID and the email address of the customer.\n * const customQuery = {\n *   cart: 'remove-item-from-cart-custom-query',\n *   metadata: {\n *     fields: 'id email'\n *   }\n * };\n *\n * // Assumes that the cart has an item with the UID 'MY='.\n * // Uses params from the previous example and the custom query.\n * const result = await sdk.magento.removeItemFromCart(params, { customQuery });\n *\n * // result will contain only the fields specified in the custom query.\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function removeItemFromCart<RES extends "
            },
            {
              "kind": "Reference",
              "text": "RemoveItemFromCartResponse",
              "canonicalReference": "@vue-storefront/magento-sdk!RemoveItemFromCartResponse:type"
            },
            {
              "kind": "Content",
              "text": ">(params: "
            },
            {
              "kind": "Reference",
              "text": "RemoveItemFromCartInput",
              "canonicalReference": "@vue-storefront/magento-types!RemoveItemFromCartInput:interface"
            },
            {
              "kind": "Content",
              "text": ", options?: "
            },
            {
              "kind": "Reference",
              "text": "MethodOptions",
              "canonicalReference": "@vue-storefront/magento-sdk!MethodOptions:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CustomQuery",
              "canonicalReference": "@vue-storefront/magento-sdk!CustomQuery:type"
            },
            {
              "kind": "Content",
              "text": "<'removeItemFromCart'>>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<RES>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 10,
            "endIndex": 12
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "params",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "RES",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "removeItemFromCart"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!RemoveItemFromCartMutation:type",
          "docComment": "/**\n * mutation type for the {@link removeItemFromCart} method.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type RemoveItemFromCartMutation = "
            },
            {
              "kind": "Content",
              "text": "{\n    removeItemFromCart: "
            },
            {
              "kind": "Reference",
              "text": "Mutation",
              "canonicalReference": "@vue-storefront/magento-types!Mutation:interface"
            },
            {
              "kind": "Content",
              "text": "['removeItemFromCart'];\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "RemoveItemFromCartMutation",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!RemoveItemFromCartResponse:type",
          "docComment": "/**\n * removeItemFromCart response type\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type RemoveItemFromCartResponse<T extends "
            },
            {
              "kind": "Reference",
              "text": "DeepPartial",
              "canonicalReference": "ts-essentials!DeepPartial:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "RemoveItemFromCartMutation",
              "canonicalReference": "@vue-storefront/magento-sdk!RemoveItemFromCartMutation:type"
            },
            {
              "kind": "Content",
              "text": "> "
            },
            {
              "kind": "Content",
              "text": "= "
            },
            {
              "kind": "Reference",
              "text": "RemoveItemFromCartMutation",
              "canonicalReference": "@vue-storefront/magento-sdk!RemoveItemFromCartMutation:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "FetchResult",
              "canonicalReference": "@apollo/client/link/core!FetchResult:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "RemoveItemFromCartResponse",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 8,
            "endIndex": 10
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-sdk!removeProductsFromWishlist:function(1)",
          "docComment": "/**\n * Method to remove products from wishlist Customer must be logged in to perform this operation. (token in headers)\n *\n * @remarks\n *\n * This method sends a POST request to the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/removeProductsFromWishlist | removeProductsFromWishlist} endpoint of the Vue Storefront API Middleware. The default GraphQL query used by this method can be found {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/removeProductsFromWishlist | here}.\n *\n * @param params - Parameter object which can be used with this method. Refer to its type definition to learn about possible properties.\n *\n * @param options - Options that can be passed to additionally configure the request or customize the logic in a plugin.\n *\n * @typeParam Res - Customizable response interface to be used with custom queries.\n *\n * @returns Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/RemoveProductsFromWishlistResponse | RemoveProductsFromWishlistResponse}.\n *\n * @example\n *\n * Simple usage:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // remove\n * const result = await sdk.magento.removeProductsFromWishlist({\n *  id: 'some-wishlist-id',\n *  items: ['some-product-id']\n * });\n * ```\n *\n * @example\n *\n * Creating a custom GraphQL query\n * ```ts\n * module.exports = {\n *   integrations: {\n *     magento: {\n *       customQueries: {\n *         'remove-products-from-wishlist-custom-query': ({ variables, metadata }) => ({\n *            variables,\n *            query: `\n *              mutation removeProductsFromWishlist($id: ID!, $items: [ID!]!) {\n *                removeProductsFromWishlist(wishlistId: $id, wishlistItemsIds: $items) {\n *                  wishlist {\n *                    ${metadata.fields}\n *                  }\n *                }\n *              }\n *            `\n *         }),\n *       },\n *     }\n *   }\n * };\n * ```\n *\n * @example\n *\n * Using a custom GraphQL query to reduce the amount of data returned by the API\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n * // reduce the amount of fields returned by the query, when compared to the default query\n * const customQuery = {\n *   removeProductsFromWishlist: 'remove-products-from-wishlist-custom-query',\n *   metadata: {\n *     fields: 'id'\n *   }\n * };\n *\n * const result = await sdk.magento.removeProductsFromWishlist({\n *  id: 'some-wishlist-id',\n *  items: ['item-id-1', 'item-id-2']\n * }, { customQuery });\n *\n * // result should be narrowed to only contain the `id` field\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function removeProductsFromWishlist<RES extends "
            },
            {
              "kind": "Reference",
              "text": "RemoveProductsFromWishlistResponse",
              "canonicalReference": "@vue-storefront/magento-sdk!RemoveProductsFromWishlistResponse:type"
            },
            {
              "kind": "Content",
              "text": ">(params: "
            },
            {
              "kind": "Reference",
              "text": "RemoveProductsFromWishlistMutationVariables",
              "canonicalReference": "@vue-storefront/magento-types!RemoveProductsFromWishlistMutationVariables:type"
            },
            {
              "kind": "Content",
              "text": ", options?: "
            },
            {
              "kind": "Reference",
              "text": "MethodOptions",
              "canonicalReference": "@vue-storefront/magento-sdk!MethodOptions:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CustomQuery",
              "canonicalReference": "@vue-storefront/magento-sdk!CustomQuery:type"
            },
            {
              "kind": "Content",
              "text": "<'removeProductsFromWishlist'>>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<RES>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 10,
            "endIndex": 12
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "params",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "RES",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "removeProductsFromWishlist"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!RemoveProductsFromWishlistMutation:type",
          "docComment": "/**\n * mutation type for the {@link removeProductsFromWishlist} method.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type RemoveProductsFromWishlistMutation = "
            },
            {
              "kind": "Content",
              "text": "{\n    removeProductsFromWishlist: "
            },
            {
              "kind": "Reference",
              "text": "Mutation",
              "canonicalReference": "@vue-storefront/magento-types!Mutation:interface"
            },
            {
              "kind": "Content",
              "text": "['removeProductsFromWishlist'];\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "RemoveProductsFromWishlistMutation",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!RemoveProductsFromWishlistResponse:type",
          "docComment": "/**\n * removeProductsFromWishlist response type\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type RemoveProductsFromWishlistResponse<T extends "
            },
            {
              "kind": "Reference",
              "text": "DeepPartial",
              "canonicalReference": "ts-essentials!DeepPartial:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "RemoveProductsFromWishlistMutation",
              "canonicalReference": "@vue-storefront/magento-sdk!RemoveProductsFromWishlistMutation:type"
            },
            {
              "kind": "Content",
              "text": "> "
            },
            {
              "kind": "Content",
              "text": "= "
            },
            {
              "kind": "Reference",
              "text": "RemoveProductsFromWishlistMutation",
              "canonicalReference": "@vue-storefront/magento-sdk!RemoveProductsFromWishlistMutation:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "FetchResult",
              "canonicalReference": "@apollo/client/link/core!FetchResult:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "RemoveProductsFromWishlistResponse",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 8,
            "endIndex": 10
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-sdk!requestPasswordResetEmail:function(1)",
          "docComment": "/**\n * Method to request password reset email\n *\n * @remarks\n *\n * This method sends a POST request to the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/requestPasswordResetEmail | requestPasswordResetEmail} endpoint of the Vue Storefront API Middleware. The default GraphQL query used by this method can be found {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/requestPasswordResetEmail | here}.\n *\n * @param params - Parameter object which can be used with this method. Refer to its type definition to learn about possible properties.\n *\n * @param options - Options that can be passed to additionally configure the request or customize the logic in a plugin.\n *\n * @typeParam Res - Customizable response interface to be used with custom queries.\n *\n * @returns Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/RequestPasswordResetEmailResponse | RequestPasswordResetEmailResponse}.\n *\n * @example\n *\n * Simple usage:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // trigger sending of password reset email\n * const result = await sdk.magento.requestPasswordResetEmail({ email: 'john.doe@gmail.com'});\n *\n * // result.data.requestPasswordResetEmail contains the boolean response from the API\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function requestPasswordResetEmail<RES extends "
            },
            {
              "kind": "Reference",
              "text": "RequestPasswordResetEmailResponse",
              "canonicalReference": "@vue-storefront/magento-sdk!RequestPasswordResetEmailResponse:type"
            },
            {
              "kind": "Content",
              "text": ">(params: "
            },
            {
              "kind": "Reference",
              "text": "RequestPasswordResetEmailInput",
              "canonicalReference": "@vue-storefront/magento-sdk!RequestPasswordResetEmailInput:type"
            },
            {
              "kind": "Content",
              "text": ", options?: "
            },
            {
              "kind": "Reference",
              "text": "MethodOptions",
              "canonicalReference": "@vue-storefront/magento-sdk!MethodOptions:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CustomQuery",
              "canonicalReference": "@vue-storefront/magento-sdk!CustomQuery:type"
            },
            {
              "kind": "Content",
              "text": "<'requestPasswordResetEmail'>>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<RES>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 10,
            "endIndex": 12
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "params",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "RES",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "requestPasswordResetEmail"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!RequestPasswordResetEmailInput:type",
          "docComment": "/**\n * Parameter object for the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/requestPasswordResetEmail | requestPasswordResetEmail} method.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type RequestPasswordResetEmailInput = "
            },
            {
              "kind": "Content",
              "text": "{\n    email: string;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "RequestPasswordResetEmailInput",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!RequestPasswordResetEmailMutation:type",
          "docComment": "/**\n * mutation type for the {@link requestPasswordResetEmail} method.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type RequestPasswordResetEmailMutation = "
            },
            {
              "kind": "Content",
              "text": "{\n    requestPasswordResetEmail: "
            },
            {
              "kind": "Reference",
              "text": "Mutation",
              "canonicalReference": "@vue-storefront/magento-types!Mutation:interface"
            },
            {
              "kind": "Content",
              "text": "['requestPasswordResetEmail'];\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "RequestPasswordResetEmailMutation",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!RequestPasswordResetEmailResponse:type",
          "docComment": "/**\n * requestPasswordResetEmail response type\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type RequestPasswordResetEmailResponse<T extends "
            },
            {
              "kind": "Reference",
              "text": "DeepPartial",
              "canonicalReference": "ts-essentials!DeepPartial:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "RequestPasswordResetEmailMutation",
              "canonicalReference": "@vue-storefront/magento-sdk!RequestPasswordResetEmailMutation:type"
            },
            {
              "kind": "Content",
              "text": "> "
            },
            {
              "kind": "Content",
              "text": "= "
            },
            {
              "kind": "Reference",
              "text": "RequestPasswordResetEmailMutation",
              "canonicalReference": "@vue-storefront/magento-sdk!RequestPasswordResetEmailMutation:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "FetchResult",
              "canonicalReference": "@apollo/client/link/core!FetchResult:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "RequestPasswordResetEmailResponse",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 8,
            "endIndex": 10
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-sdk!resetPassword:function(1)",
          "docComment": "/**\n * Method to reset customer password.\n *\n * @remarks\n *\n * This method sends a POST request to the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/resetPassword | resetPassword} endpoint of the Vue Storefront API Middleware. The default GraphQL query used by this method can be found {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/resetPassword | here}.\n *\n * @param params - Parameter object which can be used with this method. Refer to its type definition to learn about possible properties.\n *\n * @param options - Options that can be passed to additionally configure the request or customize the logic in a plugin.\n *\n * @typeParam Res - Customizable response interface to be used with custom queries.\n *\n * @returns Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/ResetPasswordResponse | ResetPasswordResponse}.\n *\n * @example\n *\n * Simple usage:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // fetch resetPassword\n * const await sdk.magento.resetPassword({\n *   email: 'customer.email@gmail.com'\n *   newPassword: 'newPassword',\n *   resetPasswordToken: 'resetPasswordToken' // token obtained from email {@link @vue-storefront/magento-sdk#requestPasswordResetEmail}\n * });\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function resetPassword<RES extends "
            },
            {
              "kind": "Reference",
              "text": "ResetPasswordResponse",
              "canonicalReference": "@vue-storefront/magento-sdk!ResetPasswordResponse:type"
            },
            {
              "kind": "Content",
              "text": ">(params: "
            },
            {
              "kind": "Reference",
              "text": "MutationResetPasswordArgs",
              "canonicalReference": "@vue-storefront/magento-types!MutationResetPasswordArgs:interface"
            },
            {
              "kind": "Content",
              "text": ", options?: "
            },
            {
              "kind": "Reference",
              "text": "MethodBaseOptions",
              "canonicalReference": "@vue-storefront/magento-sdk!MethodBaseOptions:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<RES>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "params",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "RES",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "resetPassword"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!ResetPasswordMutation:type",
          "docComment": "/**\n * mutation type for the {@link resetPassword} method.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ResetPasswordMutation = "
            },
            {
              "kind": "Content",
              "text": "{\n    resetPassword: "
            },
            {
              "kind": "Reference",
              "text": "Mutation",
              "canonicalReference": "@vue-storefront/magento-types!Mutation:interface"
            },
            {
              "kind": "Content",
              "text": "['resetPassword'];\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ResetPasswordMutation",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!ResetPasswordResponse:type",
          "docComment": "/**\n * resetPassword response type\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ResetPasswordResponse<T extends "
            },
            {
              "kind": "Reference",
              "text": "DeepPartial",
              "canonicalReference": "ts-essentials!DeepPartial:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ResetPasswordMutation",
              "canonicalReference": "@vue-storefront/magento-sdk!ResetPasswordMutation:type"
            },
            {
              "kind": "Content",
              "text": "> "
            },
            {
              "kind": "Content",
              "text": "= "
            },
            {
              "kind": "Reference",
              "text": "ResetPasswordMutation",
              "canonicalReference": "@vue-storefront/magento-sdk!ResetPasswordMutation:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "FetchResult",
              "canonicalReference": "@apollo/client/link/core!FetchResult:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ResetPasswordResponse",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 8,
            "endIndex": 10
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-sdk!reviews:function(1)",
          "docComment": "/**\n * Method to fetch customer reviews\n *\n * @remarks\n *\n * This method sends a GET request to the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/reviews | reviews} endpoint of the Vue Storefront API Middleware. The default GraphQL query used by this method can be found {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/reviews | here}.\n *\n * @param params - Parameter object which can be used with this method. Refer to its type definition to learn about possible properties.\n *\n * @param options - Options that can be passed to additionally configure the request or customize the logic in a plugin.\n *\n * @typeParam Res - Customizable response interface to be used with custom queries.\n *\n * @returns Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/reviewsResponse | reviewsResponse}.\n *\n * @example\n *\n * Simple usage:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // fetch reviews, customer must be logged in\n * const result = await sdk.magento.reviews();\n *\n * // log all reviews\n * result?.data?.customer?.reviews?.items.forEach(review => console.log(review));\n * ```\n *\n * @example\n *\n * Creating a custom GraphQL query\n * ```ts\n * module.exports = {\n *   integrations: {\n *     magento: {\n *       customQueries: {\n *         'customer-product-review-custom-query': ({ variables, metadata }) => ({\n *            variables,\n *            query: `\n *              query reviews($pageSize: Int = 10, $currentPage: Int = 1) {\n *                customer {\n *                  reviews(pageSize: $pageSize, currentPage: $currentPage) {\n *                    ${metadata?.fields}\n *                  }\n *                }\n *              }\n *            `\n *         }),\n *       },\n *     }\n *   }\n * };\n * ```\n *\n * @example\n *\n * Using a custom GraphQL query to reduce the amount of fields returned by the query\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n * // reduce the amount of fields returned by the query, when compared to the default query\n * // fetch only text\n *\n * const customQuery = {\n *   reviews: 'customer-product-review-custom-query',\n *   metadata: {\n *     fields: 'items { text }'\n *   }\n * };\n *\n * const result = await sdk.magento.reviews({}, { customQuery });\n *\n * // result will only contain the text of the reviews\n * result?.data?.customer?.reviews?.items.forEach(review => console.log(review.text));\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function reviews<RES extends "
            },
            {
              "kind": "Reference",
              "text": "ReviewsResponse",
              "canonicalReference": "@vue-storefront/magento-sdk!ReviewsResponse:type"
            },
            {
              "kind": "Content",
              "text": ">(params?: "
            },
            {
              "kind": "Reference",
              "text": "CustomerProductReviewParams",
              "canonicalReference": "@vue-storefront/magento-types!CustomerProductReviewParams:type"
            },
            {
              "kind": "Content",
              "text": ", options?: "
            },
            {
              "kind": "Reference",
              "text": "MethodOptions",
              "canonicalReference": "@vue-storefront/magento-sdk!MethodOptions:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CustomQuery",
              "canonicalReference": "@vue-storefront/magento-sdk!CustomQuery:type"
            },
            {
              "kind": "Content",
              "text": "<'reviews'>>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<RES>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 10,
            "endIndex": 12
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "params",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "RES",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "reviews"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!ReviewsResponse:type",
          "docComment": "/**\n * reviews response type\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ReviewsResponse<T extends "
            },
            {
              "kind": "Reference",
              "text": "DeepPartial",
              "canonicalReference": "ts-essentials!DeepPartial:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CustomerProductReviewQuery",
              "canonicalReference": "@vue-storefront/magento-sdk!CustomerProductReviewQuery:type"
            },
            {
              "kind": "Content",
              "text": "> "
            },
            {
              "kind": "Content",
              "text": "= "
            },
            {
              "kind": "Reference",
              "text": "CustomerProductReviewQuery",
              "canonicalReference": "@vue-storefront/magento-sdk!CustomerProductReviewQuery:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "ApolloQueryResult",
              "canonicalReference": "@apollo/client/core!ApolloQueryResult:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ReviewsResponse",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 8,
            "endIndex": 10
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-sdk!revokeCustomerToken:function(1)",
          "docComment": "/**\n * Method to revoke customer token. It is used to log out the current customer.\n *\n * @remarks\n *\n * This method sends a POST request to the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/revokeCustomerToken | revokeCustomerToken} endpoint of the Vue Storefront API Middleware. The default GraphQL query used by this method can be found {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/revokeCustomerToken | here}.\n *\n * @param options - Options that can be passed to additionally configure the request or customize the logic in a plugin.\n *\n * @typeParam Res - Customizable response interface to be used with custom queries.\n *\n * @returns Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/RevokeCustomerTokenResponse | RevokeCustomerTokenResponse}.\n *\n * @example\n *\n * Simple usage if the customer is logged in and the token is valid:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // token will be invalidated and the customer will be logged out\n * await sdk.magento.revokeCustomerToken();\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function revokeCustomerToken<RES extends "
            },
            {
              "kind": "Reference",
              "text": "RevokeCustomerTokenResponse",
              "canonicalReference": "@vue-storefront/magento-sdk!RevokeCustomerTokenResponse:type"
            },
            {
              "kind": "Content",
              "text": ">(options?: "
            },
            {
              "kind": "Reference",
              "text": "MethodBaseOptions",
              "canonicalReference": "@vue-storefront/magento-sdk!MethodBaseOptions:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<RES>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "RES",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "revokeCustomerToken"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!RevokeCustomerTokenMutation:type",
          "docComment": "/**\n * mutation type for the {@link revokeCustomerToken} method.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type RevokeCustomerTokenMutation = "
            },
            {
              "kind": "Content",
              "text": "{\n    revokeCustomerToken: "
            },
            {
              "kind": "Reference",
              "text": "Mutation",
              "canonicalReference": "@vue-storefront/magento-types!Mutation:interface"
            },
            {
              "kind": "Content",
              "text": "['revokeCustomerToken'];\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "RevokeCustomerTokenMutation",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!RevokeCustomerTokenResponse:type",
          "docComment": "/**\n * revokeCustomerToken response type\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type RevokeCustomerTokenResponse<T extends "
            },
            {
              "kind": "Reference",
              "text": "DeepPartial",
              "canonicalReference": "ts-essentials!DeepPartial:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "RevokeCustomerTokenMutation",
              "canonicalReference": "@vue-storefront/magento-sdk!RevokeCustomerTokenMutation:type"
            },
            {
              "kind": "Content",
              "text": "> "
            },
            {
              "kind": "Content",
              "text": "= "
            },
            {
              "kind": "Reference",
              "text": "RevokeCustomerTokenMutation",
              "canonicalReference": "@vue-storefront/magento-sdk!RevokeCustomerTokenMutation:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "FetchResult",
              "canonicalReference": "@apollo/client/link/core!FetchResult:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "RevokeCustomerTokenResponse",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 8,
            "endIndex": 10
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-sdk!route:function(1)",
          "docComment": "/**\n * Method to resolve a route object data\n *\n * @remarks\n *\n * This method sends a GET request to the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/route | route} endpoint of the Vue Storefront API Middleware. The default GraphQL query used by this method can be found {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/route | here}.\n *\n * @param params - Parameter object which can be used with this method. Refer to its type definition to learn about possible properties.\n *\n * @param options - Options that can be passed to additionally configure the request or customize the logic in a plugin.\n *\n * @typeParam Res - Customizable response interface to be used with custom queries.\n *\n * @returns Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/RouteResponse | RouteResponse}.\n *\n * @example\n *\n * Simple usage:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // fetch route object data\n * const result = await sdk.magento.route({\n *   url: 'aether-gym-pant.html'\n * });\n *\n * // Example result:\n * {\n *    data: {\n *      route: { type: 'PRODUCT', sku: 'MP11', __typename: 'ConfigurableProduct' }\n *    },\n *    loading: false,\n *    networkStatus: 7\n * }\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function route<RES extends "
            },
            {
              "kind": "Reference",
              "text": "RouteResponse",
              "canonicalReference": "@vue-storefront/magento-sdk!RouteResponse:type"
            },
            {
              "kind": "Content",
              "text": ">(params: "
            },
            {
              "kind": "Reference",
              "text": "QueryRouteArgs",
              "canonicalReference": "@vue-storefront/magento-types!QueryRouteArgs:interface"
            },
            {
              "kind": "Content",
              "text": ", options?: "
            },
            {
              "kind": "Reference",
              "text": "MethodBaseOptions",
              "canonicalReference": "@vue-storefront/magento-sdk!MethodBaseOptions:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<RES>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "params",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "RES",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "route"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!RouteQuery:type",
          "docComment": "/**\n * route type for the {@link route} method.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type RouteQuery = "
            },
            {
              "kind": "Content",
              "text": "{\n    route: "
            },
            {
              "kind": "Reference",
              "text": "Query",
              "canonicalReference": "@vue-storefront/magento-types!Query:interface"
            },
            {
              "kind": "Content",
              "text": "['route'];\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "RouteQuery",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!RouteResponse:type",
          "docComment": "/**\n * route response type\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type RouteResponse<T extends "
            },
            {
              "kind": "Reference",
              "text": "DeepPartial",
              "canonicalReference": "ts-essentials!DeepPartial:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "RouteQuery",
              "canonicalReference": "@vue-storefront/magento-sdk!RouteQuery:type"
            },
            {
              "kind": "Content",
              "text": "> "
            },
            {
              "kind": "Content",
              "text": "= "
            },
            {
              "kind": "Reference",
              "text": "RouteQuery",
              "canonicalReference": "@vue-storefront/magento-sdk!RouteQuery:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "ApolloQueryResult",
              "canonicalReference": "@apollo/client/core!ApolloQueryResult:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "RouteResponse",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 8,
            "endIndex": 10
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-sdk!setBillingAddressOnCart:function(1)",
          "docComment": "/**\n * Method to set billing address on the cart\n *\n * @remarks\n *\n * This method sends a POST request to the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/setBillingAddressOnCart | setBillingAddressOnCart} endpoint of the Vue Storefront API Middleware. The default GraphQL query used by this method can be found {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/setBillingAddressOnCart | here}.\n *\n * @param params - Parameter object which can be used with this method. Refer to its type definition to learn about possible properties.\n *\n * @param options - Options that can be passed to additionally configure the request or customize the logic in a plugin.\n *\n * @typeParam Res - Customizable response interface to be used with custom queries.\n *\n * @returns Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/SetBillingAddressOnCartResponse | SetBillingAddressOnCartResponse}.\n *\n * @example\n *\n * Simple usage:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // Prepare parameters\n * const params = {\n *   cart_id: 'some-cart-id',\n *   billing_address: {\n *       address: {\n *        firstname: 'John',\n *        lastname: 'Doe',\n *        city: 'New York',\n *        country_code: 'US',\n *        street: ['Street 1', 'Street 2'],\n *        telephone: '123 123 123',\n *        region: 'AL',\n *        postcode: '10001',\n *        save_in_address_book: false\n *       },\n *     }\n * };\n *\n * // Set shipping address on the cart\n * await sdk.magento.setBillingAddressOnCart(params);\n * ```\n *\n * @example\n *\n * Creating a custom GraphQL query for reducing the amount of fields returned by the query, when compared to the default query.\n * ```ts\n * module.exports = {\n *   integrations: {\n *     magento: {\n *       customQueries: {\n *         'set-billing-address-on-cart-custom-query': ({ variables, metadata }) => ({\n *            variables,\n *            query: `\n *              mutation setBillingAddressOnCart($input: SetBillingAddressOnCartInput) {\n *                setBillingAddressOnCart(input: $input) {\n *                cart {\n *                  ${metadata.fields}\n *                }\n *              }\n *            }`\n *         }),\n *       },\n *     }\n *   }\n * };\n * ```\n *\n * @example\n *\n * Using a custom GraphQL query created in the previous example.\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // reduce the amount of fields returned by the query, when compared to the default query\n * const customQuery = {\n *   setBillingAddressOnCart: 'set-billing-address-on-cart-custom-query',\n *   metadata: {\n *     fields: 'billing_address { city }'\n *   }\n * };\n *\n * // data will contain only the fields specified in the custom query.\n * const { data } = await sdk.magento.setBillingAddressOnCart(params, { customQuery });\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function setBillingAddressOnCart<RES extends "
            },
            {
              "kind": "Reference",
              "text": "SetBillingAddressOnCartResponse",
              "canonicalReference": "@vue-storefront/magento-sdk!SetBillingAddressOnCartResponse:type"
            },
            {
              "kind": "Content",
              "text": ">(params: "
            },
            {
              "kind": "Reference",
              "text": "SetBillingAddressOnCartInput",
              "canonicalReference": "@vue-storefront/magento-types!SetBillingAddressOnCartInput:interface"
            },
            {
              "kind": "Content",
              "text": ", options?: "
            },
            {
              "kind": "Reference",
              "text": "MethodOptions",
              "canonicalReference": "@vue-storefront/magento-sdk!MethodOptions:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CustomQuery",
              "canonicalReference": "@vue-storefront/magento-sdk!CustomQuery:type"
            },
            {
              "kind": "Content",
              "text": "<'setBillingAddressOnCart'>>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<RES>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 10,
            "endIndex": 12
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "params",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "RES",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "setBillingAddressOnCart"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!SetBillingAddressOnCartMutation:type",
          "docComment": "/**\n * mutation type for the {@link setBillingAddressOnCart} method.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type SetBillingAddressOnCartMutation = "
            },
            {
              "kind": "Content",
              "text": "{\n    setBillingAddressOnCart: "
            },
            {
              "kind": "Reference",
              "text": "Mutation",
              "canonicalReference": "@vue-storefront/magento-types!Mutation:interface"
            },
            {
              "kind": "Content",
              "text": "['setBillingAddressOnCart'];\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "SetBillingAddressOnCartMutation",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!SetBillingAddressOnCartResponse:type",
          "docComment": "/**\n * Set billing address response type\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type SetBillingAddressOnCartResponse<T extends "
            },
            {
              "kind": "Reference",
              "text": "DeepPartial",
              "canonicalReference": "ts-essentials!DeepPartial:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SetBillingAddressOnCartMutation",
              "canonicalReference": "@vue-storefront/magento-sdk!SetBillingAddressOnCartMutation:type"
            },
            {
              "kind": "Content",
              "text": "> "
            },
            {
              "kind": "Content",
              "text": "= "
            },
            {
              "kind": "Reference",
              "text": "SetBillingAddressOnCartMutation",
              "canonicalReference": "@vue-storefront/magento-sdk!SetBillingAddressOnCartMutation:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "FetchResult",
              "canonicalReference": "@apollo/client/link/core!FetchResult:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "SetBillingAddressOnCartResponse",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 8,
            "endIndex": 10
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-sdk!setGuestEmailOnCart:function(1)",
          "docComment": "/**\n * Method to set the guest user email on the cart\n *\n * @remarks\n *\n * This method sends a POST request to the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/setGuestEmailOnCart | setGuestEmailOnCart} endpoint of the Vue Storefront API Middleware. The default GraphQL query used by this method can be found {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/setGuestEmailOnCart | here}.\n *\n * @param params - Parameter object which can be used with this method. Refer to its type definition to learn about possible properties.\n *\n * @param options - Options that can be passed to additionally configure the request or customize the logic in a plugin.\n *\n * @typeParam Res - Customizable response interface to be used with custom queries.\n *\n * @returns Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/SetGuestEmailOnCartResponse | SetGuestEmailOnCartResponse}.\n *\n * @example\n *\n * Simple usage:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // set an email on the cart\n * const result = await sdk.magento.setGuestEmailOnCart({ cart_id: 'some-cart-id', email: 'some-email' });\n *\n * // new email will be set on the cart\n * // data.setGuestEmailOnCart.cart.email will contain the email address\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function setGuestEmailOnCart<RES extends "
            },
            {
              "kind": "Reference",
              "text": "SetGuestEmailOnCartResponse",
              "canonicalReference": "@vue-storefront/magento-sdk!SetGuestEmailOnCartResponse:type"
            },
            {
              "kind": "Content",
              "text": ">(params: "
            },
            {
              "kind": "Reference",
              "text": "SetGuestEmailOnCartInput",
              "canonicalReference": "@vue-storefront/magento-types!SetGuestEmailOnCartInput:interface"
            },
            {
              "kind": "Content",
              "text": ", options?: "
            },
            {
              "kind": "Reference",
              "text": "MethodBaseOptions",
              "canonicalReference": "@vue-storefront/magento-sdk!MethodBaseOptions:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<RES>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "params",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "RES",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "setGuestEmailOnCart"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!SetGuestEmailOnCartMutation:type",
          "docComment": "/**\n * mutation type for the {@link setGuestEmailOnCart} method.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type SetGuestEmailOnCartMutation = "
            },
            {
              "kind": "Content",
              "text": "{\n    setGuestEmailOnCart: "
            },
            {
              "kind": "Reference",
              "text": "Mutation",
              "canonicalReference": "@vue-storefront/magento-types!Mutation:interface"
            },
            {
              "kind": "Content",
              "text": "['setGuestEmailOnCart'];\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "SetGuestEmailOnCartMutation",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!SetGuestEmailOnCartResponse:type",
          "docComment": "/**\n * setGuestEmailOnCart response type\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type SetGuestEmailOnCartResponse<T extends "
            },
            {
              "kind": "Reference",
              "text": "DeepPartial",
              "canonicalReference": "ts-essentials!DeepPartial:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SetGuestEmailOnCartMutation",
              "canonicalReference": "@vue-storefront/magento-sdk!SetGuestEmailOnCartMutation:type"
            },
            {
              "kind": "Content",
              "text": "> "
            },
            {
              "kind": "Content",
              "text": "= "
            },
            {
              "kind": "Reference",
              "text": "SetGuestEmailOnCartMutation",
              "canonicalReference": "@vue-storefront/magento-sdk!SetGuestEmailOnCartMutation:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "FetchResult",
              "canonicalReference": "@apollo/client/link/core!FetchResult:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "SetGuestEmailOnCartResponse",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 8,
            "endIndex": 10
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-sdk!setPaymentMethodOnCart:function(1)",
          "docComment": "/**\n * Method to set payment method on cart.\n *\n * @remarks\n *\n * This method sends a POST request to the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/setPaymentMethodOnCart | setPaymentMethodOnCart} endpoint of the Vue Storefront API Middleware. The default GraphQL query used by this method can be found {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/setPaymentMethodOnCart | here}.\n *\n * @param params - Parameter object which can be used with this method. Refer to its type definition to learn about possible properties.\n *\n * @param options - Options that can be passed to additionally configure the request or customize the logic in a plugin.\n *\n * @typeParam Res - Customizable response interface to be used with custom queries.\n *\n * @returns Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/SetPaymentMethodOnCartResponse | SetPaymentMethodOnCartResponse}.\n *\n * @example\n *\n * Simple usage:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * const params = {\n *   cart_id: 'some-cart-id'\n *   payment_method: {\n *     code: 'checkmo'\n *   }\n * };\n *\n * // sets payment method on cart and return payment information\n * // data contains properties like `available_payment_methods` and `selected_payment_method`\n * const { data } = await sdk.magento.setPaymentMethodOnCart(params);\n * ```\n *\n * @example\n *\n * Creating a custom GraphQL query for configuring the response data structure\n * ```ts\n * module.exports = {\n *   integrations: {\n *     magento: {\n *       customQueries: {\n *         'set-payment-method-on-cart-custom-query': ({ variables, metadata }) => ({\n *            variables,\n *            query: `\n *              mutation setPaymentMethodOnCart($input: SetPaymentMethodOnCartInput) {\n *                setPaymentMethodOnCart(input: $input) {\n *                  cart {\n *                    ${metadata.fields}\n *                  }\n *                }\n *              }\n *            `\n *         }),\n *       },\n *     }\n *   }\n * };\n * ```\n *\n * @example\n *\n * Using a custom GraphQL query created with the `set-payment-method-on-cart-custom-query` in the previous example\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n * // reduce the amount of fields returned by the query, when compared to the default query\n * const customQuery = {\n *   setPaymentMethodOnCart: 'set-payment-method-on-cart-custom-query',\n *   metadata: {\n *     fields: 'available_payment_methods { code title }'\n *   }\n * };\n *\n * // Params and options are the same as in the previous example\n * const { data } = await sdk.magento.setPaymentMethodOnCart(params, { customQuery });\n *\n * // data contains only the properties selected in the custom query\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function setPaymentMethodOnCart<RES extends "
            },
            {
              "kind": "Reference",
              "text": "SetPaymentMethodOnCartResponse",
              "canonicalReference": "@vue-storefront/magento-sdk!SetPaymentMethodOnCartResponse:type"
            },
            {
              "kind": "Content",
              "text": ">(params: "
            },
            {
              "kind": "Reference",
              "text": "SetPaymentMethodOnCartInputs",
              "canonicalReference": "@vue-storefront/magento-types!SetPaymentMethodOnCartInputs:interface"
            },
            {
              "kind": "Content",
              "text": ", options?: "
            },
            {
              "kind": "Reference",
              "text": "MethodOptions",
              "canonicalReference": "@vue-storefront/magento-sdk!MethodOptions:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CustomQuery",
              "canonicalReference": "@vue-storefront/magento-sdk!CustomQuery:type"
            },
            {
              "kind": "Content",
              "text": "<'setPaymentMethodOnCart'>>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<RES>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 10,
            "endIndex": 12
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "params",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "RES",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "setPaymentMethodOnCart"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!SetPaymentMethodOnCartMutation:type",
          "docComment": "/**\n * mutation type for the {@link setPaymentMethodOnCart} method.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type SetPaymentMethodOnCartMutation = "
            },
            {
              "kind": "Content",
              "text": "{\n    setPaymentMethodOnCart: "
            },
            {
              "kind": "Reference",
              "text": "Mutation",
              "canonicalReference": "@vue-storefront/magento-types!Mutation:interface"
            },
            {
              "kind": "Content",
              "text": "['setPaymentMethodOnCart'];\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "SetPaymentMethodOnCartMutation",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!SetPaymentMethodOnCartResponse:type",
          "docComment": "/**\n * setPaymentMethodOnCart response type\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type SetPaymentMethodOnCartResponse<T extends "
            },
            {
              "kind": "Reference",
              "text": "DeepPartial",
              "canonicalReference": "ts-essentials!DeepPartial:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SetPaymentMethodOnCartMutation",
              "canonicalReference": "@vue-storefront/magento-sdk!SetPaymentMethodOnCartMutation:type"
            },
            {
              "kind": "Content",
              "text": "> "
            },
            {
              "kind": "Content",
              "text": "= "
            },
            {
              "kind": "Reference",
              "text": "SetPaymentMethodOnCartMutation",
              "canonicalReference": "@vue-storefront/magento-sdk!SetPaymentMethodOnCartMutation:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "FetchResult",
              "canonicalReference": "@apollo/client/link/core!FetchResult:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "SetPaymentMethodOnCartResponse",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 8,
            "endIndex": 10
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-sdk!setShippingAddressesOnCart:function(1)",
          "docComment": "/**\n * Method to set shipping addresses on the cart It should be used to set single or multiple shipping addresses on the cart.\n *\n * @remarks\n *\n * This method sends a POST request to the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/setShippingAddressOnCart | setShippingAddressOnCart} endpoint of the Vue Storefront API Middleware. The default GraphQL query used by this method can be found {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/setShippingAddressOnCart | here}.\n *\n * @param params - Parameter object which can be used with this method. Refer to its type definition to learn about possible properties.\n *\n * @param options - Options that can be passed to additionally configure the request or customize the logic in a plugin.\n *\n * @typeParam Res - Customizable response interface to be used with custom queries.\n *\n * @returns Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/SetShippingAddressesOnCartResponse | SetShippingAddressesOnCartResponse}.\n *\n * @example\n *\n * Simple usage:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // Prepare parameters\n * const params = {\n *   cart_id: 'some-cart-id',\n *   shipping_addresses: [\n *     {\n *       address: {\n *        firstname: 'John',\n *        lastname: 'Doe',\n *        city: 'New York',\n *        country_code: 'US',\n *        street: ['Street 1', 'Street 2'],\n *        telephone: '123 123 123',\n *        region: 'AL',\n *        postcode: '10001',\n *        save_in_address_book: false\n *       },\n *     }\n *   ]\n * };\n *\n * // Set shipping address on the cart\n * await sdk.magento.setShippingAddressesOnCart(params);\n * ```\n *\n * @example\n *\n * You can also use the `setShippingAddressesOnCart` method to set multiple shipping addresses on the cart.\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // Prepare parameters\n * const params = {\n *  cart_id: 'some-cart-id',\n *  shipping_addresses: [\n *   {\n *     address: address1, // address1 is an object with address details\n *   },\n *   {\n *     address: address2, // address2 is an object with address details\n *   }\n * ];\n *\n * // This will set address1 and address2 on the cart\n * await sdk.magento.setShippingAddressesOnCart(params);\n * ```\n *\n * @example\n *\n * Creating a custom GraphQL query for reducing the amount of fields returned by the query, when compared to the default query.\n * ```ts\n * module.exports = {\n *   integrations: {\n *     magento: {\n *       customQueries: {\n *         'set-shipping-addresses-on-cart-custom-query': ({ variables, metadata }) => ({\n *            variables,\n *            query: `\n *              mutation setShippingAddressesOnCart($input: SetShippingAddressesOnCartInput) {\n *                setShippingAddressesOnCart(input: $input) {\n *                cart {\n *                  ${metadata.fields}\n *                }\n *              }\n *            }`\n *         }),\n *       },\n *     }\n *   }\n * };\n * ```\n *\n * @example\n *\n * Using a custom GraphQL query created in the previous example.\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // reduce the amount of fields returned by the query, when compared to the default query\n * const customQuery = {\n *   cart: 'set-shipping-addresses-on-cart-custom-query',\n *   metadata: {\n *     fields: 'shipping_addresses { city }'\n *   }\n * };\n *\n * // data will contain only the fields specified in the custom query.\n * const { data } = await sdk.magento.setShippingAddressesOnCart(params, { customQuery });\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function setShippingAddressesOnCart<RES extends "
            },
            {
              "kind": "Reference",
              "text": "SetShippingAddressesOnCartResponse",
              "canonicalReference": "@vue-storefront/magento-sdk!SetShippingAddressesOnCartResponse:type"
            },
            {
              "kind": "Content",
              "text": ">(params: "
            },
            {
              "kind": "Reference",
              "text": "SetShippingAddressesOnCartInput",
              "canonicalReference": "@vue-storefront/magento-types!SetShippingAddressesOnCartInput:interface"
            },
            {
              "kind": "Content",
              "text": ", options?: "
            },
            {
              "kind": "Reference",
              "text": "MethodOptions",
              "canonicalReference": "@vue-storefront/magento-sdk!MethodOptions:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CustomQuery",
              "canonicalReference": "@vue-storefront/magento-sdk!CustomQuery:type"
            },
            {
              "kind": "Content",
              "text": "<'setShippingAddressesOnCart'>>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<RES>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 10,
            "endIndex": 12
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "params",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "RES",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "setShippingAddressesOnCart"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!SetShippingAddressesOnCartMutation:type",
          "docComment": "/**\n * mutation type for the {@link setShippingAddressesOnCart} method.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type SetShippingAddressesOnCartMutation = "
            },
            {
              "kind": "Content",
              "text": "{\n    setShippingAddressesOnCart: "
            },
            {
              "kind": "Reference",
              "text": "Mutation",
              "canonicalReference": "@vue-storefront/magento-types!Mutation:interface"
            },
            {
              "kind": "Content",
              "text": "['setShippingAddressesOnCart'];\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "SetShippingAddressesOnCartMutation",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!SetShippingAddressesOnCartResponse:type",
          "docComment": "/**\n * Set Shipping Address response type\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type SetShippingAddressesOnCartResponse<T extends "
            },
            {
              "kind": "Reference",
              "text": "DeepPartial",
              "canonicalReference": "ts-essentials!DeepPartial:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SetShippingAddressesOnCartMutation",
              "canonicalReference": "@vue-storefront/magento-sdk!SetShippingAddressesOnCartMutation:type"
            },
            {
              "kind": "Content",
              "text": "> "
            },
            {
              "kind": "Content",
              "text": "= "
            },
            {
              "kind": "Reference",
              "text": "SetShippingAddressesOnCartMutation",
              "canonicalReference": "@vue-storefront/magento-sdk!SetShippingAddressesOnCartMutation:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "FetchResult",
              "canonicalReference": "@apollo/client/link/core!FetchResult:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "SetShippingAddressesOnCartResponse",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 8,
            "endIndex": 10
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-sdk!setShippingMethodsOnCart:function(1)",
          "docComment": "/**\n * Method to set shipping methods on cart. Before using this method, you need to set shipping address on cart.\n *\n * @remarks\n *\n * This method sends a POST request to the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/setShippingMethodsOnCart | setShippingMethodsOnCart} endpoint of the Vue Storefront API Middleware. The default GraphQL query used by this method can be found {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/setShippingMethodsOnCart | here}.\n *\n * @param params - Parameter object which can be used with this method. Refer to its type definition to learn about possible properties.\n *\n * @param options - Options that can be passed to additionally configure the request or customize the logic in a plugin.\n *\n * @typeParam Res - Customizable response interface to be used with custom queries.\n *\n * @returns Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/SetShippingMethodsOnCartResponse | SetShippingMethodsOnCartResponse}.\n *\n * @example\n *\n * Simple usage:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // Assuming that shipping address is already set on cart.\n * // if not, you need to set shipping address on cart first.\n *\n * const params = {\n *   cart_id: 'some-cart-id',\n *   shipping_methods: [\n *     {\n *       carrier_code: 'flatrate',\n *       method_code: 'flatrate'\n *     }\n *   ]\n * };\n *\n * const { data } = await sdk.magento.setShippingMethodsOnCart(params);\n *\n * // you can get set shipping methods on cart response from\n * // data?.setShippingMethodsOnCart?.cart?.shipping_addresses?.[0]?.selected_shipping_method?.method_code\n * ```\n *\n * @example\n *\n * Creating a custom GraphQL query to change the amount of fields returned by the query, when compared to the default query\n * ```ts\n * module.exports = {\n *   integrations: {\n *     magento: {\n *       customQueries: {\n *         'set-shipping-methods-on-cart-custom-query': ({ variables, metadata }) => ({\n *            variables,\n *            query: `\n *              mutation setShippingMethodsOnCart($input: SetShippingMethodsOnCartInput) {\n *                setShippingMethodsOnCart(input: $input) {\n *                  cart {\n *                    ${metadata.fields}\n *                  }\n *                }\n *              }`\n *         }),\n *       },\n *     }\n *   }\n * };\n * ```\n *\n * @example\n *\n * Using a custom GraphQL query created in the previous example\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n * // reduce the amount of fields returned by the query, when compared to the default query\n * // you will get only selected_shipping_method.method_code field\n *\n * const customQuery = {\n *   setShippingMethodsOnCart: 'set-shipping-methods-on-cart-custom-query',\n *   metadata: {\n *     fields: 'shipping_addresses { selected_shipping_method { method_code } }'\n *   }\n * };\n *\n * const params = {\n *   cart_id: 'some-cart-id',\n *   shipping_methods: [\n *     {\n *       carrier_code: 'flatrate',\n *       method_code: 'flatrate'\n *     }\n *   ]\n * };\n *\n * const { data } = await sdk.magento.setShippingMethodsOnCart(params, { customQuery });\n *\n * // data will contain only the fields specified in the custom query.\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function setShippingMethodsOnCart<RES extends "
            },
            {
              "kind": "Reference",
              "text": "SetShippingMethodsOnCartResponse",
              "canonicalReference": "@vue-storefront/magento-sdk!SetShippingMethodsOnCartResponse:type"
            },
            {
              "kind": "Content",
              "text": ">(params: "
            },
            {
              "kind": "Reference",
              "text": "SetShippingMethodsOnCartInput",
              "canonicalReference": "@vue-storefront/magento-types!SetShippingMethodsOnCartInput:interface"
            },
            {
              "kind": "Content",
              "text": ", options?: "
            },
            {
              "kind": "Reference",
              "text": "MethodOptions",
              "canonicalReference": "@vue-storefront/magento-sdk!MethodOptions:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CustomQuery",
              "canonicalReference": "@vue-storefront/magento-sdk!CustomQuery:type"
            },
            {
              "kind": "Content",
              "text": "<'setShippingMethodsOnCart'>>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<RES>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 10,
            "endIndex": 12
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "params",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "RES",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "setShippingMethodsOnCart"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!SetShippingMethodsOnCartMutation:type",
          "docComment": "/**\n * mutation type for the {@link setShippingMethodsOnCart} method.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type SetShippingMethodsOnCartMutation = "
            },
            {
              "kind": "Content",
              "text": "{\n    setShippingMethodsOnCart: "
            },
            {
              "kind": "Reference",
              "text": "Mutation",
              "canonicalReference": "@vue-storefront/magento-types!Mutation:interface"
            },
            {
              "kind": "Content",
              "text": "['setShippingMethodsOnCart'];\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "SetShippingMethodsOnCartMutation",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!SetShippingMethodsOnCartResponse:type",
          "docComment": "/**\n * setShippingMethodsOnCart response type\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type SetShippingMethodsOnCartResponse<T extends "
            },
            {
              "kind": "Reference",
              "text": "DeepPartial",
              "canonicalReference": "ts-essentials!DeepPartial:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SetShippingMethodsOnCartMutation",
              "canonicalReference": "@vue-storefront/magento-sdk!SetShippingMethodsOnCartMutation:type"
            },
            {
              "kind": "Content",
              "text": "> "
            },
            {
              "kind": "Content",
              "text": "= "
            },
            {
              "kind": "Reference",
              "text": "SetShippingMethodsOnCartMutation",
              "canonicalReference": "@vue-storefront/magento-sdk!SetShippingMethodsOnCartMutation:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "FetchResult",
              "canonicalReference": "@apollo/client/link/core!FetchResult:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "SetShippingMethodsOnCartResponse",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 8,
            "endIndex": 10
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-sdk!storeConfig:function(1)",
          "docComment": "/**\n * Method to fetch store configuration\n *\n * @remarks\n *\n * This method sends a GET request to the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/storeConfig | storeConfig} endpoint of the Vue Storefront API Middleware. The default GraphQL query used by this method can be found {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/storeConfig | here}.\n *\n * @param options - Options that can be passed to additionally configure the request or customize the logic in a plugin.\n *\n * @typeParam Res - Customizable response interface to be used with custom queries.\n *\n * @returns Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/StoreConfigResponse | StoreConfigResponse}.\n *\n * @example\n *\n * Simple usage:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // fetch store configuration\n * const result = await sdk.magento.storeConfig();\n *\n * // result?.data?.storeConfig contains the store configuration\n * ```\n *\n * @example\n * ```ts\n * module.exports = {\n *   integrations: {\n *     magento: {\n *       customQueries: {\n *         'store-config-custom-query': ({ variables, metadata }) => ({\n *            variables,\n *            query: `\n *              query storeConfig {\n *                storeConfig {\n *                  ${metadata?.fields}\n *                }\n *              }\n *            `\n *         }),\n *       },\n *     }\n *   }\n * };\n * ```\n *\n * @example\n *\n * Using a custom GraphQL query to select only the fields you need\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n * // we want to fetch only logo related data\n * const customQuery = {\n *   storeConfig: 'store-config-custom-query',\n *   metadata: {\n *     fields: 'logo_alt logo_height logo_width'\n *   }\n * };\n *\n * const result = await sdk.magento.storeConfig({ customQuery });\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function storeConfig<RES extends "
            },
            {
              "kind": "Reference",
              "text": "StoreConfigResponse",
              "canonicalReference": "@vue-storefront/magento-sdk!StoreConfigResponse:type"
            },
            {
              "kind": "Content",
              "text": ">(options?: "
            },
            {
              "kind": "Reference",
              "text": "MethodOptions",
              "canonicalReference": "@vue-storefront/magento-sdk!MethodOptions:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CustomQuery",
              "canonicalReference": "@vue-storefront/magento-sdk!CustomQuery:type"
            },
            {
              "kind": "Content",
              "text": "<'storeConfig'>>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<RES>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 8,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "RES",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "storeConfig"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!StoreConfigQuery:type",
          "docComment": "/**\n * query type for the {@link storeConfig} method.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type StoreConfigQuery = "
            },
            {
              "kind": "Content",
              "text": "{\n    storeConfig: "
            },
            {
              "kind": "Reference",
              "text": "Query",
              "canonicalReference": "@vue-storefront/magento-types!Query:interface"
            },
            {
              "kind": "Content",
              "text": "['storeConfig'];\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "StoreConfigQuery",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!StoreConfigResponse:type",
          "docComment": "/**\n * storeConfig response type\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type StoreConfigResponse<T extends "
            },
            {
              "kind": "Reference",
              "text": "DeepPartial",
              "canonicalReference": "ts-essentials!DeepPartial:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "StoreConfigQuery",
              "canonicalReference": "@vue-storefront/magento-sdk!StoreConfigQuery:type"
            },
            {
              "kind": "Content",
              "text": "> "
            },
            {
              "kind": "Content",
              "text": "= "
            },
            {
              "kind": "Reference",
              "text": "StoreConfigQuery",
              "canonicalReference": "@vue-storefront/magento-sdk!StoreConfigQuery:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "ApolloQueryResult",
              "canonicalReference": "@apollo/client/core!ApolloQueryResult:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "StoreConfigResponse",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 8,
            "endIndex": 10
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-sdk!subscribeEmailToNewsletter:function(1)",
          "docComment": "/**\n * Method allows guests and registered customers to sign up to receive newsletters.\n *\n * @remarks\n *\n * This method sends a POST request to the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/subscribeEmailToNewsletter | subscribeEmailToNewsletter} endpoint of the Vue Storefront API Middleware. The default GraphQL query used by this method can be found {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/subscribeEmailToNewsletter | here}.\n *\n * @param params - Parameter object which can be used with this method. Refer to its type definition to learn about possible properties.\n *\n * @param options - Options that can be passed to additionally configure the request or customize the logic in a plugin.\n *\n * @typeParam Res - Customizable response interface to be used with custom queries.\n *\n * @returns Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/SubscribeEmailToNewsletterResponse | SubscribeEmailToNewsletterResponse}.\n *\n * @example\n *\n * Simple usage:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // subscribe an email in the newsletter. * const email = 'somemail@vsf.local';\n * const result = await sdk.magento.subscribeEmailToNewsletter({ email });\n *\n * result.data?.subscribeEmailToNewsletter?.status; // status of the operation. Possible values: https://developer.adobe.com/commerce/webapi/graphql/schema/customer/mutations/subscribe-email-to-newsletter/#subscriptionstatusesenum\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function subscribeEmailToNewsletter<RES extends "
            },
            {
              "kind": "Reference",
              "text": "SubscribeEmailToNewsletterResponse",
              "canonicalReference": "@vue-storefront/magento-sdk!SubscribeEmailToNewsletterResponse:type"
            },
            {
              "kind": "Content",
              "text": ">(params: "
            },
            {
              "kind": "Reference",
              "text": "SubscribeEmailToNewsletterMutationVariables",
              "canonicalReference": "@vue-storefront/magento-types!SubscribeEmailToNewsletterMutationVariables:type"
            },
            {
              "kind": "Content",
              "text": ", options?: "
            },
            {
              "kind": "Reference",
              "text": "MethodBaseOptions",
              "canonicalReference": "@vue-storefront/magento-sdk!MethodBaseOptions:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<RES>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "params",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "RES",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "subscribeEmailToNewsletter"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!SubscribeEmailToNewsletterMutation:type",
          "docComment": "/**\n * mutation type for the {@link subscribeEmailToNewsletter} method.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type SubscribeEmailToNewsletterMutation = "
            },
            {
              "kind": "Content",
              "text": "{\n    subscribeEmailToNewsletter: "
            },
            {
              "kind": "Reference",
              "text": "Mutation",
              "canonicalReference": "@vue-storefront/magento-types!Mutation:interface"
            },
            {
              "kind": "Content",
              "text": "['subscribeEmailToNewsletter'];\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "SubscribeEmailToNewsletterMutation",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!SubscribeEmailToNewsletterResponse:type",
          "docComment": "/**\n * subscribeEmailToNewsletter response type\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type SubscribeEmailToNewsletterResponse<T extends "
            },
            {
              "kind": "Reference",
              "text": "DeepPartial",
              "canonicalReference": "ts-essentials!DeepPartial:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SubscribeEmailToNewsletterMutation",
              "canonicalReference": "@vue-storefront/magento-sdk!SubscribeEmailToNewsletterMutation:type"
            },
            {
              "kind": "Content",
              "text": "> "
            },
            {
              "kind": "Content",
              "text": "= "
            },
            {
              "kind": "Reference",
              "text": "SubscribeEmailToNewsletterMutation",
              "canonicalReference": "@vue-storefront/magento-sdk!SubscribeEmailToNewsletterMutation:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "FetchResult",
              "canonicalReference": "@apollo/client/link/core!FetchResult:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "SubscribeEmailToNewsletterResponse",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 8,
            "endIndex": 10
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-sdk!updateCartItems:function(1)",
          "docComment": "/**\n * Method to update items in the cart\n *\n * @remarks\n *\n * This method sends a POST request to the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/updateCartItems | updateCartItems} endpoint of the Vue Storefront API Middleware. The default GraphQL query used by this method can be found {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/updateCartItems | here}.\n *\n * @param params - Parameter object which can be used with this method. Refer to its type definition to learn about possible properties.\n *\n * @param options - Options that can be passed to additionally configure the request or customize the logic in a plugin.\n *\n * @typeParam Res - Customizable response interface to be used with custom queries.\n *\n * @returns Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/UpdateCartItemsResponse | UpdateCartItemsResponse}.\n *\n * @example\n *\n * Simple usage, updating the quantity of a cart item:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // update the quantity of a cart item\n * const result = await sdk.magento.updateCartItems({\n *  cart_id: 'some-cart-id'\n *  cart_items: [{\n *      cart_item_uid: 'MY=',\n *      quantity: 10 // update the quantity to 10\n *     }]\n * });\n *\n * // result will contain the updated cart.\n * ```\n *\n * @example\n *\n * Creating a custom GraphQL query for manipulating the cart response data.\n * ```ts\n * module.exports = {\n *   integrations: {\n *     magento: {\n *       customQueries: {\n *         'update-cart-items-custom-query': ({ variables, metadata }) => ({\n *            variables,\n *            query: `\n *              mutation updateCartItems($input: UpdateCartItemsInput) {\n *                updateCartItems(input: $input) {\n *                  cart {\n *                    ${metadata.fields}\n *                  }\n *                 }\n *              }`\n *         }),\n *       },\n *     }\n *   }\n * };\n * ```\n *\n * @example\n *\n * Using a custom GraphQL query created in the previous example. Note that the custom query must be passed to the `customQuery` property of the `options` parameter. The `metadata` property of the `options` parameter can be used to pass additional data to the custom query.\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n * // reduce the amount of fields returned by the query, when compared to the default query\n * const customQuery = {\n *   updateCartItems: 'update-cart-items-custom-query',\n *   metadata: {\n *     fields: 'id items { uid quantity product { uid sku }}'\n *   }\n * };\n *\n * // update the quantity of a cart item with params and custom query\n * // Params are the same as in the previous example.\n * const result = await sdk.magento.updateCartItems(params, { customQuery });\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function updateCartItems<RES extends "
            },
            {
              "kind": "Reference",
              "text": "UpdateCartItemsResponse",
              "canonicalReference": "@vue-storefront/magento-sdk!UpdateCartItemsResponse:type"
            },
            {
              "kind": "Content",
              "text": ">(params: "
            },
            {
              "kind": "Reference",
              "text": "UpdateCartItemsInput",
              "canonicalReference": "@vue-storefront/magento-types!UpdateCartItemsInput:interface"
            },
            {
              "kind": "Content",
              "text": ", options?: "
            },
            {
              "kind": "Reference",
              "text": "MethodOptions",
              "canonicalReference": "@vue-storefront/magento-sdk!MethodOptions:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CustomQuery",
              "canonicalReference": "@vue-storefront/magento-sdk!CustomQuery:type"
            },
            {
              "kind": "Content",
              "text": "<'updateCartItems'>>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<RES>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 10,
            "endIndex": 12
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "params",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "RES",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "updateCartItems"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!UpdateCartItemsMutation:type",
          "docComment": "/**\n * mutation type for the {@link updateCartItems} method.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type UpdateCartItemsMutation = "
            },
            {
              "kind": "Content",
              "text": "{\n    updateCartItems: "
            },
            {
              "kind": "Reference",
              "text": "Mutation",
              "canonicalReference": "@vue-storefront/magento-types!Mutation:interface"
            },
            {
              "kind": "Content",
              "text": "['updateCartItems'];\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "UpdateCartItemsMutation",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!UpdateCartItemsResponse:type",
          "docComment": "/**\n * updateCartItems response type\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type UpdateCartItemsResponse<T extends "
            },
            {
              "kind": "Reference",
              "text": "DeepPartial",
              "canonicalReference": "ts-essentials!DeepPartial:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "UpdateCartItemsMutation",
              "canonicalReference": "@vue-storefront/magento-sdk!UpdateCartItemsMutation:type"
            },
            {
              "kind": "Content",
              "text": "> "
            },
            {
              "kind": "Content",
              "text": "= "
            },
            {
              "kind": "Reference",
              "text": "UpdateCartItemsMutation",
              "canonicalReference": "@vue-storefront/magento-sdk!UpdateCartItemsMutation:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "FetchResult",
              "canonicalReference": "@apollo/client/link/core!FetchResult:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "UpdateCartItemsResponse",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 8,
            "endIndex": 10
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-sdk!updateCustomer:function(1)",
          "docComment": "/**\n * Method to update customer data. Customer data is updated based on the current customer token.\n *\n * @remarks\n *\n * This method sends a POST request to the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/updateCustomer | updateCustomer} endpoint of the Vue Storefront API Middleware. The default GraphQL query used by this method can be found {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/updateCustomer | here}.\n *\n * @param params - Parameter object which can be used with this method. Refer to its type definition to learn about possible properties.\n *\n * @param options - Options that can be passed to additionally configure the request or customize the logic in a plugin.\n *\n * @typeParam Res - Customizable response interface to be used with custom queries.\n *\n * @returns Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/UpdateCustomerResponse | UpdateCustomerResponse}.\n *\n * @example\n *\n * Simple usage:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // Updates customer first name\n * const result = await sdk.magento.updateCustomer({\n *   firstname: 'New John'\n * });\n *\n * // result contains updated customer data\n * console.log(result); // result.data.updateCustomerV2.customer.firstname === 'New John'\n * ```\n *\n * @example\n *\n * Creating a custom GraphQL query\n * ```ts\n * module.exports = {\n *   integrations: {\n *     magento: {\n *       customQueries: {\n *         'update-customer-custom-query': ({ variables, metadata }) => ({\n *            variables,\n *            query: `\n *              mutation updateCustomer($input: CustomerUpdateInput!) {\n *                updateCustomerV2(input: $input) {\n *                  customer {\n *                    ${metadata.fields}\n *                  }\n *                }\n *              }\n *            `\n *         }),\n *       },\n *     }\n *   }\n * };\n * ```\n *\n * @example\n *\n * Using a custom GraphQL query to reduce the amount of data returned by the query\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n * // reduce the amount of fields returned by the query, when compared to the default query\n * const customQuery = {\n *   updateCustomer: 'update-customer-custom-query',\n *   metadata: {\n *     fields: 'firstname lastname'\n *   }\n * };\n *\n * const result = await sdk.magento.updateCustomer({\n *   firstname: 'New John'\n *   lastname: 'New Doe'\n * }, { customQuery });\n *\n * // result contains only the fields specified in the custom query\n * // result.data.updateCustomerV2.customer.firstname === 'New John'\n * // result.data.updateCustomerV2.customer.lastname === 'New Doe'\n * console.log(result); // result.data.updateCustomerV2.customer.firstname === 'New John'\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function updateCustomer<RES extends "
            },
            {
              "kind": "Reference",
              "text": "UpdateCustomerResponse",
              "canonicalReference": "@vue-storefront/magento-sdk!UpdateCustomerResponse:type"
            },
            {
              "kind": "Content",
              "text": ">(params: "
            },
            {
              "kind": "Reference",
              "text": "CustomerUpdateInput",
              "canonicalReference": "@vue-storefront/magento-types!CustomerUpdateInput:interface"
            },
            {
              "kind": "Content",
              "text": ", options?: "
            },
            {
              "kind": "Reference",
              "text": "MethodOptions",
              "canonicalReference": "@vue-storefront/magento-sdk!MethodOptions:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CustomQuery",
              "canonicalReference": "@vue-storefront/magento-sdk!CustomQuery:type"
            },
            {
              "kind": "Content",
              "text": "<'updateCustomer'>>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<RES>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 10,
            "endIndex": 12
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "params",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "RES",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "updateCustomer"
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-sdk!updateCustomerAddress:function(1)",
          "docComment": "/**\n * Method to update customer address The user needs to be logged in in order to send this request\n *\n * @remarks\n *\n * This method sends a POST request to the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/updateCustomerAddress | updateCustomerAddress} endpoint of the Vue Storefront API Middleware. The default GraphQL query used by this method can be found {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/updateCustomerAddress | here}.\n *\n * @param params - Parameter object which can be used with this method. Refer to its type definition to learn about possible properties.\n *\n * @param options - Options that can be passed to additionally configure the request or customize the logic in a plugin.\n *\n * @typeParam Res - Customizable response interface to be used with custom queries.\n *\n * @returns Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/UpdateCustomerAddressResponse | UpdateCustomerAddressResponse}.\n *\n * @example\n *\n * Simple usage:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // fetch updated customer address\n * const result = await sdk.magento.updateCustomerAddress();\n * ```\n *\n * @example\n *\n * Creating a custom GraphQL query for updating customer address\n * ```ts\n * module.exports = {\n *   integrations: {\n *     magento: {\n *       customQueries: {\n *         'update-customer-address-custom-query': ({ variables, metadata }) => ({\n *            variables,\n *            query: `\n *              mutation updateCustomerAddress($id: Int!, $input: CustomerAddressInput) {\n *                updateCustomerAddress(id: $id, input: $input) {\n *                  ${metadata.fields}\n *                }\n *              }\n *              `\n *            `\n *         }),\n *       },\n *     }\n *   }\n * };\n * ```\n *\n * @example\n *\n * Using a custom GraphQL query to update customer address\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n * // reduce the amount of fields returned by the query, when compared to the default query\n * const customQuery = {\n *   updateCustomerAddress: 'update-customer-address-custom-query',\n *   metadata: {\n *     fields: 'id city company'\n *   }\n * };\n *\n * const result = await sdk.magento.updateCustomerAddress({ id: 308, input: { city: \"Warsaw\" }  }, { customQuery });\n *\n * // result will contain only the fields specified in the custom query.\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function updateCustomerAddress<RES extends "
            },
            {
              "kind": "Reference",
              "text": "UpdateCustomerAddressResponse",
              "canonicalReference": "@vue-storefront/magento-sdk!UpdateCustomerAddressResponse:type"
            },
            {
              "kind": "Content",
              "text": ">(params: "
            },
            {
              "kind": "Reference",
              "text": "UpdateCustomerAddressMutationVariables",
              "canonicalReference": "@vue-storefront/magento-types!UpdateCustomerAddressMutationVariables:type"
            },
            {
              "kind": "Content",
              "text": ", options?: "
            },
            {
              "kind": "Reference",
              "text": "MethodOptions",
              "canonicalReference": "@vue-storefront/magento-sdk!MethodOptions:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CustomQuery",
              "canonicalReference": "@vue-storefront/magento-sdk!CustomQuery:type"
            },
            {
              "kind": "Content",
              "text": "<'updateCustomerAddress'>>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<RES>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 10,
            "endIndex": 12
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "params",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "RES",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "updateCustomerAddress"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!UpdateCustomerAddressMutation:type",
          "docComment": "/**\n * mutation type for the {@link updateCustomerAddress} method.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type UpdateCustomerAddressMutation = "
            },
            {
              "kind": "Content",
              "text": "{\n    updateCustomerAddress: "
            },
            {
              "kind": "Reference",
              "text": "Mutation",
              "canonicalReference": "@vue-storefront/magento-types!Mutation:interface"
            },
            {
              "kind": "Content",
              "text": "['updateCustomerAddress'];\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "UpdateCustomerAddressMutation",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!UpdateCustomerAddressResponse:type",
          "docComment": "/**\n * updateCustomerAddress response type\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type UpdateCustomerAddressResponse<T extends "
            },
            {
              "kind": "Reference",
              "text": "DeepPartial",
              "canonicalReference": "ts-essentials!DeepPartial:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "UpdateCustomerAddressMutation",
              "canonicalReference": "@vue-storefront/magento-sdk!UpdateCustomerAddressMutation:type"
            },
            {
              "kind": "Content",
              "text": "> "
            },
            {
              "kind": "Content",
              "text": "= "
            },
            {
              "kind": "Reference",
              "text": "UpdateCustomerAddressMutation",
              "canonicalReference": "@vue-storefront/magento-sdk!UpdateCustomerAddressMutation:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "ApolloQueryResult",
              "canonicalReference": "@apollo/client/core!ApolloQueryResult:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "UpdateCustomerAddressResponse",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 8,
            "endIndex": 10
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-sdk!updateCustomerEmail:function(1)",
          "docComment": "/**\n * Method to update customer email\n *\n * @remarks\n *\n * This method sends a POST request to the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/updateCustomerEmail | updateCustomerEmail} endpoint of the Vue Storefront API Middleware. The default GraphQL query used by this method can be found {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/updateCustomerEmail | here}.\n *\n * @param params - Parameter object which can be used with this method. Refer to its type definition to learn about possible properties.\n *\n * @param options - Options that can be passed to additionally configure the request or customize the logic in a plugin.\n *\n * @typeParam Res - Customizable response interface to be used with custom queries.\n *\n * @returns Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/UpdateCustomerEmailResponse | UpdateCustomerEmailResponse}.\n *\n * @example\n *\n * Simple usage:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // update customer\n * const result = await sdk.magento.updateCustomerEmail({ email: \"johndoe@example.com\", password: \"hunter2\" });\n * ```\n *\n * @example\n *\n * Creating a custom GraphQL query for updating customer\n * ```ts\n * module.exports = {\n *   integrations: {\n *     magento: {\n *       customQueries: {\n *         'update-customer-email-custom-query': ({ variables, metadata }) => ({\n *            variables,\n *            query: `\n *              mutation updateCustomerEmail($email: String!, $password: String!) {\n *                updateCustomerEmail(email: $email, password: $password){\n *                  customer {\n *                    ${metadata.fields}\n *                  }\n *                }\n *              }\n *            `\n *         }),\n *       },\n *     }\n *   }\n * };\n * ```\n *\n * @example\n *\n * Using a custom GraphQL query to update customer\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n * // reduce the amount of fields returned by the query, when compared to the default query\n * const customQuery = {\n *   updateCustomerEmail: 'update-customer-email-custom-query',\n *   metadata: {\n *     fields: 'email firstname'\n *   }\n * };\n *\n * const result = await sdk.magento.updateCustomerEmail({ email: \"johndoe@example.com\", password: \"hunter2\" }, { customQuery });\n *\n * // Result will contain only the fields specified in the custom query.\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function updateCustomerEmail<RES extends "
            },
            {
              "kind": "Reference",
              "text": "UpdateCustomerEmailResponse",
              "canonicalReference": "@vue-storefront/magento-sdk!UpdateCustomerEmailResponse:type"
            },
            {
              "kind": "Content",
              "text": ">(params: "
            },
            {
              "kind": "Reference",
              "text": "UpdateCustomerEmailMutationVariables",
              "canonicalReference": "@vue-storefront/magento-types!UpdateCustomerEmailMutationVariables:type"
            },
            {
              "kind": "Content",
              "text": ", options?: "
            },
            {
              "kind": "Reference",
              "text": "MethodOptions",
              "canonicalReference": "@vue-storefront/magento-sdk!MethodOptions:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CustomQuery",
              "canonicalReference": "@vue-storefront/magento-sdk!CustomQuery:type"
            },
            {
              "kind": "Content",
              "text": "<'updateCustomerEmail'>>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<RES>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 10,
            "endIndex": 12
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "params",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "RES",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "updateCustomerEmail"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!UpdateCustomerEmailMutation:type",
          "docComment": "/**\n * mutation type for the {@link updateCustomerEmail} method.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type UpdateCustomerEmailMutation = "
            },
            {
              "kind": "Content",
              "text": "{\n    updateCustomerEmail: "
            },
            {
              "kind": "Reference",
              "text": "Mutation",
              "canonicalReference": "@vue-storefront/magento-types!Mutation:interface"
            },
            {
              "kind": "Content",
              "text": "['updateCustomerEmail'];\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "UpdateCustomerEmailMutation",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!UpdateCustomerEmailResponse:type",
          "docComment": "/**\n * updateCustomerEmail response type\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type UpdateCustomerEmailResponse<T extends "
            },
            {
              "kind": "Reference",
              "text": "DeepPartial",
              "canonicalReference": "ts-essentials!DeepPartial:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "UpdateCustomerEmailMutation",
              "canonicalReference": "@vue-storefront/magento-sdk!UpdateCustomerEmailMutation:type"
            },
            {
              "kind": "Content",
              "text": "> "
            },
            {
              "kind": "Content",
              "text": "= "
            },
            {
              "kind": "Reference",
              "text": "UpdateCustomerEmailMutation",
              "canonicalReference": "@vue-storefront/magento-sdk!UpdateCustomerEmailMutation:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "ApolloQueryResult",
              "canonicalReference": "@apollo/client/core!ApolloQueryResult:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "UpdateCustomerEmailResponse",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 8,
            "endIndex": 10
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!UpdateCustomerMutation:type",
          "docComment": "/**\n * mutation type for the {@link updateCustomer} method.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type UpdateCustomerMutation = "
            },
            {
              "kind": "Content",
              "text": "{\n    updateCustomerV2: "
            },
            {
              "kind": "Reference",
              "text": "Mutation",
              "canonicalReference": "@vue-storefront/magento-types!Mutation:interface"
            },
            {
              "kind": "Content",
              "text": "['updateCustomerV2'];\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "UpdateCustomerMutation",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!UpdateCustomerResponse:type",
          "docComment": "/**\n * updateCustomer response type\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type UpdateCustomerResponse<T extends "
            },
            {
              "kind": "Reference",
              "text": "DeepPartial",
              "canonicalReference": "ts-essentials!DeepPartial:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "UpdateCustomerMutation",
              "canonicalReference": "@vue-storefront/magento-sdk!UpdateCustomerMutation:type"
            },
            {
              "kind": "Content",
              "text": "> "
            },
            {
              "kind": "Content",
              "text": "= "
            },
            {
              "kind": "Reference",
              "text": "UpdateCustomerMutation",
              "canonicalReference": "@vue-storefront/magento-sdk!UpdateCustomerMutation:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "FetchResult",
              "canonicalReference": "@apollo/client/link/core!FetchResult:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "UpdateCustomerResponse",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 8,
            "endIndex": 10
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-sdk!upsellProducts:function(1)",
          "docComment": "/**\n * Method to get upsell products for a given product.\n *\n * @remarks\n *\n * This method sends a GET request to the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/upsellProducts | upsellProducts} endpoint of the Vue Storefront API Middleware. The default GraphQL query used by this method can be found {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/upsellProductQuery | here}.\n *\n * @param params - Parameter object which can be used with this method. Refer to its type definition to learn about possible properties.\n *\n * @param options - Options that can be passed to additionally configure the request or customize the logic in a plugin.\n *\n * @typeParam Res - Customizable response interface to be used with custom queries.\n *\n * @returns Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/UpsellProductsResponse | UpsellProductsResponse}.\n *\n * @example\n *\n * Simple usage without filters, sorting or pagination:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // fetch list of upsell-products with default parameters\n * const upsellProducts = await sdk.magento.upsellProducts({});\n * ```\n *\n * @example\n *\n * Usage with filters, sorting and pagination:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // make a request to fetch list of products with upsell products\n * const upsellProducts = await sdk.magento.upsellProducts({\n *  pageSize: 20,\n *  currentPage: 1,\n *  filter: {\n *    sku: {\n *      eq: PRODUCT_SKU\n *    }\n *  }\n * });\n * ```\n *\n * @example\n *\n * Creating a custom GraphQL query for getting upsellProducts.\n * ```ts\n * module.exports = {\n *   integrations: {\n *     magento: {\n *       customQueries: {\n *         'upsell-products-custom-query': ({ variables, metadata }) => ({\n *            variables,\n *            query: `\n *              query upsellProducts(\n *                $search: String = \"\",\n *                $filter: ProductAttributeFilterInput,\n *                $pageSize: Int = 10,\n *                $currentPage: Int = 1,\n *                $sort: ProductAttributeSortInput\n *              ) {\n *                products(search: $search, filter: $filter, sort: $sort, pageSize: $pageSize, currentPage: $currentPage) {\n *                  ${metadata.fields}\n *                }\n *              }\n *            `\n *         }),\n *       },\n *     }\n *   }\n * };\n * ```\n *\n * @example\n *\n * Using a custom GraphQL query to fetch upsell-products.\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n * const customQuery = {\n *  upsellProducts: 'upsell-products-custom-query',\n *    metadata: {\n *      fields: 'items { sku name upsell_products { sku } }'\n *    }\n * };\n *\n * const upsellProducts = await sdk.magento.upsellProducts({\n *  filter: {\n *    sku: {\n *      eq: 'some-sku' // optional SKU filter\n *    }\n *  }\n * }, { customQuery });\n *\n * // upsellProducts will contain only the fields specified in the custom query.\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function upsellProducts<RES extends "
            },
            {
              "kind": "Reference",
              "text": "UpsellProductsResponse",
              "canonicalReference": "@vue-storefront/magento-sdk!UpsellProductsResponse:type"
            },
            {
              "kind": "Content",
              "text": ">(params: "
            },
            {
              "kind": "Reference",
              "text": "GetProductSearchParams",
              "canonicalReference": "@vue-storefront/magento-types!GetProductSearchParams:type"
            },
            {
              "kind": "Content",
              "text": ", options?: "
            },
            {
              "kind": "Reference",
              "text": "MethodOptions",
              "canonicalReference": "@vue-storefront/magento-sdk!MethodOptions:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CustomQuery",
              "canonicalReference": "@vue-storefront/magento-sdk!CustomQuery:type"
            },
            {
              "kind": "Content",
              "text": "<'upsellProducts'>>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<RES>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 10,
            "endIndex": 12
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "params",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "RES",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "upsellProducts"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!UpsellProductsQuery:type",
          "docComment": "/**\n * query type for the {@link upsellProducts} method.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type UpsellProductsQuery = "
            },
            {
              "kind": "Content",
              "text": "{\n    products: "
            },
            {
              "kind": "Reference",
              "text": "Query",
              "canonicalReference": "@vue-storefront/magento-types!Query:interface"
            },
            {
              "kind": "Content",
              "text": "['products'];\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "UpsellProductsQuery",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!UpsellProductsResponse:type",
          "docComment": "/**\n * Upsell Products response type\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type UpsellProductsResponse<T extends "
            },
            {
              "kind": "Reference",
              "text": "DeepPartial",
              "canonicalReference": "ts-essentials!DeepPartial:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "UpsellProductsQuery",
              "canonicalReference": "@vue-storefront/magento-sdk!UpsellProductsQuery:type"
            },
            {
              "kind": "Content",
              "text": "> "
            },
            {
              "kind": "Content",
              "text": "= "
            },
            {
              "kind": "Reference",
              "text": "UpsellProductsQuery",
              "canonicalReference": "@vue-storefront/magento-sdk!UpsellProductsQuery:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "ApolloQueryResult",
              "canonicalReference": "@apollo/client/core!ApolloQueryResult:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "UpsellProductsResponse",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 8,
            "endIndex": 10
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-sdk!wishlistItemsCount:function(1)",
          "docComment": "/**\n * Method to count items in the wishlist\n *\n * @remarks\n *\n * This method sends a POST request to the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/wishlistItemsCount | wishlistItemsCount} endpoint of the Vue Storefront API Middleware. The default GraphQL query used by this method can be found {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/wishlist | here}.\n *\n * @param options - Options that can be passed to additionally configure the request or customize the logic in a plugin.\n *\n * @typeParam Res - Customizable response interface to be used with custom queries.\n *\n * @returns Returns a representation of the {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/WishlistItemsCountResponse | WishlistItemsCountResponse}.\n *\n * @example\n *\n * Simple usage:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // returns items counter of each wishlist for currently logged in customer\n * const response = await sdk.magento.wishlistItemsCount();\n * // response.data?.customer!.wishlists - array with object containing items counter.\n * // response.data?.customer!.wishlists[X]!.items_count - items_counter for each selected wishlist.\n * // index of element in the array isn't equal wishlist's id in the magento.\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function wishlistItemsCount<RES extends "
            },
            {
              "kind": "Reference",
              "text": "WishlistItemsCountResponse",
              "canonicalReference": "@vue-storefront/magento-sdk!WishlistItemsCountResponse:type"
            },
            {
              "kind": "Content",
              "text": ">(options?: "
            },
            {
              "kind": "Reference",
              "text": "MethodBaseOptions",
              "canonicalReference": "@vue-storefront/magento-sdk!MethodBaseOptions:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<RES>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "RES",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "wishlistItemsCount"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-sdk!WishlistItemsCountResponse:type",
          "docComment": "/**\n * wishlistItemsCount response type\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type WishlistItemsCountResponse<T extends "
            },
            {
              "kind": "Reference",
              "text": "DeepPartial",
              "canonicalReference": "ts-essentials!DeepPartial:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "WishlistQuery",
              "canonicalReference": "@vue-storefront/magento-types!WishlistQuery:type"
            },
            {
              "kind": "Content",
              "text": "> "
            },
            {
              "kind": "Content",
              "text": "= "
            },
            {
              "kind": "Reference",
              "text": "WishlistQuery",
              "canonicalReference": "@vue-storefront/magento-types!WishlistQuery:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "ApolloQueryResult",
              "canonicalReference": "@apollo/client/core!ApolloQueryResult:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "WishlistItemsCountResponse",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 8,
            "endIndex": 10
          }
        }
      ]
    }
  ]
}
