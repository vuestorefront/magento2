{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.18.1",
    "schemaVersion": 1004,
    "oldestForwardsCompatibleVersion": 1001,
    "tsdocConfig": {
      "$schema": "https://developer.microsoft.com/json-schemas/tsdoc/v0/tsdoc.schema.json",
      "noStandardTags": true,
      "tagDefinitions": [
        {
          "tagName": "@alpha",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@beta",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@defaultValue",
          "syntaxKind": "block"
        },
        {
          "tagName": "@decorator",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@deprecated",
          "syntaxKind": "block"
        },
        {
          "tagName": "@eventProperty",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@example",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@experimental",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@inheritDoc",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@internal",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@label",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@link",
          "syntaxKind": "inline",
          "allowMultiple": true
        },
        {
          "tagName": "@override",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@packageDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@param",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@privateRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@public",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@readonly",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@remarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@returns",
          "syntaxKind": "block"
        },
        {
          "tagName": "@sealed",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@see",
          "syntaxKind": "block"
        },
        {
          "tagName": "@throws",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@typeParam",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@virtual",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@betaDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@internalRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@preapproved",
          "syntaxKind": "modifier"
        }
      ],
      "supportForTags": {
        "@alpha": true,
        "@beta": true,
        "@defaultValue": true,
        "@decorator": true,
        "@deprecated": true,
        "@eventProperty": true,
        "@example": true,
        "@experimental": true,
        "@inheritDoc": true,
        "@internal": true,
        "@label": true,
        "@link": true,
        "@override": true,
        "@packageDocumentation": true,
        "@param": true,
        "@privateRemarks": true,
        "@public": true,
        "@readonly": true,
        "@remarks": true,
        "@returns": true,
        "@sealed": true,
        "@see": true,
        "@throws": true,
        "@typeParam": true,
        "@virtual": true,
        "@betaDocumentation": true,
        "@internalRemarks": true,
        "@preapproved": true
      }
    }
  },
  "kind": "Package",
  "canonicalReference": "@vue-storefront/magento-api!",
  "docComment": "/**\n * `api-client` of Magento 2 integration.\n *\n * @remarks\n *\n * The `@vue-storefront/magento-api` library includes Apollo Client, GraphQL operations and Middleware endpoints that allow you to communicate with Magento.\n *\n * @packageDocumentation\n */\n",
  "name": "@vue-storefront/magento-api",
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "@vue-storefront/magento-api!",
      "name": "",
      "members": [
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-api!addBundleProductsToCart:function(1)",
          "docComment": "/**\n * Add bundle products to cart.\n *\n * @example\n *\n * Adding bundle products to cart with default parameters.\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * const cart = await sdk.magento.addBundleProductsToCart(\n *   {\n *     cart_id: '123',\n *     cart_items: [\n *      {\n *        data: {\n *          quantity: 1,\n *          sku: TEST_BUNDLE_SKU,\n *        },\n *        bundle_options: [\n *          {\n *            id: 1,\n *            quantity: 1,\n *            value: ['1'],\n *          },\n *          {\n *            id: 2,\n *            quantity: 1,\n *            value: ['4'],\n *          },\n *          {\n *            id: 3,\n *            quantity: 1,\n *            value: ['5'],\n *          },\n *          {\n *            id: 4,\n *            quantity: 1,\n *            value: ['8'],\n *          },\n *     ]\n *   }\n * );\n * ```\n *\n * @example\n *\n * Creating a custom GraphQL query for adding bundle products to cart\n * ```ts\n * module.exports = {\n *   integrations: {\n *     magento: {\n *       customQueries: {\n *         'add-bundle-products-to-cart-custom-query': ({ variables, metadata }) => ({\n *            variables,\n *            query: `\n *              mutation addBundleProductsToCart($input: AddBundleProductsToCartInput) {\n *                addBundleProductsToCart(input: $input) {\n *                  cart {\n *                    ${metadata.fields}\n *                  }\n *                }\n *              }`,\n *         }),\n *       },\n *     }\n *   }\n * };\n * ```\n *\n * @example\n *\n * Using a custom GraphQL query to modify response containing the cart, which is sent as part of the adding product to cart mutation\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n * // reduce the amount of fields returned by the query, when compared to the default query\n * const customQuery = {\n *   cart: 'add-bundle-products-to-cart-custom-query',\n *   metadata: {\n *     fields: 'id items { uid }'\n *   }\n * };\n *\n *\n * const cart = await sdk.magento.addBundleProductsToCart(\n *   {\n *    // use the payload from the previous example\n *   },\n *   customQuery\n * );\n *\n * // Result will contain only the fields specified in the custom query.\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function addBundleProductsToCart(context: "
            },
            {
              "kind": "Reference",
              "text": "Context",
              "canonicalReference": "@vue-storefront/magento-api!Context:interface"
            },
            {
              "kind": "Content",
              "text": ", input: "
            },
            {
              "kind": "Reference",
              "text": "AddBundleProductsToCartInput",
              "canonicalReference": "@vue-storefront/magento-types!AddBundleProductsToCartInput:interface"
            },
            {
              "kind": "Content",
              "text": ", customQuery?: "
            },
            {
              "kind": "Reference",
              "text": "CustomQuery",
              "canonicalReference": "@vue-storefront/magento-types!CustomQuery:type"
            },
            {
              "kind": "Content",
              "text": ", customHeaders?: "
            },
            {
              "kind": "Reference",
              "text": "CustomHeaders",
              "canonicalReference": "@vue-storefront/magento-types!CustomHeaders:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "FetchResult",
              "canonicalReference": "@apollo/client/link/core!FetchResult:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "AddBundleProductsToCartMutation",
              "canonicalReference": "@vue-storefront/magento-types!AddBundleProductsToCartMutation:type"
            },
            {
              "kind": "Content",
              "text": ">>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 15
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "context",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "input",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "customQuery",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            },
            {
              "parameterName": "customHeaders",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              }
            }
          ],
          "name": "addBundleProductsToCart"
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-api!addConfigurableProductsToCart:function(1)",
          "docComment": "/**\n * Add configurable products to cart.\n *\n * @example\n *\n * Adding configurable products to cart with default parameters.\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * const cart = await sdk.magento.addConfigurableProductsToCart(\n *   {\n *     cart_id: '123',\n *     cart_items: [\n *       {\n *        data: {\n *          quantity: 1,\n *          sku: 'MH01-XS-Black',\n *        },\n *        parent_sku: 'MH01',\n *        customizable_options: [],\n *       }\n *     ]\n *   }\n * );\n * ```\n *\n * @example\n *\n * Creating a custom GraphQL query for adding configurable products to cart\n * ```ts\n * module.exports = {\n *   integrations: {\n *     magento: {\n *       customQueries: {\n *         'add-configurable-products-to-cart-custom-query': ({ variables, metadata }) => ({\n *            variables,\n *            query: `\n *              mutation addConfigurableProductsToCart($input: AddConfigurableProductsToCartInput) {\n *                addConfigurableProductsToCart(input: $input) {\n *                  cart {\n *                    ${metadata.fields}\n *                  }\n *                }\n *              }`,\n *         }),\n *       },\n *     }\n *   }\n * };\n * ```\n *\n * @example\n *\n * Using a custom GraphQL query to modify response containing the cart, which is sent as part of the adding product to cart mutation\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n * // reduce the amount of fields returned by the query, when compared to the default query\n * const customQuery = {\n *   cart: 'add-configurable-products-to-cart-custom-query',\n *   metadata: {\n *     fields: 'id items { uid }'\n *   }\n * };\n *\n *\n * const cart = await sdk.magento.addConfigurableProductsToCart(\n *   {\n *     cart_id: '123',\n *     cart_items: [\n *       {\n *        data: {\n *          quantity: 1,\n *          sku: 'MH01-XS-Black',\n *        },\n *        parent_sku: 'MH01',\n *        customizable_options: [],\n *       }\n *     ]\n *   },\n *   customQuery\n * );\n *\n * // Result will contain only the fields specified in the custom query.\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function addConfigurableProductsToCart(context: "
            },
            {
              "kind": "Reference",
              "text": "Context",
              "canonicalReference": "@vue-storefront/magento-api!Context:interface"
            },
            {
              "kind": "Content",
              "text": ", input: "
            },
            {
              "kind": "Reference",
              "text": "AddConfigurableProductsToCartInput",
              "canonicalReference": "@vue-storefront/magento-types!AddConfigurableProductsToCartInput:interface"
            },
            {
              "kind": "Content",
              "text": ", customQuery?: "
            },
            {
              "kind": "Reference",
              "text": "CustomQuery",
              "canonicalReference": "@vue-storefront/magento-types!CustomQuery:type"
            },
            {
              "kind": "Content",
              "text": ", customHeaders?: "
            },
            {
              "kind": "Reference",
              "text": "CustomHeaders",
              "canonicalReference": "@vue-storefront/magento-types!CustomHeaders:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "FetchResult",
              "canonicalReference": "@apollo/client/link/core!FetchResult:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "AddConfigurableProductsToCartMutation",
              "canonicalReference": "@vue-storefront/magento-types!AddConfigurableProductsToCartMutation:type"
            },
            {
              "kind": "Content",
              "text": ">>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 15
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "context",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "input",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "customQuery",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            },
            {
              "parameterName": "customHeaders",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              }
            }
          ],
          "name": "addConfigurableProductsToCart"
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-api!addDownloadableProductsToCart:function(1)",
          "docComment": "/**\n * Adds a set of downloadable products to a specified cart\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function addDownloadableProductsToCart(context: "
            },
            {
              "kind": "Reference",
              "text": "Context",
              "canonicalReference": "@vue-storefront/magento-api!Context:interface"
            },
            {
              "kind": "Content",
              "text": ", input: "
            },
            {
              "kind": "Reference",
              "text": "AddDownloadableProductsToCartInput",
              "canonicalReference": "@vue-storefront/magento-types!AddDownloadableProductsToCartInput:interface"
            },
            {
              "kind": "Content",
              "text": ", customQuery?: "
            },
            {
              "kind": "Reference",
              "text": "CustomQuery",
              "canonicalReference": "@vue-storefront/magento-types!CustomQuery:type"
            },
            {
              "kind": "Content",
              "text": ", customHeaders?: "
            },
            {
              "kind": "Reference",
              "text": "CustomHeaders",
              "canonicalReference": "@vue-storefront/magento-types!CustomHeaders:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "FetchResult",
              "canonicalReference": "@apollo/client/link/core!FetchResult:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "AddDownloadableProductsToCartMutation",
              "canonicalReference": "@vue-storefront/magento-types!AddDownloadableProductsToCartMutation:type"
            },
            {
              "kind": "Content",
              "text": ">>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 15
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "context",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "input",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "customQuery",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            },
            {
              "parameterName": "customHeaders",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              }
            }
          ],
          "name": "addDownloadableProductsToCart"
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-api!addProductsToCart:function(1)",
          "docComment": "/**\n * Add products to cart.\n *\n * @example\n *\n * Simple usage:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // add products to cart with default parameters (returns cart)\n * const cart = await sdk.magento.addProductsToCart(\n *   {\n *     cartId: '123',\n *     cartItems: [\n *       {\n *         sku: 'WSH12',\n *         quantity: 1,\n *         selected_options: [\n *           // option IDs retrieved from product\n *           'Y29uZmlndXJhYmxlLzkzLzUz',\n *           'Y29uZmlndXJhYmxlLzE0NC8xNzE='\n *         ]\n *       }\n *     ]\n *   }\n * );\n * ```\n *\n * @example\n *\n * Creating a custom GraphQL query for adding products to cart\n * ```ts\n * module.exports = {\n *   integrations: {\n *     magento: {\n *       customQueries: {\n *         'add-products-to-cart-custom-query': ({ variables, metadata }) => ({\n *            variables,\n *            query: `\n *              mutation addProductsToCart($cartId: String!, $cartItems: [CartItemInput!]!) {\n *                addProductsToCart(cartId: $cartId, cartItems: $cartItems) {\n *                  cart {\n *                    ${metadata.fields}\n *                  }\n *                }\n *              }`\n *\n *         }),\n *       },\n *     }\n *   }\n * };\n * ```\n *\n * @example\n *\n * Using a custom GraphQL query to modify response containing the cart, which is sent as part of the adding product to cart mutation\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n * // reduce the amount of fields returned by the query, when compared to the default query\n * const customQuery = {\n *   cart: 'add-products-to-cart-custom-query',\n *   metadata: {\n *     fields: 'id items { uid }'\n *   }\n * };\n *\n *\n * const cart = await sdk.magento.addProductsToCart(\n *   {\n *     cartId: '123',\n *     cartItems: [\n *       {\n *         sku: 'WSH12',\n *         quantity: 1,\n *         selected_options: [\n *           'Y29uZmlndXJhYmxlLzkzLzUz',\n *           'Y29uZmlndXJhYmxlLzE0NC8xNzE='\n *         ]\n *       }\n *     ]\n *   },\n *   customQuery\n * );\n *\n * // Result will contain only the fields specified in the custom query.\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function addProductsToCart(context: "
            },
            {
              "kind": "Reference",
              "text": "Context",
              "canonicalReference": "@vue-storefront/magento-api!Context:interface"
            },
            {
              "kind": "Content",
              "text": ", input: "
            },
            {
              "kind": "Reference",
              "text": "AddProductsToCartInput",
              "canonicalReference": "@vue-storefront/magento-types!AddProductsToCartInput:type"
            },
            {
              "kind": "Content",
              "text": ", customQuery?: "
            },
            {
              "kind": "Reference",
              "text": "CustomQuery",
              "canonicalReference": "@vue-storefront/magento-types!CustomQuery:type"
            },
            {
              "kind": "Content",
              "text": ", customHeaders?: "
            },
            {
              "kind": "Reference",
              "text": "CustomHeaders",
              "canonicalReference": "@vue-storefront/magento-types!CustomHeaders:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "FetchResult",
              "canonicalReference": "@apollo/client/link/core!FetchResult:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "AddProductsToCartMutation",
              "canonicalReference": "@vue-storefront/magento-types!AddProductsToCartMutation:type"
            },
            {
              "kind": "Content",
              "text": ">>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 15
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "context",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "input",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "customQuery",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            },
            {
              "parameterName": "customHeaders",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              }
            }
          ],
          "name": "addProductsToCart"
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-api!addProductToWishList:function(1)",
          "docComment": "/**\n * Add products to wishlist\n *\n * @example\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * const wishlist = await sdk.magento.addProductToWishList({\n *   // Wishlist ID\n *   id: '258',\n *   // Products to add to wishlist with given ID\n *   items: [{quantity: 1, sku: 'WSH12'}]\n * });\n * ```\n *\n * @example\n *\n * Creating a custom GraphQL query for searching categories\n * ```ts\n * module.exports = {\n *   integrations: {\n *     magento: {\n *       customQueries: {\n *         'add-product-to-wishlist-custom-query': ({ variables, metadata }) => ({\n *           variables,\n *           query: `\n *             mutation addProductsToWishlist($id: ID!, $items: [WishlistItemInput!]!) {\n *               addProductsToWishlist(wishlistId: $id, wishlistItems: $items) {\n *                 wishlist {\n *                   ${metadata.fields}\n *                 }\n *               }\n *             }`\n *         }),\n *       },\n *     }\n *   }\n * }\n * ```\n *\n * @example\n *\n * Using a custom GraphQL query (mutation) to add products to wishlist\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n * const customQuery = {\n *    addProductsToWishList: 'add-product-to-wishlist-custom-query',\n *    metadata: {\n *      fields: 'id items_count'\n *    }\n * };\n *\n * const result = await sdk.magento.addProductToWishList({\n *  id: '258',\n *  items: [{ quantity: 1, sku: '258'}]\n * }, customQuery);\n *\n * // Returned wishlist will contain only the fields specified in the custom query.\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function addProductToWishList(context: "
            },
            {
              "kind": "Reference",
              "text": "Context",
              "canonicalReference": "@vue-storefront/magento-api!Context:interface"
            },
            {
              "kind": "Content",
              "text": ", input: "
            },
            {
              "kind": "Reference",
              "text": "AddProductsToWishlistMutationVariables",
              "canonicalReference": "@vue-storefront/magento-types!AddProductsToWishlistMutationVariables:type"
            },
            {
              "kind": "Content",
              "text": ", customQuery?: "
            },
            {
              "kind": "Reference",
              "text": "CustomQuery",
              "canonicalReference": "@vue-storefront/magento-types!CustomQuery:type"
            },
            {
              "kind": "Content",
              "text": ", customHeaders?: "
            },
            {
              "kind": "Reference",
              "text": "CustomHeaders",
              "canonicalReference": "@vue-storefront/magento-types!CustomHeaders:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "FetchResult",
              "canonicalReference": "@apollo/client/link/core!FetchResult:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "AddProductsToWishlistMutation",
              "canonicalReference": "@vue-storefront/magento-types!AddProductsToWishlistMutation:type"
            },
            {
              "kind": "Content",
              "text": ">>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 15
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "context",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "input",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "customQuery",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            },
            {
              "parameterName": "customHeaders",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              }
            }
          ],
          "name": "addProductToWishList"
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-api!addSimpleProductsToCart:function(1)",
          "docComment": "/**\n * Add simple products to cart.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function addSimpleProductsToCart(context: "
            },
            {
              "kind": "Reference",
              "text": "Context",
              "canonicalReference": "@vue-storefront/magento-api!Context:interface"
            },
            {
              "kind": "Content",
              "text": ", input: "
            },
            {
              "kind": "Reference",
              "text": "AddSimpleProductsToCartInput",
              "canonicalReference": "@vue-storefront/magento-types!AddSimpleProductsToCartInput:interface"
            },
            {
              "kind": "Content",
              "text": ", customQuery?: "
            },
            {
              "kind": "Reference",
              "text": "CustomQuery",
              "canonicalReference": "@vue-storefront/magento-types!CustomQuery:type"
            },
            {
              "kind": "Content",
              "text": ", customHeaders?: "
            },
            {
              "kind": "Reference",
              "text": "CustomHeaders",
              "canonicalReference": "@vue-storefront/magento-types!CustomHeaders:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "FetchResult",
              "canonicalReference": "@apollo/client/link/core!FetchResult:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "AddSimpleProductsToCartMutation",
              "canonicalReference": "@vue-storefront/magento-types!AddSimpleProductsToCartMutation:type"
            },
            {
              "kind": "Content",
              "text": ">>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 15
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "context",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "input",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "customQuery",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            },
            {
              "parameterName": "customHeaders",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              }
            }
          ],
          "name": "addSimpleProductsToCart"
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-api!addVirtualProductsToCart:function(1)",
          "docComment": "/**\n * Adds a set of virtual products to a specified cart\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function addVirtualProductsToCart(context: "
            },
            {
              "kind": "Reference",
              "text": "Context",
              "canonicalReference": "@vue-storefront/magento-api!Context:interface"
            },
            {
              "kind": "Content",
              "text": ", input: "
            },
            {
              "kind": "Reference",
              "text": "AddVirtualProductsToCartInput",
              "canonicalReference": "@vue-storefront/magento-types!AddVirtualProductsToCartInput:interface"
            },
            {
              "kind": "Content",
              "text": ", customQuery?: "
            },
            {
              "kind": "Reference",
              "text": "CustomQuery",
              "canonicalReference": "@vue-storefront/magento-types!CustomQuery:type"
            },
            {
              "kind": "Content",
              "text": ", customHeaders?: "
            },
            {
              "kind": "Reference",
              "text": "CustomHeaders",
              "canonicalReference": "@vue-storefront/magento-types!CustomHeaders:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "FetchResult",
              "canonicalReference": "@apollo/client/link/core!FetchResult:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "AddVirtualProductsToCartMutation",
              "canonicalReference": "@vue-storefront/magento-types!AddVirtualProductsToCartMutation:type"
            },
            {
              "kind": "Content",
              "text": ">>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 15
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "context",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "input",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "customQuery",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            },
            {
              "parameterName": "customHeaders",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              }
            }
          ],
          "name": "addVirtualProductsToCart"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-api!ApiMethods:type",
          "docComment": "/**\n * Methods of the API client.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ApiMethods = "
            },
            {
              "kind": "Content",
              "text": "typeof apiMethods"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ApiMethods",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-api!applyCouponToCart:function(1)",
          "docComment": "/**\n * Apply coupon to cart\n *\n * @example\n *\n * Simple usage:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // apply coupon parameters\n * const params = {\n *  cart_id: 'test-cart-id',\n *  coupon_code: 'test-coupon-code'\n * };\n *\n * // The result of the coupon application\n * const result = await sdk.magento.applyCouponToCart(params);\n * ```\n *\n * @example\n *\n * Creating a custom GraphQL query for getting cart\n * ```ts\n * module.exports = {\n *   integrations: {\n *     magento: {\n *       customQueries: {\n *         'apply-coupon-to-cart-custom-query': ({ variables, metadata }) => ({\n *            variables,\n *            query: `\n *              mutation applyCouponToCart($input: ApplyCouponToCartInput) {\n *                applyCouponToCart(input: $input) {\n *                  ${metadata.fields}\n *                }\n *              }`\n *         }),\n *       },\n *     }\n *   }\n * };\n * ```\n *\n * @example\n *\n * Using a custom GraphQL query to fetch reduced amount of data\n * ```ts\n *  import { sdk } from '~/sdk.config.ts';\n *  const customQuery = {\n *    applyCouponToCart: 'apply-coupon-to-cart-custom-query',\n *      metadata: {\n *        fields: 'cart { applied_coupons { code } }'\n *      }\n *    };\n *\n *  const params = {\n *    cart_id: 'test-cart-id',\n *    coupon_code: 'test-coupon-code'\n *  };\n *\n *  // The result will contain only fields configured in the custom query\n *  const result = await sdk.magento.applyCouponToCart(params, customQuery);\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function applyCouponToCart(context: "
            },
            {
              "kind": "Reference",
              "text": "Context",
              "canonicalReference": "@vue-storefront/magento-api!Context:interface"
            },
            {
              "kind": "Content",
              "text": ", input: "
            },
            {
              "kind": "Reference",
              "text": "ApplyCouponToCartInput",
              "canonicalReference": "@vue-storefront/magento-types!ApplyCouponToCartInput:interface"
            },
            {
              "kind": "Content",
              "text": ", customQuery?: "
            },
            {
              "kind": "Reference",
              "text": "CustomQuery",
              "canonicalReference": "@vue-storefront/magento-types!CustomQuery:type"
            },
            {
              "kind": "Content",
              "text": ", customHeaders?: "
            },
            {
              "kind": "Reference",
              "text": "CustomHeaders",
              "canonicalReference": "@vue-storefront/magento-types!CustomHeaders:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "FetchResult",
              "canonicalReference": "@apollo/client/link/core!FetchResult:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ApplyCouponToCartMutation",
              "canonicalReference": "@vue-storefront/magento-types!ApplyCouponToCartMutation:type"
            },
            {
              "kind": "Content",
              "text": ">>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 15
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "context",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "input",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "customQuery",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            },
            {
              "parameterName": "customHeaders",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              }
            }
          ],
          "name": "applyCouponToCart"
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-api!availableStores:function(1)",
          "docComment": "/**\n * Fetch available stores\n *\n * @example\n *\n * Simple usage:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // fetch available stores\n * const result = await sdk.magento.availableStores();\n *\n * // result.data.availableStores contains the available stores\n * ```\n *\n * @example\n *\n * Creating a custom GraphQL query\n * ```ts\n * module.exports = {\n *   integrations: {\n *     magento: {\n *       customQueries: {\n *         'available-stores-custom-query': ({ variables, metadata }) => ({\n *            variables,\n *            query: `\n *              query availableStores {\n *                availableStores {\n *                  ${metadata?.fields}\n *                }\n *              }\n *            `\n *         }),\n *       },\n *     }\n *   }\n * };\n * ```\n *\n * @example\n *\n * Using a custom GraphQL query to reduce the amount of fields returned by the query\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n * // reduce the amount of fields returned by the query, when compared to the default query\n * const customQuery = {\n *   availableStores: 'available-stores-custom-query',\n *   metadata: {\n *     fields: 'code store_name'\n *   }\n * };\n *\n * const result = await sdk.magento.availableStores(customQuery);\n *\n * // result.data.availableStores contains the available stores with only the fields specified in the custom query\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function availableStores(context: "
            },
            {
              "kind": "Reference",
              "text": "Context",
              "canonicalReference": "@vue-storefront/magento-api!Context:interface"
            },
            {
              "kind": "Content",
              "text": ", customQuery?: "
            },
            {
              "kind": "Reference",
              "text": "CustomQuery",
              "canonicalReference": "@vue-storefront/magento-types!CustomQuery:type"
            },
            {
              "kind": "Content",
              "text": ", customHeaders?: "
            },
            {
              "kind": "Reference",
              "text": "CustomHeaders",
              "canonicalReference": "@vue-storefront/magento-types!CustomHeaders:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ApolloQueryResult",
              "canonicalReference": "@apollo/client/core!ApolloQueryResult:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "AvailableStoresQuery",
              "canonicalReference": "@vue-storefront/magento-types!AvailableStoresQuery:type"
            },
            {
              "kind": "Content",
              "text": ">>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 13
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "context",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "customQuery",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "customHeaders",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "name": "availableStores"
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-api!cart:function(1)",
          "docComment": "/**\n * Get cart\n *\n * @example\n *\n * Simple usage:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // fetch cart with default parameters\n * const cart = await sdk.magento.cart({ cartId: '123' });\n * ```\n *\n * @example\n *\n * Creating a custom GraphQL query for getting cart\n * ```ts\n * module.exports = {\n *   integrations: {\n *     magento: {\n *       customQueries: {\n *         'cart-custom-query': ({ variables, metadata }) => ({\n *            variables,\n *            query: `\n *              query cart($cartId: String!) {\n *                cart(cart_id:$cartId) {\n *                  ${metadata.fields}\n *                }\n *              }`\n *            `\n *         }),\n *       },\n *     }\n *   }\n * };\n * ```\n *\n * @example\n *\n * Using a custom GraphQL query to fetch cart\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n * // reduce the amount of fields returned by the query, when compared to the default query\n * const customQuery = {\n *   cart: 'cart-custom-query',\n *   metadata: {\n *     fields: 'id items { uid }'\n *   }\n * };\n *\n * const cart = await sdk.magento.cart({ cartId: '123'}, customQuery);\n *\n * // Cart will contain only the fields specified in the custom query.\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function cart(context: "
            },
            {
              "kind": "Reference",
              "text": "Context",
              "canonicalReference": "@vue-storefront/magento-api!Context:interface"
            },
            {
              "kind": "Content",
              "text": ", cartId: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", customQuery?: "
            },
            {
              "kind": "Reference",
              "text": "CustomQuery",
              "canonicalReference": "@vue-storefront/magento-types!CustomQuery:type"
            },
            {
              "kind": "Content",
              "text": ", customHeaders?: "
            },
            {
              "kind": "Reference",
              "text": "CustomHeaders",
              "canonicalReference": "@vue-storefront/magento-types!CustomHeaders:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ApolloQueryResult",
              "canonicalReference": "@apollo/client/core!ApolloQueryResult:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CartQuery",
              "canonicalReference": "@vue-storefront/magento-types!CartQuery:type"
            },
            {
              "kind": "Content",
              "text": ">>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 15
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "context",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "cartId",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "customQuery",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            },
            {
              "parameterName": "customHeaders",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              }
            }
          ],
          "name": "cart"
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-api!cartTotalQty:function(1)",
          "docComment": "/**\n * Resolve cart total quantity This method is optimized to fetch only total quantity of the cart and not the whole cart object. Do not use `cart` query inf you want to fetch only total quantity of the cart.\n *\n * @example\n *\n * Simple usage:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // fetch total quantity of the cart\n * const { data } await sdk.magento.cartTotalQty({cartId: 'some_cart_id' });\n *\n * // total quantity of the cart available in data.cart.total_quantity\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function cartTotalQty(context: "
            },
            {
              "kind": "Reference",
              "text": "Context",
              "canonicalReference": "@vue-storefront/magento-api!Context:interface"
            },
            {
              "kind": "Content",
              "text": ", cartId: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", customHeaders?: "
            },
            {
              "kind": "Reference",
              "text": "CustomHeaders",
              "canonicalReference": "@vue-storefront/magento-types!CustomHeaders:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ApolloQueryResult",
              "canonicalReference": "@apollo/client/core!ApolloQueryResult:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CartQuery",
              "canonicalReference": "@vue-storefront/magento-types!CartQuery:type"
            },
            {
              "kind": "Content",
              "text": ">>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 13
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "context",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "cartId",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "customHeaders",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "name": "cartTotalQty"
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-api!categories:function(1)",
          "docComment": "/**\n * Fetch list of all categories matching specified filters\n *\n * @example\n *\n * Simple usage:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // fetch list of categories with default parameters\n * const categories = await sdk.magento.categories({});\n * ```\n *\n * @example\n *\n * Creating a custom GraphQL query for fetching categories.\n * ```ts\n * module.exports = {\n *   integrations: {\n *     magento: {\n *       customQueries: {\n *         'categories-custom-query': ({ variables, metadata }) => ({\n *            variables,\n *            query: `\n *              query categories {\n *                 categories {\n *                   ${metadata.fields}\n *                 }\n *               }\n *            `\n *         }),\n *       },\n *     }\n *   }\n * };\n * ```\n *\n * @example\n *\n * Using a custom GraphQL query to fetch categories.\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n * const customQuery = {\n *  categories: 'categories-custom-query',\n *    metadata: {\n *      fields: 'items { uid name }'\n *    }\n * };\n *\n * const categories = await sdk.magento.categories({}, customQuery);\n *\n * // Category list will contain only the fields specified in the custom query.\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function categories(context: "
            },
            {
              "kind": "Reference",
              "text": "Context",
              "canonicalReference": "@vue-storefront/magento-api!Context:interface"
            },
            {
              "kind": "Content",
              "text": ", params: "
            },
            {
              "kind": "Reference",
              "text": "QueryCategoriesArgs",
              "canonicalReference": "@vue-storefront/magento-types!QueryCategoriesArgs:interface"
            },
            {
              "kind": "Content",
              "text": ", customQuery?: "
            },
            {
              "kind": "Reference",
              "text": "CustomQuery",
              "canonicalReference": "@vue-storefront/magento-types!CustomQuery:type"
            },
            {
              "kind": "Content",
              "text": ", customHeaders?: "
            },
            {
              "kind": "Reference",
              "text": "CustomHeaders",
              "canonicalReference": "@vue-storefront/magento-types!CustomHeaders:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ApolloQueryResult",
              "canonicalReference": "@apollo/client/core!ApolloQueryResult:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CategoriesQuery",
              "canonicalReference": "@vue-storefront/magento-api!CategoriesQuery:type"
            },
            {
              "kind": "Content",
              "text": ">>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 15
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "context",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "params",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "customQuery",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            },
            {
              "parameterName": "customHeaders",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              }
            }
          ],
          "name": "categories"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-api!CategoriesQuery:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type CategoriesQuery = "
            },
            {
              "kind": "Reference",
              "text": "Required",
              "canonicalReference": "!Required:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Pick",
              "canonicalReference": "!Pick:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Query",
              "canonicalReference": "@vue-storefront/magento-types!Query:interface"
            },
            {
              "kind": "Content",
              "text": ", \"categories\">>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "CategoriesQuery",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 7
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-api!categoryList:function(1)",
          "docComment": "/**\n * Fetch list of all categories without filters\n *\n * @deprecated\n *\n * Use `categories` method instead.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function categoryList(context: "
            },
            {
              "kind": "Reference",
              "text": "Context",
              "canonicalReference": "@vue-storefront/magento-api!Context:interface"
            },
            {
              "kind": "Content",
              "text": ", params: "
            },
            {
              "kind": "Reference",
              "text": "QueryCategoryListArgs",
              "canonicalReference": "@vue-storefront/magento-types!QueryCategoryListArgs:interface"
            },
            {
              "kind": "Content",
              "text": ", customQuery?: "
            },
            {
              "kind": "Reference",
              "text": "CustomQuery",
              "canonicalReference": "@vue-storefront/magento-types!CustomQuery:type"
            },
            {
              "kind": "Content",
              "text": ", customHeaders?: "
            },
            {
              "kind": "Reference",
              "text": "CustomHeaders",
              "canonicalReference": "@vue-storefront/magento-types!CustomHeaders:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ApolloQueryResult",
              "canonicalReference": "@apollo/client/core!ApolloQueryResult:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CategoryListQuery",
              "canonicalReference": "@vue-storefront/magento-types!CategoryListQuery:type"
            },
            {
              "kind": "Content",
              "text": ">>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 15
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "context",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "params",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "customQuery",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            },
            {
              "parameterName": "customHeaders",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              }
            }
          ],
          "name": "categoryList"
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-api!categorySearch:function(1)",
          "docComment": "/**\n * Search categories\n *\n * @example\n *\n * Simple usage without filters\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // fetch list of categories with default parameters\n * const categories = await sdk.magento.categorySearch();\n * ```\n *\n * @example\n *\n * Usage with filters\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // make a request to fetch list of categories with custom parameters\n * const details = await sdk.magento.categorySearch({\n *  filters: {\n *    category_uid: {\n *      in: ['MjA=']\n *    }\n *  }\n * });\n * ```\n *\n * @example\n *\n * Creating a custom GraphQL query for searching categories\n * ```ts\n * module.exports = {\n *   integrations: {\n *     magento: {\n *       customQueries: {\n *         'category-search-custom-query': ({ variables, metadata }) => ({\n *            variables,\n *            query: `\n *                 query categorySearch($filters: CategoryFilterInput) {\n *                   categoryList(filters: $filters) {\n *                     ${metadata.fields}\n *                   }\n *                 }\n *            `\n *         }),\n *       },\n *     }\n *   }\n * };\n * ```\n *\n * @example\n *\n * Using a custom GraphQL query to search categories.\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n * const customQuery = {\n *    categorySearch: 'category-search-custom-query',\n *    metadata: {\n *      fields: 'children_count products { total_count }'\n *    }\n * };\n *\n * const result = await sdk.magento.categorySearch({\n *  filter: {\n *    category_uid: {\n *      in: ['=MjA']\n *    }\n *  }\n * }, customQuery);\n *\n * // Details will contain only the fields specified in the custom query.\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function categorySearch(context: "
            },
            {
              "kind": "Reference",
              "text": "Context",
              "canonicalReference": "@vue-storefront/magento-api!Context:interface"
            },
            {
              "kind": "Content",
              "text": ", filters: "
            },
            {
              "kind": "Reference",
              "text": "CategorySearchQueryVariables",
              "canonicalReference": "@vue-storefront/magento-types!CategorySearchQueryVariables:type"
            },
            {
              "kind": "Content",
              "text": ", customQuery?: "
            },
            {
              "kind": "Reference",
              "text": "CustomQuery",
              "canonicalReference": "@vue-storefront/magento-types!CustomQuery:type"
            },
            {
              "kind": "Content",
              "text": ", customHeaders?: "
            },
            {
              "kind": "Reference",
              "text": "CustomHeaders",
              "canonicalReference": "@vue-storefront/magento-types!CustomHeaders:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ApolloQueryResult",
              "canonicalReference": "@apollo/client/core!ApolloQueryResult:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CategorySearchQuery",
              "canonicalReference": "@vue-storefront/magento-types!CategorySearchQuery:type"
            },
            {
              "kind": "Content",
              "text": ">>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 15
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "context",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "filters",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "customQuery",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            },
            {
              "parameterName": "customHeaders",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              }
            }
          ],
          "name": "categorySearch"
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-api!changeCustomerPassword:function(1)",
          "docComment": "/**\n * Change customer password.\n *\n * @example\n *\n * Simple usage, change customer password:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * const result = await sdk.magento.changeCustomerPassword({\n *  currentPassword: 'currentPassword',\n *  newPassword: 'newPassword'\n * });\n * ```\n *\n * @example\n *\n * Creating a custom GraphQL query for changeCustomerPassword:\n * ```ts\n * module.exports = {\n *   integrations: {\n *     magento: {\n *       customQueries: {\n *         'change-customer-password-custom-query': ({ variables, metadata }) => ({\n *            variables,\n *            query: `\n *              mutation changeCustomerPassword($currentPassword: String!, $newPassword: String!) {\n *               changeCustomerPassword(\n *                 currentPassword: $currentPassword\n *                 newPassword: $newPassword\n *               ) {\n *                 ${metadata.fields}\n *               }\n *             }\n *            `\n *         }),\n *       },\n *     }\n *   }\n * };\n * ```\n *\n * @example\n *\n * Using a custom GraphQL query to narrow down the response data:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n * // reduce the amount of fields returned by the query, when compared to the default query\n * const customQuery = {\n *   changeCustomerPassword: 'change-customer-password-custom-query',\n *   metadata: {\n *     fields: 'email'\n *   }\n * };\n *\n * const result = await sdk.magento.changeCustomerPassword({\n *  currentPassword: 'currentPassword',\n *  newPassword: 'newPassword'\n * }, customQuery);\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function changeCustomerPassword(context: "
            },
            {
              "kind": "Reference",
              "text": "Context",
              "canonicalReference": "@vue-storefront/magento-api!Context:interface"
            },
            {
              "kind": "Content",
              "text": ", params: "
            },
            {
              "kind": "Content",
              "text": "{\n    currentPassword: string;\n    newPassword: string;\n}"
            },
            {
              "kind": "Content",
              "text": ", customQuery?: "
            },
            {
              "kind": "Reference",
              "text": "CustomQuery",
              "canonicalReference": "@vue-storefront/magento-types!CustomQuery:type"
            },
            {
              "kind": "Content",
              "text": ", customHeaders?: "
            },
            {
              "kind": "Reference",
              "text": "CustomHeaders",
              "canonicalReference": "@vue-storefront/magento-types!CustomHeaders:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "FetchResult",
              "canonicalReference": "@apollo/client/link/core!FetchResult:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ChangeCustomerPasswordMutation",
              "canonicalReference": "@vue-storefront/magento-types!ChangeCustomerPasswordMutation:type"
            },
            {
              "kind": "Content",
              "text": ">>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 15
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "context",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "params",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "customQuery",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            },
            {
              "parameterName": "customHeaders",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              }
            }
          ],
          "name": "changeCustomerPassword"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@vue-storefront/magento-api!ClientConfig:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ClientConfig "
            }
          ],
          "releaseTag": "Public",
          "name": "ClientConfig",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@vue-storefront/magento-api!ClientConfig#api:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "api: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "api",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@vue-storefront/magento-api!ClientConfig#cookies:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "cookies: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        currencyCookieName: string;\n        countryCookieName: string;\n        localeCookieName: string;\n        cartCookieName: string;\n        customerCookieName: string;\n        storeCookieName: string;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "cookies",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@vue-storefront/magento-api!ClientConfig#externalCheckout:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "externalCheckout: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        enable: boolean;\n        cmsUrl: string;\n        syncUrlPath: string;\n        stores: "
                },
                {
                  "kind": "Reference",
                  "text": "Record",
                  "canonicalReference": "!Record:type"
                },
                {
                  "kind": "Content",
                  "text": "<string, {\n            cmsUrl: string;\n        }>;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "externalCheckout",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@vue-storefront/magento-api!ClientConfig#state:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "state: "
                },
                {
                  "kind": "Reference",
                  "text": "ConfigState",
                  "canonicalReference": "@vue-storefront/magento-api!ConfigState:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "state",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-api!ClientInstance:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ClientInstance = "
            },
            {
              "kind": "Reference",
              "text": "ApolloClient",
              "canonicalReference": "@apollo/client/core!ApolloClient:class"
            },
            {
              "kind": "Content",
              "text": "<any>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ClientInstance",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-api!cmsBlocks:function(1)",
          "docComment": "/**\n * Fetch cms blocks.\n *\n * @example\n *\n * Simple usage:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // fetch few cms blocks by their identifiers\n * const { data } = await sdk.magento.cmsBlocks({\n *   identifiers: ['id1', 'id2']\n * });\n *\n * // result will contain cms blocks with the specified identifiers\n * data.cmsBlocks.items.forEach(block => console.log(block.identifier));\n * ```\n *\n * @example\n *\n * Creating a custom GraphQL query\n * ```ts\n * module.exports = {\n *   integrations: {\n *     magento: {\n *       customQueries: {\n *         'cms-blocks-custom-query': ({ variables, metadata }) => ({\n *            variables,\n *            query: `\n *              query cmsBlock($identifiers: [String]) {\n *                cmsBlocks(identifiers: $identifiers) {\n *                  items {\n *                    ${metadata.fields}\n *                  }\n *                }\n *              }\n *            `\n *         }),\n *       },\n *     }\n *   }\n * };\n * ```\n *\n * @example\n *\n * Using a custom GraphQL query to reduce the amount of fields returned by the query\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n * // reduce the amount of fields returned by the query, when compared to the default query\n * // fetch only title\n * const customQuery = {\n *   cmsBlocks: 'cms-blocks-custom-query',\n *   metadata: {\n *     fields: 'title'\n *   }\n * };\n *\n * const { data } = await sdk.magento.cmsBlocks({\n *   identifiers: ['id1', 'id2']\n * }, customQuery);\n *\n * // data will contain only block titles\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function cmsBlocks(context: "
            },
            {
              "kind": "Reference",
              "text": "Context",
              "canonicalReference": "@vue-storefront/magento-api!Context:interface"
            },
            {
              "kind": "Content",
              "text": ", identifiers: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", customQuery?: "
            },
            {
              "kind": "Reference",
              "text": "CustomQuery",
              "canonicalReference": "@vue-storefront/magento-types!CustomQuery:type"
            },
            {
              "kind": "Content",
              "text": ", customHeaders?: "
            },
            {
              "kind": "Reference",
              "text": "CustomHeaders",
              "canonicalReference": "@vue-storefront/magento-types!CustomHeaders:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ApolloQueryResult",
              "canonicalReference": "@apollo/client/core!ApolloQueryResult:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CmsBlockQuery",
              "canonicalReference": "@vue-storefront/magento-types!CmsBlockQuery:type"
            },
            {
              "kind": "Content",
              "text": ">>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 15
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "context",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "identifiers",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "customQuery",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            },
            {
              "parameterName": "customHeaders",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              }
            }
          ],
          "name": "cmsBlocks"
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-api!cmsPage:function(1)",
          "docComment": "/**\n * Fetch CMS page\n *\n * @example\n *\n * Simple usage:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // fetch home page by the page identifier\n * const result = await sdk.magento.cmsPage({\n *   identifier: 'home'\n * });\n * ```\n *\n * @example\n *\n * Creating a custom GraphQL query\n * ```ts\n * module.exports = {\n *   integrations: {\n *     magento: {\n *       customQueries: {\n *         'cms-page-custom-query': ({ variables, metadata }) => ({\n *            variables,\n *            query: `\n *              query cmsPage($identifier: String) {\n *                cmsPage(identifier:$identifier) {\n *                  ${metadata?.fields}\n *                }\n *              }\n *            `\n *         }),\n *       },\n *     }\n *   }\n * };\n * ```\n *\n * @example\n *\n * Using a custom GraphQL query to reduce the amount of fields returned by the query\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n * // reduce the amount of fields to only the content and title\n * const customQuery = {\n *   cmsPage: 'cms-page-custom-query',\n *   metadata: {\n *     fields: 'title content'\n *   }\n * };\n *\n * const result = await sdk.magento.cmsPage({\n *   identifier: 'home'\n * }, customQuery);\n *\n * // result will only contain the title and content fields\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function cmsPage(context: "
            },
            {
              "kind": "Reference",
              "text": "Context",
              "canonicalReference": "@vue-storefront/magento-api!Context:interface"
            },
            {
              "kind": "Content",
              "text": ", identifier: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", customQuery?: "
            },
            {
              "kind": "Reference",
              "text": "CustomQuery",
              "canonicalReference": "@vue-storefront/magento-types!CustomQuery:type"
            },
            {
              "kind": "Content",
              "text": ", customHeaders?: "
            },
            {
              "kind": "Reference",
              "text": "CustomHeaders",
              "canonicalReference": "@vue-storefront/magento-types!CustomHeaders:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ApolloQueryResult",
              "canonicalReference": "@apollo/client/core!ApolloQueryResult:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CmsPageQuery",
              "canonicalReference": "@vue-storefront/magento-types!CmsPageQuery:type"
            },
            {
              "kind": "Content",
              "text": ">>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 15
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "context",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "identifier",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "customQuery",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            },
            {
              "parameterName": "customHeaders",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              }
            }
          ],
          "name": "cmsPage"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@vue-storefront/magento-api!Config:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface Config<T = "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "ClientConfig",
              "canonicalReference": "@vue-storefront/magento-api!ClientConfig:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "Config",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@vue-storefront/magento-api!Config#client:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "client?: "
                },
                {
                  "kind": "Reference",
                  "text": "ApolloClient",
                  "canonicalReference": "@apollo/client/core!ApolloClient:class"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "client",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@vue-storefront/magento-api!Config#customApolloHttpLinkOptions:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "customApolloHttpLinkOptions?: "
                },
                {
                  "kind": "Reference",
                  "text": "HttpOptions",
                  "canonicalReference": "@apollo/client/link/http!HttpOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "customApolloHttpLinkOptions",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@vue-storefront/magento-api!Config#customOptions:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "customOptions?: "
                },
                {
                  "kind": "Reference",
                  "text": "ApolloClientOptions",
                  "canonicalReference": "@apollo/client/core!ApolloClientOptions:type"
                },
                {
                  "kind": "Content",
                  "text": "<any>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "customOptions",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@vue-storefront/magento-api!Config#imageProvider:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "imageProvider: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "imageProvider",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@vue-storefront/magento-api!Config#magentoApiEndpoint:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "magentoApiEndpoint: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "magentoApiEndpoint",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@vue-storefront/magento-api!Config#magentoBaseUrl:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "magentoBaseUrl: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "magentoBaseUrl",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@vue-storefront/magento-api!Config#overrides:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "overrides: "
                },
                {
                  "kind": "Reference",
                  "text": "Endpoints",
                  "canonicalReference": "@vue-storefront/magento-api!Endpoints:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "overrides",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@vue-storefront/magento-api!Config#recaptcha:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "recaptcha: "
                },
                {
                  "kind": "Reference",
                  "text": "RecaptchaConfig",
                  "canonicalReference": "@vue-storefront/magento-api!RecaptchaConfig:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "recaptcha",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@vue-storefront/magento-api!Config#storage:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "storage: "
                },
                {
                  "kind": "Reference",
                  "text": "Storage",
                  "canonicalReference": "@vue-storefront/magento-api!Storage:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "storage",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 3,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-api!ConfigState:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ConfigState = "
            },
            {
              "kind": "Content",
              "text": "{\n    getCartId(): string;\n    setCartId(id?: string | null): void;\n    removeCartId(): void;\n    getCustomerToken(): string;\n    setCustomerToken(token?: string | null): void;\n    removeCustomerToken(): void;\n    getStore(): string;\n    setStore(id?: string | null): void;\n    removeStore(): void;\n    getCurrency(): string;\n    setCurrency(id?: string | null): void;\n    removeCurrency(): void;\n    getLocale(): string;\n    setLocale(id?: string | null): void;\n    removeLocale(): void;\n    getCountry(): string;\n    setCountry(id?: string | null): void;\n    removeCountry(): void;\n    getMessage<T>(): T;\n    setMessage<T>(id?: T | null): void;\n    removeMessage(): void;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ConfigState",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@vue-storefront/magento-api!Context:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface Context extends "
            },
            {
              "kind": "Reference",
              "text": "IntegrationContext",
              "canonicalReference": "@vue-storefront/middleware!IntegrationContext:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ClientInstance",
              "canonicalReference": "@vue-storefront/magento-api!ClientInstance:type"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "Config",
              "canonicalReference": "@vue-storefront/magento-api!Config:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "Endpoints",
              "canonicalReference": "@vue-storefront/magento-api!Endpoints:type"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "Context",
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 9
            }
          ]
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-api!countries:function(1)",
          "docComment": "/**\n * Fetch list of countries\n *\n * @example\n *\n * Simple usage:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // fetch list of countries\n * const result = await sdk.magento.countries();\n *\n * // result.data.countries is an array of countries\n * ```\n *\n * @example\n *\n * Creating a custom GraphQL query\n * ```ts\n * module.exports = {\n *   integrations: {\n *     magento: {\n *       customQueries: {\n *         'countries-custom-query': ({ variables, metadata }) => ({\n *            variables,\n *            query: `\n *              query countriesList {\n *                countries {\n *                  ${metadata?.fields}\n *                }\n *              }\n *            `\n *         }),\n *       },\n *     }\n *   }\n * };\n * ```\n *\n * @example\n *\n * Using a custom GraphQL query to reduce the amount of fields returned by the query\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n * // reduce the amount of fields returned by the query, when compared to the default query\n * const customQuery = {\n *   countries: 'countries-custom-query',\n *   metadata: {\n *     fields: 'full_name_english'\n *   }\n * };\n *\n * const result = await sdk.magento.countries(customQuery);\n *\n * // result.data.countries will only contain the full_name_english field\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function countries(context: "
            },
            {
              "kind": "Reference",
              "text": "Context",
              "canonicalReference": "@vue-storefront/magento-api!Context:interface"
            },
            {
              "kind": "Content",
              "text": ", customQuery?: "
            },
            {
              "kind": "Reference",
              "text": "CustomQuery",
              "canonicalReference": "@vue-storefront/magento-types!CustomQuery:type"
            },
            {
              "kind": "Content",
              "text": ", customHeaders?: "
            },
            {
              "kind": "Reference",
              "text": "CustomHeaders",
              "canonicalReference": "@vue-storefront/magento-types!CustomHeaders:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ApolloQueryResult",
              "canonicalReference": "@apollo/client/core!ApolloQueryResult:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CountriesListQuery",
              "canonicalReference": "@vue-storefront/magento-types!CountriesListQuery:type"
            },
            {
              "kind": "Content",
              "text": ">>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 13
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "context",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "customQuery",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "customHeaders",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "name": "countries"
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-api!country:function(1)",
          "docComment": "/**\n * Fetches the information about a country given its ID\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function country(context: "
            },
            {
              "kind": "Reference",
              "text": "Context",
              "canonicalReference": "@vue-storefront/magento-api!Context:interface"
            },
            {
              "kind": "Content",
              "text": ", id: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", customQuery?: "
            },
            {
              "kind": "Reference",
              "text": "CustomQuery",
              "canonicalReference": "@vue-storefront/magento-types!CustomQuery:type"
            },
            {
              "kind": "Content",
              "text": ", customHeaders?: "
            },
            {
              "kind": "Reference",
              "text": "CustomHeaders",
              "canonicalReference": "@vue-storefront/magento-types!CustomHeaders:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ApolloQueryResult",
              "canonicalReference": "@apollo/client/core!ApolloQueryResult:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CountryInformationQuery",
              "canonicalReference": "@vue-storefront/magento-types!CountryInformationQuery:type"
            },
            {
              "kind": "Content",
              "text": ">>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 15
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "context",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "id",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "customQuery",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            },
            {
              "parameterName": "customHeaders",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              }
            }
          ],
          "name": "country"
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-api!createCustomer:function(1)",
          "docComment": "/**\n * Create a new customer.\n *\n * @example\n *\n * Simple usage with basic customer data:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * const params = {\n *   email: 'john.doe@gmail.com'\n *   firstname: 'John',\n *   lastname: 'Doe',\n * }\n *\n * const result = await sdk.magento.createCustomer(params);\n * ```\n *\n * @example\n *\n * Creating a custom GraphQL query for creating a customer\n * ```ts\n * module.exports = {\n *   integrations: {\n *     magento: {\n *       customQueries: {\n *         'create-customer-custom-query': ({ variables, metadata }) => ({\n *            variables,\n *            query: `\n *              query customer {\n *                customer {\n *                  ${metadata.fields}\n *                }\n *              }\n *            `\n *         }),\n *       },\n *     }\n *   }\n * };\n * ```\n *\n * @example\n *\n * Using a custom GraphQL query to fetch customer\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n * // reduce the amount of fields returned by the query, when compared to the default query\n *\n * const customQuery = {\n *   customer: 'create customer-custom-query',\n *   metadata: {\n *     fields: 'email firstname lastname'\n *   }\n * };\n *\n * const params = {\n *   email: 'john.doe@gmail.com'\n *   firstname: 'John',\n *   lastname: 'Doe',\n * }\n *\n * const result = await sdk.magento.createCustomer(params, customQuery)\n *\n * // result will contain only the fields specified in the custom query.\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function createCustomer(context: "
            },
            {
              "kind": "Reference",
              "text": "Context",
              "canonicalReference": "@vue-storefront/magento-api!Context:interface"
            },
            {
              "kind": "Content",
              "text": ", input: "
            },
            {
              "kind": "Reference",
              "text": "CustomerCreateInput",
              "canonicalReference": "@vue-storefront/magento-types!CustomerCreateInput:interface"
            },
            {
              "kind": "Content",
              "text": ", customQuery?: "
            },
            {
              "kind": "Reference",
              "text": "CustomQuery",
              "canonicalReference": "@vue-storefront/magento-types!CustomQuery:type"
            },
            {
              "kind": "Content",
              "text": ", customHeaders?: "
            },
            {
              "kind": "Reference",
              "text": "CustomHeaders",
              "canonicalReference": "@vue-storefront/magento-types!CustomHeaders:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "FetchResult",
              "canonicalReference": "@apollo/client/link/core!FetchResult:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CreateCustomerMutation",
              "canonicalReference": "@vue-storefront/magento-types!CreateCustomerMutation:type"
            },
            {
              "kind": "Content",
              "text": ">>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 15
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "context",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "input",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "customQuery",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            },
            {
              "parameterName": "customHeaders",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              }
            }
          ],
          "name": "createCustomer"
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-api!createCustomerAddress:function(1)",
          "docComment": "/**\n * Create a customer address.\n *\n * @example\n *\n * Simple usage:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * const address: CustomerAddressInput = {\n *  city: 'some city',\n *  country_code: CountryCodeEnum.Us,\n *  default_billing: false,\n *  default_shipping: false,\n *  firstname: 'John',\n *  lastname: 'Doe',\n *  postcode: '08701',\n *  street: ['street'],\n *  telephone: '123123123',\n *  region: {\n *    region_code: 'NJ',\n *    region_id: 41,\n *    region: 'New Jersey'\n *  }\n * };\n *\n * // customer address will be created for the currently logged in customer\n * await sdk.magento.createCustomerAddress(address);\n * ```\n *\n * @example\n *\n * Creating a custom GraphQL query\n * ```ts\n * module.exports = {\n *   integrations: {\n *     magento: {\n *       customQueries: {\n *         'create-customer-address-custom-query': ({ variables, metadata }) => ({\n *            variables,\n *            query: `\n *              mutation createCustomerAddress($input: CustomerAddressInput!) {\n *                createCustomerAddress(input: $input) {\n *                  ${metadata.fields}\n *                }\n *               }\n *            `\n *         }),\n *       },\n *     }\n *   }\n * };\n * ```\n *\n * @example\n *\n * Using a custom GraphQL query to reduce the amount of data returned by the API\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n * // reduce the amount of fields returned by the query, when compared to the default query\n * const customQuery = {\n *   createCustomerAddress: 'create-customer-address-custom-query',\n *   metadata: {\n *     fields: 'id city'\n *   }\n * };\n *\n * // address parameter is the same as in the simple usage example\n * const result = await sdk.magento.createCustomerAddress(address, customQuery);\n *\n * result.data.createCustomerAddress.city; // 'some city'\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function createCustomerAddress(context: "
            },
            {
              "kind": "Reference",
              "text": "Context",
              "canonicalReference": "@vue-storefront/magento-api!Context:interface"
            },
            {
              "kind": "Content",
              "text": ", input: "
            },
            {
              "kind": "Reference",
              "text": "CustomerAddressInput",
              "canonicalReference": "@vue-storefront/magento-types!CustomerAddressInput:interface"
            },
            {
              "kind": "Content",
              "text": ", customQuery?: "
            },
            {
              "kind": "Reference",
              "text": "CustomQuery",
              "canonicalReference": "@vue-storefront/magento-types!CustomQuery:type"
            },
            {
              "kind": "Content",
              "text": ", customHeaders?: "
            },
            {
              "kind": "Reference",
              "text": "CustomHeaders",
              "canonicalReference": "@vue-storefront/magento-types!CustomHeaders:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "FetchResult",
              "canonicalReference": "@apollo/client/link/core!FetchResult:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CreateCustomerAddressMutation",
              "canonicalReference": "@vue-storefront/magento-types!CreateCustomerAddressMutation:type"
            },
            {
              "kind": "Content",
              "text": ">>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 15
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "context",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "input",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "customQuery",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            },
            {
              "parameterName": "customHeaders",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              }
            }
          ],
          "name": "createCustomerAddress"
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-api!createEmptyCart:function(1)",
          "docComment": "/**\n * Create an empty cart.\n *\n * @example\n *\n * Simple usage:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // create an empty cart\n * const cart = await sdk.magento.createEmptyCart();\n *\n * // cart id can be accessed from the response\n * const cartId = cart.data.createEmptyCart;\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function createEmptyCart(context: "
            },
            {
              "kind": "Reference",
              "text": "Context",
              "canonicalReference": "@vue-storefront/magento-api!Context:interface"
            },
            {
              "kind": "Content",
              "text": ", customHeaders?: "
            },
            {
              "kind": "Reference",
              "text": "CustomHeaders",
              "canonicalReference": "@vue-storefront/magento-types!CustomHeaders:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "FetchResult",
              "canonicalReference": "@apollo/client/link/core!FetchResult:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CreateEmptyCartMutation",
              "canonicalReference": "@vue-storefront/magento-types!CreateEmptyCartMutation:type"
            },
            {
              "kind": "Content",
              "text": ">>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "context",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "customHeaders",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "createEmptyCart"
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-api!createProductReview:function(1)",
          "docComment": "/**\n * Create product review\n *\n * @example\n *\n * Simple usage:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // create review data structure\n * const review = {\n *  sku: 'some-sku',\n *  nickname: 'john.doe',\n *  summary: 'awesome thing, whatever it is!',\n *  text: 'this is a test review',\n *  ratings: [{\n *    id: 'NA==', // base64 encoded id\n *    value_id: 'MjA=' // base64 encoded value_id\n *  }]\n * };\n *\n * const result = await sdk.magento.createProductReview(review);\n *\n * // result will contain the created review and summary data\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function createProductReview(context: "
            },
            {
              "kind": "Reference",
              "text": "Context",
              "canonicalReference": "@vue-storefront/magento-api!Context:interface"
            },
            {
              "kind": "Content",
              "text": ", input: "
            },
            {
              "kind": "Reference",
              "text": "CreateProductReviewInput",
              "canonicalReference": "@vue-storefront/magento-types!CreateProductReviewInput:interface"
            },
            {
              "kind": "Content",
              "text": ", customHeaders?: "
            },
            {
              "kind": "Reference",
              "text": "CustomHeaders",
              "canonicalReference": "@vue-storefront/magento-types!CustomHeaders:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "FetchResult",
              "canonicalReference": "@apollo/client/link/core!FetchResult:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CreateProductReviewMutation",
              "canonicalReference": "@vue-storefront/magento-types!CreateProductReviewMutation:type"
            },
            {
              "kind": "Content",
              "text": ">>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 13
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "context",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "input",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "customHeaders",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "name": "createProductReview"
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-api!currency:function(1)",
          "docComment": "/**\n * Fetch available currencies in a store.\n *\n * @example\n *\n * Simple usage:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // fetch available currencies\n * const result = await sdk.magento.currency();\n *\n * // result would be something like:\n * // {\n * //   \"data\": {\n * //     \"currency\": {\n * //       \"_currency_code\": \"EUR\",\n * //       \"_currency_symbol\": \"€\",\n * //       \"default_display_currency_code\": \"EUR\",\n * //       \"default_display_currency_symbol\": \"€\",\n * //       \"available_currency_codes\": [\n * //         \"EUR\",\n * //         \"USD\"\n * //       ],\n * //       \"exchange_rates\": [\n * //         {\n * //           \"currency_to\": \"EUR\",\n *  //          \"rate\": 1\n *  //        },\n *  //        {\n *  //          \"currency_to\": \"USD\",\n *  //          \"rate\": 1.2\n *  //        }\n *  //      ]\n *  //    }\n *  //  }\n *  // }\n * ```\n *\n * @example\n *\n * Creating a custom GraphQL query\n * ```ts\n * module.exports = {\n *   integrations: {\n *     magento: {\n *       customQueries: {\n *         'currency-custom-query': ({ variables, metadata }) => ({\n *            variables,\n *            query: `\n *              query currency {\n *                currency{\n *                  ${metadata?.fields}\n *                }\n *              }\n *            `\n *         }),\n *       },\n *     }\n *   }\n * };\n * ```\n *\n * @example\n *\n * Using a custom GraphQL query to fetch a list of currencies with limited number of fields\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n * // reduce the amount of fields returned by the query, when compared to the default query\n * const customQuery = {\n *   currency: 'currency-custom-query',\n *   metadata: {\n *     fields: '_currency_code'\n *   }\n * };\n *\n * const result = await sdk.magento.currency(customQuery);\n *\n * // result will contain only the _currency_code field\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function currency(context: "
            },
            {
              "kind": "Reference",
              "text": "Context",
              "canonicalReference": "@vue-storefront/magento-api!Context:interface"
            },
            {
              "kind": "Content",
              "text": ", customQuery?: "
            },
            {
              "kind": "Reference",
              "text": "CustomQuery",
              "canonicalReference": "@vue-storefront/magento-types!CustomQuery:type"
            },
            {
              "kind": "Content",
              "text": ", customHeaders?: "
            },
            {
              "kind": "Reference",
              "text": "CustomHeaders",
              "canonicalReference": "@vue-storefront/magento-types!CustomHeaders:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ApolloQueryResult",
              "canonicalReference": "@apollo/client/core!ApolloQueryResult:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CurrencyQuery",
              "canonicalReference": "@vue-storefront/magento-types!CurrencyQuery:type"
            },
            {
              "kind": "Content",
              "text": ">>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 13
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "context",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "customQuery",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "customHeaders",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "name": "currency"
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-api!customer:function(1)",
          "docComment": "/**\n * Get current customer information\n *\n * @example\n *\n * The `customer()` returns the currently active user. This means that the request needs to contain an authorization token, which will tell Magento whose customer data should be fetched.\n *\n * If your browser has a VSF customer cookie saved, you can just call `customer()` without any parameters - the token will be attached automatically on every request to the middleware.\n *\n * Simple usage:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // fetch customer\n * const customer = await sdk.magento.customer();\n * ```\n *\n * @example\n *\n * If you're calling `customer()` in a non-browser context (for example in integration tests) where it's not possible to save a cookie, you can attach the token manually using `customHeaders`\n *\n * Usage with manual authorization:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * const token = '123'\n * const customHeaders = { Authorization: `Bearer {token}` }\n *\n * // fetch customer\n * const customer = await sdk.magento.customer({ customHeaders });\n * ```\n *\n * @example\n *\n * Creating a custom GraphQL query for fetching customer\n * ```ts\n * module.exports = {\n *   integrations: {\n *     magento: {\n *       customQueries: {\n *         'customer-custom-query': ({ variables, metadata }) => ({\n *            variables,\n *            query: `\n *              query customer {\n *                customer {\n *                  ${metadata.fields}\n *                }\n *              }\n *            `\n *         }),\n *       },\n *     }\n *   }\n * };\n * ```\n *\n * @example\n *\n * Using a custom GraphQL query to fetch customer\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n * // reduce the amount of fields returned by the query, when compared to the default query\n * const customQuery = {\n *   customer: 'customer-custom-query',\n *   metadata: {\n *     fields: 'email firstname lastname'\n *   }\n * };\n *\n * const customer = await sdk.magento.customer(customQuery);\n *\n * // customer will contain only the fields specified in the custom query.\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function customer(context: "
            },
            {
              "kind": "Reference",
              "text": "Context",
              "canonicalReference": "@vue-storefront/magento-api!Context:interface"
            },
            {
              "kind": "Content",
              "text": ", customQuery?: "
            },
            {
              "kind": "Reference",
              "text": "CustomQuery",
              "canonicalReference": "@vue-storefront/magento-types!CustomQuery:type"
            },
            {
              "kind": "Content",
              "text": ", customHeaders?: "
            },
            {
              "kind": "Reference",
              "text": "CustomHeaders",
              "canonicalReference": "@vue-storefront/magento-types!CustomHeaders:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ApolloQueryResult",
              "canonicalReference": "@apollo/client/core!ApolloQueryResult:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CustomerQuery",
              "canonicalReference": "@vue-storefront/magento-types!CustomerQuery:type"
            },
            {
              "kind": "Content",
              "text": ">>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 13
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "context",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "customQuery",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "customHeaders",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "name": "customer"
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-api!customerCart:function(1)",
          "docComment": "/**\n * Fetch customer cart.\n *\n * @example\n *\n * Simple usage:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // fetch customer cart\n * const { data } = await sdk.magento.customerCart();\n *\n * // data contains cart details\n * const email = data?.customerCart?.email;\n *\n * ```\n *\n * @example\n *\n * Creating a custom GraphQL query for customerCart\n * ```ts\n * module.exports = {\n *   integrations: {\n *     magento: {\n *       customQueries: {\n *         'customer-cart-custom-query': ({ variables, metadata }) => ({\n *            variables,\n *            query: `\n *              query customerCart {\n *                customerCart {\n *                  ${metadata.fields}\n *                }\n *              }`\n *         }),\n *       },\n *     }\n *   }\n * };\n * ```\n *\n * @example\n *\n * Using a custom GraphQL query to reduce the amount of fields returned by the query, when compared to the default query\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n * // reduce the amount of fields returned by the query, when compared to the default query\n * const customQuery = {\n *   customerCart: 'customer-cart-custom-query',\n *   metadata: {\n *     fields: 'id email items { id sku }\n *   }\n * };\n *\n * const result = await sdk.magento.customerCart(customQuery);\n *\n * // result contains cart details with only the fields specified in the custom query\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function customerCart(context: "
            },
            {
              "kind": "Reference",
              "text": "Context",
              "canonicalReference": "@vue-storefront/magento-api!Context:interface"
            },
            {
              "kind": "Content",
              "text": ", customQuery?: "
            },
            {
              "kind": "Reference",
              "text": "CustomQuery",
              "canonicalReference": "@vue-storefront/magento-types!CustomQuery:type"
            },
            {
              "kind": "Content",
              "text": ", customHeaders?: "
            },
            {
              "kind": "Reference",
              "text": "CustomHeaders",
              "canonicalReference": "@vue-storefront/magento-types!CustomHeaders:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ApolloQueryResult",
              "canonicalReference": "@apollo/client/core!ApolloQueryResult:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CustomerCartQuery",
              "canonicalReference": "@vue-storefront/magento-types!CustomerCartQuery:type"
            },
            {
              "kind": "Content",
              "text": ">>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 13
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "context",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "customQuery",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "customHeaders",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "name": "customerCart"
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-api!customerOrders:function(1)",
          "docComment": "/**\n * Returns customer orders. To override the default query, use the `customerOrders` query key.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function customerOrders(context: "
            },
            {
              "kind": "Reference",
              "text": "Context",
              "canonicalReference": "@vue-storefront/magento-api!Context:interface"
            },
            {
              "kind": "Content",
              "text": ", searchParams: "
            },
            {
              "kind": "Reference",
              "text": "GetOrdersSearchParams",
              "canonicalReference": "@vue-storefront/magento-types!GetOrdersSearchParams:type"
            },
            {
              "kind": "Content",
              "text": ", customQuery?: "
            },
            {
              "kind": "Reference",
              "text": "CustomQuery",
              "canonicalReference": "@vue-storefront/magento-types!CustomQuery:type"
            },
            {
              "kind": "Content",
              "text": ", customHeaders?: "
            },
            {
              "kind": "Reference",
              "text": "CustomHeaders",
              "canonicalReference": "@vue-storefront/magento-types!CustomHeaders:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ApolloQueryResult",
              "canonicalReference": "@apollo/client/core!ApolloQueryResult:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CustomerOrdersQuery",
              "canonicalReference": "@vue-storefront/magento-types!CustomerOrdersQuery:type"
            },
            {
              "kind": "Content",
              "text": ">>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 15
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "context",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "searchParams",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "customQuery",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            },
            {
              "parameterName": "customHeaders",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              }
            }
          ],
          "name": "customerOrders"
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-api!customerProductReview:function(1)",
          "docComment": "/**\n * Returns product reviews created by the current customer\n *\n * @deprecated\n *\n * Use {@link https://docs.alokai.com/integrations/magento/api/magento-api/reviews | reviews} instead.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function customerProductReview(context: "
            },
            {
              "kind": "Reference",
              "text": "Context",
              "canonicalReference": "@vue-storefront/magento-api!Context:interface"
            },
            {
              "kind": "Content",
              "text": ", searchParams?: "
            },
            {
              "kind": "Reference",
              "text": "CustomerProductReviewParams",
              "canonicalReference": "@vue-storefront/magento-types!CustomerProductReviewParams:type"
            },
            {
              "kind": "Content",
              "text": ", customQuery?: "
            },
            {
              "kind": "Reference",
              "text": "CustomQuery",
              "canonicalReference": "@vue-storefront/magento-types!CustomQuery:type"
            },
            {
              "kind": "Content",
              "text": ", customHeaders?: "
            },
            {
              "kind": "Reference",
              "text": "CustomHeaders",
              "canonicalReference": "@vue-storefront/magento-types!CustomHeaders:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ApolloQueryResult",
              "canonicalReference": "@apollo/client/core!ApolloQueryResult:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CustomerProductReviewQuery",
              "canonicalReference": "@vue-storefront/magento-types!CustomerProductReviewQuery:type"
            },
            {
              "kind": "Content",
              "text": ">>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 15
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "context",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "searchParams",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "customQuery",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            },
            {
              "parameterName": "customHeaders",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              }
            }
          ],
          "name": "customerProductReview"
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-api!customMutation:function(1)",
          "docComment": "/**\n * Send an arbitrary GraphQL mutation to the Magento GraphQL endpoint For sending query, please see {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/customQuery | customQuery}.\n *\n * @example\n *\n * Simple usage:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // Prepare custom mutation\n * // Do not use gql-tag (gql``) here.\n * // For syntax highlighting (provided by respective IDE extensions), add the `#graphql` comment at the start of the template string\n * const mutation = `#graphql\n *  mutation generateCustomerToken($email: String!, $password: String!) {\n *    generateCustomerToken(email: $email, password: $password) {\n *      token\n *    }\n *  }\n * `;\n *\n * // Prepare mutation variables\n * const mutationVariables = {\n *  email: TEST_USER_EMAIL,\n *  password: TEST_USER_PASSWORD\n * };\n *\n * // use custom mutation and variables to fetch response adjusted to your needs\n * const result = await sdk.magento.customMutation({\n *  mutation,\n *  mutationVariables\n * });\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function customMutation<MUTATION = "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": ", MUTATION_VARIABLES = "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": ">(context: "
            },
            {
              "kind": "Reference",
              "text": "Context",
              "canonicalReference": "@vue-storefront/magento-api!Context:interface"
            },
            {
              "kind": "Content",
              "text": ", { mutation, mutationVariables, fetchPolicy, customHeaders, }: "
            },
            {
              "kind": "Content",
              "text": "{\n    mutation: string;\n    mutationVariables: MUTATION_VARIABLES;\n    fetchPolicy?: "
            },
            {
              "kind": "Reference",
              "text": "Extract",
              "canonicalReference": "!Extract:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "FetchPolicy",
              "canonicalReference": "@apollo/client/core!FetchPolicy:type"
            },
            {
              "kind": "Content",
              "text": ", \"network-only\" | \"no-cache\">;\n    customHeaders?: "
            },
            {
              "kind": "Reference",
              "text": "CustomHeaders",
              "canonicalReference": "@vue-storefront/magento-types!CustomHeaders:type"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "FetchResult",
              "canonicalReference": "@apollo/client/link/core!FetchResult:type"
            },
            {
              "kind": "Content",
              "text": "<MUTATION>>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 15,
            "endIndex": 19
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "context",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            },
            {
              "parameterName": "{ mutation, mutationVariables, fetchPolicy, customHeaders, }",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 14
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "MUTATION",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "typeParameterName": "MUTATION_VARIABLES",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "customMutation"
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-api!customQuery:function(1)",
          "docComment": "/**\n * Send an arbitrary GraphQL query to the Magento GraphQL endpoint For sending mutation, please see {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/customMutation | customMutation}.\n *\n * @example\n *\n * Simple usage:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // Do not use gql-tag (gql``) here.\n * // For syntax highlighting (provided by respective IDE extensions), add the `#graphql` comment at the start of the template string\n *\n * const query = `#graphql\n *   query($search: String!) {\n *     products(search: $search) {\n *       items {\n *         name\n *       }\n *     }\n *  }\n * `;\n *\n * const queryVariables: GetProductSearchParams = { search: \"t-shirt\" };\n *\n * // fetch query response\n * const customQueryResult = await sdk.magento.customQuery({\n *   query: query,\n *   queryVariables\n * });\n * ```\n *\n * @example\n *\n * If you want the method to send a GET instead of a POST request, use the `options.clientConfig` parameter.\n * ```ts\n * const customQueryResult = await sdk.magento.customQuery(\n *   {\n *     query,\n *     queryVariables\n *   },\n *   {\n *     clientConfig: {\n *       method: 'GET'\n *     }\n *   }\n * );\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function customQuery<QUERY = "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": ", QUERY_VARIABLES = "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": ">(context: "
            },
            {
              "kind": "Reference",
              "text": "Context",
              "canonicalReference": "@vue-storefront/magento-api!Context:interface"
            },
            {
              "kind": "Content",
              "text": ", { query, queryVariables, fetchPolicy, customHeaders, }: "
            },
            {
              "kind": "Content",
              "text": "{\n    query: string;\n    queryVariables?: QUERY_VARIABLES;\n    fetchPolicy?: "
            },
            {
              "kind": "Reference",
              "text": "FetchPolicy",
              "canonicalReference": "@apollo/client/core!FetchPolicy:type"
            },
            {
              "kind": "Content",
              "text": ";\n    customHeaders?: "
            },
            {
              "kind": "Reference",
              "text": "CustomHeaders",
              "canonicalReference": "@vue-storefront/magento-types!CustomHeaders:type"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ApolloQueryResult",
              "canonicalReference": "@apollo/client/core!ApolloQueryResult:type"
            },
            {
              "kind": "Content",
              "text": "<QUERY>>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 13,
            "endIndex": 17
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "context",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            },
            {
              "parameterName": "{ query, queryVariables, fetchPolicy, customHeaders, }",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 12
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "QUERY",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "typeParameterName": "QUERY_VARIABLES",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "customQuery"
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-api!deleteCustomerAddress:function(1)",
          "docComment": "/**\n * Delete a customer address.\n *\n * @example\n *\n * Simple usage:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * const addressId = 12;\n * // customer address will be remove for the currently logged in customer\n * const response = await sdk.magento.deleteCustomerAddress({ id: addressId });\n * // response.data?.deleteCustomerAddress - result is stored here, it's boolean\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function deleteCustomerAddress(context: "
            },
            {
              "kind": "Reference",
              "text": "Context",
              "canonicalReference": "@vue-storefront/magento-api!Context:interface"
            },
            {
              "kind": "Content",
              "text": ", addressId: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", customHeaders?: "
            },
            {
              "kind": "Reference",
              "text": "CustomHeaders",
              "canonicalReference": "@vue-storefront/magento-types!CustomHeaders:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "FetchResult",
              "canonicalReference": "@apollo/client/link/core!FetchResult:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "DeleteCustomerAddressMutation",
              "canonicalReference": "@vue-storefront/magento-types!DeleteCustomerAddressMutation:type"
            },
            {
              "kind": "Content",
              "text": ">>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 13
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "context",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "addressId",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "customHeaders",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "name": "deleteCustomerAddress"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-api!Endpoints:type",
          "docComment": "/**\n * Endpoints available in the Magento integration.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type Endpoints = "
            },
            {
              "kind": "Reference",
              "text": "WithoutContext",
              "canonicalReference": "@vue-storefront/middleware!WithoutContext:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ApiMethods",
              "canonicalReference": "@vue-storefront/magento-api!ApiMethods:type"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "Endpoints",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-api!generateCustomerToken:function(1)",
          "docComment": "/**\n * Generate customer token\n *\n * @example\n *\n * Simple usage:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // fetch token\n * const result = await sdk.magento.generateCustomerToken({\n *   email: 'some-email',\n *   password: 'some-password'\n * });\n *\n * // Token is now available in result.data.generateCustomerToken.token\n * ```\n *\n * *\n *\n * @example\n *\n * Creating a custom GraphQL query to fetch additional data:\n * ```ts\n * module.exports = {\n *   integrations: {\n *     magento: {\n *       customQueries: {\n *         'generate-customer-token-custom-query': ({ variables, metadata }) => ({\n *            variables,\n *            query: `\n *              mutation generateCustomerToken($email: String!, $password: String!) {\n *                generateCustomerToken(email: $email, password: $password) {\n *                  ${metadata.fields}\n *                }\n *              }\n *            }`\n *         }),\n *       },\n *     }\n *   }\n * };\n * ```\n *\n * @example\n *\n * Using a custom GraphQL query created in the previous example.\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // reduce the amount of fields returned by the query, when compared to the default query\n * const customQuery = {\n *   route: 'generate-customer-token-custom-query',\n *   metadata: {\n *     fields: 'token additional_field'\n *   }\n * };\n *\n * // data will contain only the fields specified in the custom query.\n * const result = await sdk.magento.generateCustomerToken({\n *   email: 'some-email',\n *   password: 'some-password'\n * }, customQuery);\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function generateCustomerToken(context: "
            },
            {
              "kind": "Reference",
              "text": "Context",
              "canonicalReference": "@vue-storefront/magento-api!Context:interface"
            },
            {
              "kind": "Content",
              "text": ", params: "
            },
            {
              "kind": "Content",
              "text": "{\n    email: string;\n    password: string;\n    recaptchaToken: string;\n}"
            },
            {
              "kind": "Content",
              "text": ", customQuery?: "
            },
            {
              "kind": "Reference",
              "text": "CustomQuery",
              "canonicalReference": "@vue-storefront/magento-types!CustomQuery:type"
            },
            {
              "kind": "Content",
              "text": ", customHeaders?: "
            },
            {
              "kind": "Reference",
              "text": "CustomHeaders",
              "canonicalReference": "@vue-storefront/magento-types!CustomHeaders:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "FetchResult",
              "canonicalReference": "@apollo/client/link/core!FetchResult:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "GenerateCustomerTokenMutation",
              "canonicalReference": "@vue-storefront/magento-types!GenerateCustomerTokenMutation:type"
            },
            {
              "kind": "Content",
              "text": ">>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 15
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "context",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "params",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "customQuery",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            },
            {
              "parameterName": "customHeaders",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              }
            }
          ],
          "name": "generateCustomerToken"
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-api!getAvailableCustomerPaymentMethods:function(1)",
          "docComment": "/**\n * Fetch available payment methods for a logged in customer.\n *\n * @example\n *\n * Simple usage:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // fetch available payment methods for a logged in customer\n * const result = await sdk.magento.getAvailableCustomerPaymentMethods();\n *\n * // example result\n * {\n *   \"data\": {\n *     \"cart\": {\n *       \"__typename\": \"Cart\",\n *       \"available_payment_methods\": [\n *         {\n *           \"__typename\": \"AvailablePaymentMethod\",\n *           \"code\": \"checkmo\",\n *           \"title\": \"Check / Money order\"\n *         }\n *       ]\n *     }\n *   },\n *   \"loading\": false,\n *   \"networkStatus\": 7\n * }\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getAvailableCustomerPaymentMethods(context: "
            },
            {
              "kind": "Reference",
              "text": "Context",
              "canonicalReference": "@vue-storefront/magento-api!Context:interface"
            },
            {
              "kind": "Content",
              "text": ", customHeaders?: "
            },
            {
              "kind": "Reference",
              "text": "CustomHeaders",
              "canonicalReference": "@vue-storefront/magento-types!CustomHeaders:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ApolloQueryResult",
              "canonicalReference": "@apollo/client/core!ApolloQueryResult:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CustomerAvailablePaymentMethodsQuery",
              "canonicalReference": "@vue-storefront/magento-types!CustomerAvailablePaymentMethodsQuery:type"
            },
            {
              "kind": "Content",
              "text": ">>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "context",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "customHeaders",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "getAvailableCustomerPaymentMethods"
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-api!getAvailableCustomerShippingMethods:function(1)",
          "docComment": "/**\n * Fetch available shipping methods for current customer. Customer must be logged in.\n *\n * @example\n *\n * Simple usage:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // fetch available shipping methods for current customer\n * const result = await sdk.magento.getAvailableCustomerShippingMethods();\n * // e.g. output:\n * // {\n * //   \"data\": {\n * //     \"customerCart\": {\n * //       \"shipping_addresses\": [\n * //         address1: {\n * //          \"available_shipping_methods\": [...]\n * //         },\n * //       ]\n * //     }\n * ```\n *\n * @example\n *\n * Creating a custom GraphQL query\n * ```ts\n * module.exports = {\n *   integrations: {\n *     magento: {\n *       customQueries: {\n *         'get-available-customer-shipping-methods-custom-query': ({ variables, metadata }) => ({\n *            variables,\n *            query: `\n *              query CustomerAvailableShippingMethods {\n *                customerCart {\n *                  ${metadata?.fields}\n *                }\n *              }\n *            `\n *         }),\n *       },\n *     }\n *   }\n * };\n * ```\n *\n * @example\n *\n * Using a custom GraphQL query to reduce the amount of data returned by the API\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n * // reduce the amount of fields returned by the query, when compared to the default query\n *\n * const customQuery = {\n *  getAvailableCustomerShippingMethods: 'get-available-customer-shipping-methods-custom-query',\n *  metadata: {\n *    fields: 'shipping_addresses { available_shipping_methods { available method_title } }'\n *  }\n * };\n *\n * const result = await sdk.magento.getAvailableCustomerShippingMethods(customQuery);\n *\n * // the result will contain only the data defined in the custom query\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getAvailableCustomerShippingMethods(context: "
            },
            {
              "kind": "Reference",
              "text": "Context",
              "canonicalReference": "@vue-storefront/magento-api!Context:interface"
            },
            {
              "kind": "Content",
              "text": ", customQuery?: "
            },
            {
              "kind": "Reference",
              "text": "CustomQuery",
              "canonicalReference": "@vue-storefront/magento-types!CustomQuery:type"
            },
            {
              "kind": "Content",
              "text": ", customHeaders?: "
            },
            {
              "kind": "Reference",
              "text": "CustomHeaders",
              "canonicalReference": "@vue-storefront/magento-types!CustomHeaders:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ApolloQueryResult",
              "canonicalReference": "@apollo/client/core!ApolloQueryResult:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CustomerAvailableShippingMethodsQuery",
              "canonicalReference": "@vue-storefront/magento-types!CustomerAvailableShippingMethodsQuery:type"
            },
            {
              "kind": "Content",
              "text": ">>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 13
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "context",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "customQuery",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "customHeaders",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "name": "getAvailableCustomerShippingMethods"
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-api!getAvailablePaymentMethods:function(1)",
          "docComment": "/**\n * Get available payment methods for the received guest cart. To get available customer payment methods use {@link https://docs.vuestorefront.io/integrations/magento/api/magento-api/getAvailableCustomerPaymentMethods | getAvailableCustomerPaymentMethods}.\n *\n * @example\n *\n * Simple usage:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // fetch guest available payment methods\n * const result = await sdk.magento.getAvailablePaymentMethods({\n *  cartId: 'masked-cart-id'\n * });\n *\n * // example result\n * {\n *   \"data\": {\n *     \"cart\": {\n *       \"__typename\": \"Cart\",\n *       \"available_payment_methods\": [\n *         {\n *           \"__typename\": \"AvailablePaymentMethod\",\n *           \"code\": \"checkmo\",\n *           \"title\": \"Check / Money order\"\n *         }\n *       ]\n *     }\n *   },\n *   \"loading\": false,\n *   \"networkStatus\": 7\n * }\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getAvailablePaymentMethods(context: "
            },
            {
              "kind": "Reference",
              "text": "Context",
              "canonicalReference": "@vue-storefront/magento-api!Context:interface"
            },
            {
              "kind": "Content",
              "text": ", cartId: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", customHeaders?: "
            },
            {
              "kind": "Reference",
              "text": "CustomHeaders",
              "canonicalReference": "@vue-storefront/magento-types!CustomHeaders:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ApolloQueryResult",
              "canonicalReference": "@apollo/client/core!ApolloQueryResult:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "GuestAvailablePaymentMethodsQuery",
              "canonicalReference": "@vue-storefront/magento-types!GuestAvailablePaymentMethodsQuery:type"
            },
            {
              "kind": "Content",
              "text": ">>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 13
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "context",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "cartId",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "customHeaders",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "name": "getAvailablePaymentMethods"
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-api!getAvailableShippingMethods:function(1)",
          "docComment": "/**\n * Fetch guest's available shipping methods\n *\n * @example\n *\n * Simple usage:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // fetch guest's available shipping methods\n * const result = await sdk.magento.getAvailableShippingMethods({\n *   cart_id: TEST_CART_ID\n * });\n * // array of available shipping methods for selected shipping address:\n * result.data.cart.shipping_addresses[0].available_shipping_methods[0];\n * ```\n *\n * @example\n *\n * Creating a custom GraphQL query for fetching only what's requested from shipping methods\n * ```ts\n * module.exports = {\n *   integrations: {\n *     magento: {\n *       customQueries: {\n *         'get-available-shipping-methods-custom-query': ({ variables, metadata }) => ({\n *            variables,\n *            query: `\n *              query GuestAvailableShippingMethods($cart_id: String!) {\n *                cart(cart_id:$cart_id) {\n *                  shipping_addresses {\n *                    available_shipping_methods {\n *                      ${metadata.fields}\n *                    }\n *                  }\n *                }\n *              }\n *            `\n *         }),\n *       },\n *     }\n *   }\n * };\n * ```\n *\n * @example\n *\n * Using a custom GraphQL query to fetch only method_title field\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n * // reduce the amount of fields returned by the query, when compared to the default query\n * const customQuery = {\n *   shippingMethods: 'get-available-shipping-methods-custom-query',\n *   metadata: {\n *     fields: 'method_title'\n *   }\n * };\n *\n * const result = await sdk.magento.getAvailableShippingMethods({ cart_id: '123'}, customQuery);\n *\n * // result contains the customer addresses with only the city method_title. Of course, it has same shape as in the \"simple usage\" example.\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getAvailableShippingMethods(context: "
            },
            {
              "kind": "Reference",
              "text": "Context",
              "canonicalReference": "@vue-storefront/magento-api!Context:interface"
            },
            {
              "kind": "Content",
              "text": ", params: "
            },
            {
              "kind": "Reference",
              "text": "GuestAvailableShippingMethodsQueryVariables",
              "canonicalReference": "@vue-storefront/magento-types!GuestAvailableShippingMethodsQueryVariables:type"
            },
            {
              "kind": "Content",
              "text": ", customQuery?: "
            },
            {
              "kind": "Reference",
              "text": "CustomQuery",
              "canonicalReference": "@vue-storefront/magento-types!CustomQuery:type"
            },
            {
              "kind": "Content",
              "text": ", customHeaders?: "
            },
            {
              "kind": "Reference",
              "text": "CustomHeaders",
              "canonicalReference": "@vue-storefront/magento-types!CustomHeaders:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ApolloQueryResult",
              "canonicalReference": "@apollo/client/core!ApolloQueryResult:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "GuestAvailableShippingMethodsQuery",
              "canonicalReference": "@vue-storefront/magento-types!GuestAvailableShippingMethodsQuery:type"
            },
            {
              "kind": "Content",
              "text": ">>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 15
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "context",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "params",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "customQuery",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            },
            {
              "parameterName": "customHeaders",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              }
            }
          ],
          "name": "getAvailableShippingMethods"
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-api!getCustomerAddresses:function(1)",
          "docComment": "/**\n * Get customer addresses. Customer must be logged in before calling this method.\n *\n * @example\n *\n * Simple usage:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // fetch customer addresses if customer is logged in\n * const { data } = await sdk.magento.getCustomerAddresses();\n *\n * // data contains the customer addresses\n * data.customer.addresses; // array of customer addresses\n * ```\n *\n * @example\n *\n * Creating a custom GraphQL query\n * ```ts\n * module.exports = {\n *   integrations: {\n *     magento: {\n *       customQueries: {\n *         'get-customer-addresses-custom-query': ({ variables, metadata }) => ({\n *            variables,\n *            query: `\n *              query getCustomerAddresses {\n *                customer {\n *                  addresses {\n *                    ${metadata.fields}\n *                  }\n *                }\n *              }\n *            `\n *         }),\n *       },\n *     }\n *   }\n * };\n * ```\n *\n * @example\n *\n * Using a custom GraphQL query to reduce the amount of data returned by the query\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n * // reduce the amount of fields returned by the query, when compared to the default query\n * const customQuery = {\n *   getCustomerAddresses: 'get-customer-addresses-custom-query',\n *   metadata: {\n *     fields: 'city'\n *   }\n * };\n *\n * const { data } = await sdk.magento.getCustomerAddresses(customQuery);\n *\n * // data contains the customer addresses with only the city field\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getCustomerAddresses(context: "
            },
            {
              "kind": "Reference",
              "text": "Context",
              "canonicalReference": "@vue-storefront/magento-api!Context:interface"
            },
            {
              "kind": "Content",
              "text": ", customQuery?: "
            },
            {
              "kind": "Reference",
              "text": "CustomQuery",
              "canonicalReference": "@vue-storefront/magento-types!CustomQuery:type"
            },
            {
              "kind": "Content",
              "text": ", customHeaders?: "
            },
            {
              "kind": "Reference",
              "text": "CustomHeaders",
              "canonicalReference": "@vue-storefront/magento-types!CustomHeaders:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ApolloQueryResult",
              "canonicalReference": "@apollo/client/core!ApolloQueryResult:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "GetCustomerAddressesQuery",
              "canonicalReference": "@vue-storefront/magento-types!GetCustomerAddressesQuery:type"
            },
            {
              "kind": "Content",
              "text": ">>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 13
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "context",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "customQuery",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "customHeaders",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "name": "getCustomerAddresses"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@vue-storefront/magento-api!LocaleItem:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface LocaleItem "
            }
          ],
          "releaseTag": "Public",
          "name": "LocaleItem",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@vue-storefront/magento-api!LocaleItem#label:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "label: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "label",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@vue-storefront/magento-api!LocaleItem#name:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-api!mergeCarts:function(1)",
          "docComment": "/**\n * Merge carts\n *\n * @example\n *\n * Simple usage:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * const params = {\n *   sourceCartId: 'pCS0ykep1l3wGlPKSyWLJq5fb1DxIQcp',\n *   // this cart needs to have been created by a logged in user\n *   destinationCartId: 'xiYYh2ep0l3xGtPsz2WLJf5f31DxBJx0'\n * }\n *\n * // merge carts and return the result (cart)\n * const mergedCart = await sdk.magento.mergeCarts(params);\n * ```\n *\n * @example\n *\n * Creating a custom GraphQL query for merging carts\n * ```ts\n * module.exports = {\n *   integrations: {\n *     magento: {\n *       customQueries: {\n *         'merge-carts-custom-query': ({ variables, metadata }) => ({\n *            variables,\n *            query: `\n *              mutation mergeCarts($sourceCartId: String!, $destinationCartId: String!) {\n *                mergeCarts(source_cart_id: $sourceCartId, destination_cart_id: $destinationCartId) {\n *                  ${metadata.fields}\n *                }\n *              }\n *            `\n *         }),\n *       },\n *     }\n *   }\n * };\n * ```\n *\n * @example\n *\n * Using a custom GraphQL query to merge carts\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n * // reduce the amount of fields returned by the query, when compared to the default query\n * const customQuery = {\n *   cart: 'merge-carts-custom-query',\n *   metadata: {\n *     fields: 'id items { product { name } }'\n *   }\n * };\n *\n * const params = {\n *   sourceCartId: 'pCS0ykep1l3wGlPKSyWLJq5fb1DxIQcp',\n *   destinationCartId: 'xiYYh2ep0l3xGtPsz2WLJf5f31DxBJx0'\n * }\n * const mergedCart = await sdk.magento.mergeCarts(params, customQuery);\n *\n * // Merged cart will contain only the fields specified in the custom query.\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function mergeCarts(context: "
            },
            {
              "kind": "Reference",
              "text": "Context",
              "canonicalReference": "@vue-storefront/magento-api!Context:interface"
            },
            {
              "kind": "Content",
              "text": ", params: "
            },
            {
              "kind": "Content",
              "text": "{\n    sourceCartId: string;\n    destinationCartId: string;\n}"
            },
            {
              "kind": "Content",
              "text": ", customQuery?: "
            },
            {
              "kind": "Reference",
              "text": "CustomQuery",
              "canonicalReference": "@vue-storefront/magento-types!CustomQuery:type"
            },
            {
              "kind": "Content",
              "text": ", customHeaders?: "
            },
            {
              "kind": "Reference",
              "text": "CustomHeaders",
              "canonicalReference": "@vue-storefront/magento-types!CustomHeaders:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "FetchResult",
              "canonicalReference": "@apollo/client/link/core!FetchResult:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "MergeCartsMutation",
              "canonicalReference": "@vue-storefront/magento-types!MergeCartsMutation:type"
            },
            {
              "kind": "Content",
              "text": ">>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 15
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "context",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "params",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "customQuery",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            },
            {
              "parameterName": "customHeaders",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              }
            }
          ],
          "name": "mergeCarts"
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-api!placeOrder:function(1)",
          "docComment": "/**\n * Place an order.\n *\n * @example\n *\n * Simple usage:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // place an order\n * const result = await sdk.magento.placeOrder({cart_id: 'some-cart-id'});\n *\n * // example result:\n * {\n *   \"data\": {\n *     \"placeOrder\": {\n *       \"__typename\": \"PlaceOrderOutput\",\n *       \"order\": {\n *         \"__typename\": \"Order\",\n *         \"order_number\": \"000000522\"\n *       }\n *     }\n *   }\n * }\n * ```\n *\n * @example\n *\n * The complete flow of placing an order for a guest user:\n *\n * ```ts const emptyCart = await sdk.magento.createEmptyCart(); // create an empty cart const cartId = emptyCart?.data?.createEmptyCart || ''; // get cart id from the response\n *\n * // set guest email on the cart await sdk.magento.setGuestEmailOnCart({ cart_id: cartId, email: 'john.doe+test@vuestorefront.io' });\n *\n * // add products to the cart await sdk.magento.addProductsToCart({ cartId, cartItems: [ { quantity: 1, sku: 'some-sku', // size and color selected_options: ['Y29uZmlndXJhYmxlLzkzLzUz', 'Y29uZmlndXJhYmxlLzE0NC8xNzE='] } ] });\n *\n * const address = { firstname: 'John', lastname: 'Doe', city: 'New York', country_code: 'US', street: ['Street 1', 'Street 2'], telephone: '123 123 123', region: 'AL', postcode: '10001', save_in_address_book: false }\n *\n * // set shipping and billing address await sdk.magento.setShippingAddressesOnCart({ cart_id: cartId, shipping_addresses: [{ address }] }); await sdk.magento.setBillingAddressOnCart({ cart_id: cartId, billing_address: { address } });\n *\n * // await sdk.magento.setShippingMethodsOnCart({ cart_id: cartId, shipping_methods: [{ carrier_code: 'flatrate', method_code: 'flatrate' }] }); await sdk.magento.setPaymentMethodOnCart({ cart_id: cartId, payment_method: { code: 'checkmo' } });\n *\n * // place the order const result = await sdk.magento.placeOrder({ cart_id: cartId });\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function placeOrder(context: "
            },
            {
              "kind": "Reference",
              "text": "Context",
              "canonicalReference": "@vue-storefront/magento-api!Context:interface"
            },
            {
              "kind": "Content",
              "text": ", input: "
            },
            {
              "kind": "Reference",
              "text": "PlaceOrderInput",
              "canonicalReference": "@vue-storefront/magento-types!PlaceOrderInput:interface"
            },
            {
              "kind": "Content",
              "text": ", customHeaders?: "
            },
            {
              "kind": "Reference",
              "text": "CustomHeaders",
              "canonicalReference": "@vue-storefront/magento-types!CustomHeaders:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "FetchResult",
              "canonicalReference": "@apollo/client/link/core!FetchResult:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "PlaceOrderMutation",
              "canonicalReference": "@vue-storefront/magento-types!PlaceOrderMutation:type"
            },
            {
              "kind": "Content",
              "text": ">>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 13
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "context",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "input",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "customHeaders",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "name": "placeOrder"
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-api!productDetails:function(1)",
          "docComment": "/**\n * Get products details\n *\n * @example\n *\n * Simple usage without filters, sorting or pagination:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // fetch list of products with default parameters\n * const details = await sdk.magento.productDetails({});\n * ```\n *\n * @example\n *\n * Usage with filters, sorting and pagination:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // make a request to fetch list of products with custom parameters\n * const details = await sdk.magento.productDetails({\n *  pageSize: 20,\n *  currentPage: 1,\n *  filter: {\n *    sku: {\n *      eq: PRODUCT_SKU\n *    }\n *  }\n * });\n * ```\n *\n * @example\n *\n * Creating a custom GraphQL query for adding product details.\n * ```ts\n * module.exports = {\n *   integrations: {\n *     magento: {\n *       customQueries: {\n *         'product-details-custom-query': ({ variables, metadata }) => ({\n *            variables,\n *            query: `\n *              query productDetails(\n *                $search: String = \"\",\n *                $filter: ProductAttributeFilterInput,\n *                $pageSize: Int = 10,\n *                $currentPage: Int = 1,\n *                $sort: ProductAttributeSortInput\n *              ) {\n *                products(search: $search, filter: $filter, sort: $sort, pageSize: $pageSize, currentPage: $currentPage) {\n *                  ${metadata.fields}\n *                }\n *              }\n *            `\n *         }),\n *       },\n *     }\n *   }\n * };\n * ```\n *\n * @example\n *\n * Using a custom GraphQL query to fetch product details.\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n * const customQuery = {\n *  productDetails: 'product-details-custom-query',\n *    metadata: {\n *      fields: 'items { sku name }'\n *    }\n * };\n *\n * const details = await sdk.magento.productDetails({\n *  filter: {\n *    sku: {\n *      eq: 'some-sku' // optional SKU filter\n *    }\n *  }\n * }, customQuery);\n *\n * // Details will contain only the fields specified in the custom query.\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function productDetails(context: "
            },
            {
              "kind": "Reference",
              "text": "Context",
              "canonicalReference": "@vue-storefront/magento-api!Context:interface"
            },
            {
              "kind": "Content",
              "text": ", searchParams?: "
            },
            {
              "kind": "Reference",
              "text": "GetProductSearchParams",
              "canonicalReference": "@vue-storefront/magento-types!GetProductSearchParams:type"
            },
            {
              "kind": "Content",
              "text": ", customQuery?: "
            },
            {
              "kind": "Reference",
              "text": "CustomQuery",
              "canonicalReference": "@vue-storefront/magento-types!CustomQuery:type"
            },
            {
              "kind": "Content",
              "text": ", customHeaders?: "
            },
            {
              "kind": "Reference",
              "text": "CustomHeaders",
              "canonicalReference": "@vue-storefront/magento-types!CustomHeaders:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ApolloQueryResult",
              "canonicalReference": "@apollo/client/core!ApolloQueryResult:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ProductDetailsQuery",
              "canonicalReference": "@vue-storefront/magento-types!ProductDetailsQuery:type"
            },
            {
              "kind": "Content",
              "text": ">>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 15
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "context",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "searchParams",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "customQuery",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            },
            {
              "parameterName": "customHeaders",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              }
            }
          ],
          "name": "productDetails"
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-api!productReview:function(1)",
          "docComment": "/**\n * Fetch product reviews\n *\n * @example\n *\n * Simple usage:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // fetch all products reviews (default pagination limit is 10)\n * const result = await sdk.magento.productReview({});\n * ```\n *\n * @example\n *\n * Fetching reviews for a specific product:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * const result = await sdk.magento.productReview({ filter: { sku: { eq: '24-MB01' } );\n * ```\n *\n * @example\n *\n * Creating a custom GraphQL query\n * ```ts\n * module.exports = {\n *   integrations: {\n *     magento: {\n *       customQueries: {\n *         'product-review-custom-query': ({ variables, metadata }) => ({\n *            variables,\n *            query: `\n *              query productReview($search: String = \"\", $filter: ProductAttributeFilterInput, $pageSize: Int = 10, $currentPage: Int = 1, $sort: ProductAttributeSortInput) {\n *                products(search: $search, filter: $filter, sort: $sort) {\n *                  items {\n *                    review_count\n *                    reviews(pageSize: $pageSize, currentPage: $currentPage) {\n *                      items {\n *                        ${metadata?.fields}\n *                      }\n *                    }\n *                  }\n *                }\n *              }\n *            `\n *         }),\n *       },\n *     }\n *   }\n * };\n * ```\n *\n * @example\n *\n * Using a custom GraphQL query to change the amount of fields returned by the query:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n * // reduce the amount of fields returned by the query, when compared to the default query\n * const customQuery = {\n *   productReview: 'product-review-custom-query',\n *   metadata: {\n *     fields: 'average_rating'\n *   }\n * };\n *\n * const result = await sdk.magento.productReview({}, customQuery);\n *\n * // result.data.products.items[0].reviews.items[0] will only contain the average_rating field\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function productReview(context: "
            },
            {
              "kind": "Reference",
              "text": "Context",
              "canonicalReference": "@vue-storefront/magento-api!Context:interface"
            },
            {
              "kind": "Content",
              "text": ", searchParams?: "
            },
            {
              "kind": "Reference",
              "text": "GetProductSearchParams",
              "canonicalReference": "@vue-storefront/magento-types!GetProductSearchParams:type"
            },
            {
              "kind": "Content",
              "text": ", customQuery?: "
            },
            {
              "kind": "Reference",
              "text": "CustomQuery",
              "canonicalReference": "@vue-storefront/magento-types!CustomQuery:type"
            },
            {
              "kind": "Content",
              "text": ", customHeaders?: "
            },
            {
              "kind": "Reference",
              "text": "CustomHeaders",
              "canonicalReference": "@vue-storefront/magento-types!CustomHeaders:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ApolloQueryResult",
              "canonicalReference": "@apollo/client/core!ApolloQueryResult:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ProductReviewQuery",
              "canonicalReference": "@vue-storefront/magento-types!ProductReviewQuery:type"
            },
            {
              "kind": "Content",
              "text": ">>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 15
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "context",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "searchParams",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "customQuery",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            },
            {
              "parameterName": "customHeaders",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              }
            }
          ],
          "name": "productReview"
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-api!productReviewRatingsMetadata:function(1)",
          "docComment": "/**\n * Get the active ratings attributes and the values each rating can have.\n *\n * @example\n *\n * Simple usage:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // fetch the active ratings attributes and the values each rating can have\n * const { data } = await sdk.magento.productReviewRatingsMetadata();\n *\n * data.productReviewRatingsMetadata.items; // array of review's attributes\n * data.productReviewRatingsMetadata.items[0].values; // array of possible values of the review's attributes\n * ```\n *\n * @example\n *\n * Creating a custom GraphQL query\n * ```ts\n * module.exports = {\n *   integrations: {\n *     magento: {\n *       customQueries: {\n *         'product-review-ratings-metadata-custom-query': ({ variables, metadata }) => ({\n *            variables,\n *            query: `\n *              query productReviewRatingsMetadata {\n *                productReviewRatingsMetadata {\n *                  items {\n *                    ${metadata.fields}\n *                  }\n *                }\n *              }\n *            `\n *         }),\n *       },\n *     }\n *   }\n * };\n * ```\n *\n * @example\n *\n * Using a custom GraphQL query to reduce the amount of data returned by the query\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n * // reduce the amount of fields returned by the query, when compared to the default query\n * const customQuery = {\n *   productReviewRatingsMetadata: 'product-review-ratings-metadata-custom-query',\n *   metadata: {\n *     fields: `\n *      name\n *      values {\n *        value\n *      }\n *     `\n *   }\n * };\n *\n * const { data } = await sdk.magento.productReviewRatingsMetadata(customQuery);\n *\n * // data.productReviewRatingsMetadata.items[0] will contain only the fields specified in the custom query.\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function productReviewRatingsMetadata(context: "
            },
            {
              "kind": "Reference",
              "text": "Context",
              "canonicalReference": "@vue-storefront/magento-api!Context:interface"
            },
            {
              "kind": "Content",
              "text": ", customQuery?: "
            },
            {
              "kind": "Reference",
              "text": "CustomQuery",
              "canonicalReference": "@vue-storefront/magento-types!CustomQuery:type"
            },
            {
              "kind": "Content",
              "text": ", customHeaders?: "
            },
            {
              "kind": "Reference",
              "text": "CustomHeaders",
              "canonicalReference": "@vue-storefront/magento-types!CustomHeaders:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ApolloQueryResult",
              "canonicalReference": "@apollo/client/core!ApolloQueryResult:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ProductReviewRatingsMetadataQuery",
              "canonicalReference": "@vue-storefront/magento-types!ProductReviewRatingsMetadataQuery:type"
            },
            {
              "kind": "Content",
              "text": ">>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 13
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "context",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "customQuery",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "customHeaders",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "name": "productReviewRatingsMetadata"
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-api!products:function(1)",
          "docComment": "/**\n * Get products\n *\n * @example\n *\n * Simple usage without filters, sorting or pagination:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // fetch list of products with default parameters\n * const details = await sdk.magento.products({});\n * ```\n *\n * @example\n *\n * Usage with filters, sorting and pagination:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // make a request to fetch list of products with custom parameters\n * const details = await sdk.magento.products({\n *  pageSize: 20,\n *  currentPage: 1,\n *  filter: {\n *    sku: {\n *      eq: PRODUCT_SKU\n *    }\n *  }\n * });\n * ```\n *\n * @example\n *\n * Creating a custom GraphQL query for fetching products.\n * ```ts\n * module.exports = {\n *   integrations: {\n *     magento: {\n *       customQueries: {\n *         'products-custom-query': ({ variables, metadata }) => ({\n *            variables,\n *            query: `\n *              query productsList(\n *                $search: String = \"\",\n *                $filter: ProductAttributeFilterInput,\n *                $pageSize: Int = 10,\n *                $currentPage: Int = 1,\n *                $sort: ProductAttributeSortInput\n *              ) {\n *                products(search: $search, filter: $filter, sort: $sort, pageSize: $pageSize, currentPage: $currentPage) {\n *                  ${metadata.fields}\n *                }\n *              }\n *            `\n *         }),\n *       },\n *     }\n *   }\n * };\n * ```\n *\n * @example\n *\n * Using a custom GraphQL query to fetch products list.\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n * const customQuery = {\n *  products: 'products-custom-query',\n *    metadata: {\n *      fields: 'items { sku name }'\n *    }\n * };\n *\n * const products = await sdk.magento.products({\n *  filter: {\n *    sku: {\n *      eq: 'some-sku' // optional SKU filter\n *    }\n *  }\n * }, customQuery);\n *\n * // Products will contain only the fields specified in the custom query.\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function products(context: "
            },
            {
              "kind": "Reference",
              "text": "Context",
              "canonicalReference": "@vue-storefront/magento-api!Context:interface"
            },
            {
              "kind": "Content",
              "text": ", searchParams?: "
            },
            {
              "kind": "Reference",
              "text": "GetProductSearchParams",
              "canonicalReference": "@vue-storefront/magento-types!GetProductSearchParams:type"
            },
            {
              "kind": "Content",
              "text": ", customQuery?: "
            },
            {
              "kind": "Reference",
              "text": "CustomQuery",
              "canonicalReference": "@vue-storefront/magento-types!CustomQuery:type"
            },
            {
              "kind": "Content",
              "text": ", customHeaders?: "
            },
            {
              "kind": "Reference",
              "text": "CustomHeaders",
              "canonicalReference": "@vue-storefront/magento-types!CustomHeaders:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ApolloQueryResult",
              "canonicalReference": "@apollo/client/core!ApolloQueryResult:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ProductsListQuery",
              "canonicalReference": "@vue-storefront/magento-types!ProductsListQuery:type"
            },
            {
              "kind": "Content",
              "text": ">>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 15
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "context",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "searchParams",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "customQuery",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            },
            {
              "parameterName": "customHeaders",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              }
            }
          ],
          "name": "products"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@vue-storefront/magento-api!RecaptchaConfig:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface RecaptchaConfig "
            }
          ],
          "releaseTag": "Public",
          "name": "RecaptchaConfig",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@vue-storefront/magento-api!RecaptchaConfig#isEnabled:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isEnabled: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "isEnabled",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@vue-storefront/magento-api!RecaptchaConfig#score:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "score: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "score",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@vue-storefront/magento-api!RecaptchaConfig#secretkey:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "secretkey: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "secretkey",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@vue-storefront/magento-api!RecaptchaConfig#sitekey:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "sitekey: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "sitekey",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@vue-storefront/magento-api!RecaptchaConfig#version:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "version: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "version",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-api!relatedProducts:function(1)",
          "docComment": "/**\n * Get related products\n *\n * @example\n *\n * Simple usage without filters, sorting or pagination:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // Fetch list of products filtered by the SKU\n * // Only the parent product is affected by filters\n * const products = await sdk.magento.relatedProduct({\n *  pageSize: 1,\n *  filter: {\n *    sku: {\n *      eq: PRODUCT_SKU\n *    }\n *  }\n * });\n * ```\n *\n * @example\n *\n * Usage with filters, sorting and pagination:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // make a request to fetch list of products with custom parameters\n * const products = await sdk.magento.relatedProduct({\n *  pageSize: 20,\n *  currentPage: 1,\n *  filter: {\n *    sku: {\n *      eq: PRODUCT_SKU\n *    }\n *  }\n * });\n * ```\n *\n * @example\n *\n * Creating a custom GraphQL query getting related products.\n * ```ts\n * module.exports = {\n *   integrations: {\n *     magento: {\n *       customQueries: {\n *         'related-product-custom-query': ({ variables, metadata }) => ({\n *            variables,\n *            query: `\n *              query relatedProduct(\n *                $search: String = \"\",\n *                $filter: ProductAttributeFilterInput,\n *                $pageSize: Int = 10,\n *                $currentPage: Int = 1,\n *                $sort: ProductAttributeSortInput\n *              ) {\n *                products(search: $search, filter: $filter, sort: $sort, pageSize: $pageSize, currentPage: $currentPage) {\n *                  ${metadata.fields}\n *                }\n *              }\n *            `\n *         }),\n *       },\n *     }\n *   }\n * };\n * ```\n *\n * @example\n *\n * Using a custom GraphQL query to fetch related products.\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n * const customQuery = {\n *  relatedProduct: 'related-product-custom-query',\n *    metadata: {\n *      fields: 'items { related_products { uid __typename } }'\n *    }\n * };\n *\n * const result = await sdk.magento.relatedProduct({\n *  filter: {\n *    sku: {\n *      eq: 'some-sku' // optional SKU filter\n *    }\n *  }\n * }, customQuery);\n *\n * // Result will contain only the fields specified in the custom query.\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function relatedProducts(context: "
            },
            {
              "kind": "Reference",
              "text": "Context",
              "canonicalReference": "@vue-storefront/magento-api!Context:interface"
            },
            {
              "kind": "Content",
              "text": ", searchParams?: "
            },
            {
              "kind": "Reference",
              "text": "GetProductSearchParams",
              "canonicalReference": "@vue-storefront/magento-types!GetProductSearchParams:type"
            },
            {
              "kind": "Content",
              "text": ", customQuery?: "
            },
            {
              "kind": "Reference",
              "text": "CustomQuery",
              "canonicalReference": "@vue-storefront/magento-types!CustomQuery:type"
            },
            {
              "kind": "Content",
              "text": ", customHeaders?: "
            },
            {
              "kind": "Reference",
              "text": "CustomHeaders",
              "canonicalReference": "@vue-storefront/magento-types!CustomHeaders:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ApolloQueryResult",
              "canonicalReference": "@apollo/client/core!ApolloQueryResult:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "RelatedProductsQuery",
              "canonicalReference": "@vue-storefront/magento-types!RelatedProductsQuery:type"
            },
            {
              "kind": "Content",
              "text": ">>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 15
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "context",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "searchParams",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "customQuery",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            },
            {
              "parameterName": "customHeaders",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              }
            }
          ],
          "name": "relatedProducts"
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-api!removeCouponFromCart:function(1)",
          "docComment": "/**\n * Remove coupon from cart\n *\n * @example\n *\n * Simple usage:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // assuming that the coupon code is already applied to the cart\n * const params = {\n *  cart_id: 'test-cart-id',\n * };\n *\n * // Remove coupon from cart\n * const result = await sdk.magento.removeCouponFromCart(params);\n * ```\n *\n * @example\n *\n * Creating a custom GraphQL query for getting cart\n * ```ts\n * module.exports = {\n *   integrations: {\n *     magento: {\n *       customQueries: {\n *         'remove-coupon-from-cart-custom-query': ({ variables, metadata }) => ({\n *            variables,\n *            query: `\n *              mutation removeCouponFromCart($input: RemoveCouponFromCartInput) {\n *                removeCouponFromCart(input: $input) {\n *                  ${metadata.fields}\n *                }\n *              }`\n *         }),\n *       },\n *     }\n *   }\n * };\n * ```\n *\n * @example\n *\n * Using a custom GraphQL query to fetch reduced amount of data\n * ```ts\n *  import { sdk } from '~/sdk.config.ts';\n *\n *  const customQuery = {\n *    removeCouponFromCart: 'remove-coupon-from-cart-custom-query',\n *      metadata: {\n *        fields: 'cart { applied_coupons { code } }'\n *      }\n *    };\n *\n *  // The only required parameter is cart_id\n *  const params = {\n *    cart_id: 'test-cart-id',\n *  };\n *\n *  // The result will contain only fields configured in the custom query\n *  const result = await sdk.magento.removeCouponFromCart(params, customQuery);\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function removeCouponFromCart(context: "
            },
            {
              "kind": "Reference",
              "text": "Context",
              "canonicalReference": "@vue-storefront/magento-api!Context:interface"
            },
            {
              "kind": "Content",
              "text": ", input: "
            },
            {
              "kind": "Reference",
              "text": "RemoveCouponFromCartInput",
              "canonicalReference": "@vue-storefront/magento-types!RemoveCouponFromCartInput:interface"
            },
            {
              "kind": "Content",
              "text": ", customQuery?: "
            },
            {
              "kind": "Reference",
              "text": "CustomQuery",
              "canonicalReference": "@vue-storefront/magento-types!CustomQuery:type"
            },
            {
              "kind": "Content",
              "text": ", customHeaders?: "
            },
            {
              "kind": "Reference",
              "text": "CustomHeaders",
              "canonicalReference": "@vue-storefront/magento-types!CustomHeaders:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "FetchResult",
              "canonicalReference": "@apollo/client/link/core!FetchResult:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "RemoveCouponFromCartMutation",
              "canonicalReference": "@vue-storefront/magento-types!RemoveCouponFromCartMutation:type"
            },
            {
              "kind": "Content",
              "text": ">>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 15
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "context",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "input",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "customQuery",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            },
            {
              "parameterName": "customHeaders",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              }
            }
          ],
          "name": "removeCouponFromCart"
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-api!removeItemFromCart:function(1)",
          "docComment": "/**\n * Remove item from cart.\n *\n * @example\n *\n * Simple usage:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // Assumes that the cart has an item with the UID 'MY='.\n * // Configure method parameters\n * const params = { cart_id: TEST_CART_ID, cart_item_uid: 'MY=' }\n *\n * const result = await sdk.magento.removeItemFromCart(params);\n *\n * // result will contain the updated cart.\n * // you can look at the cart items to see that the item with the UID 'MY=' has been removed.\n * const hasItem = result.data?.removeItemFromCart!.cart!.items!.find(item => item!.uid === 'MY=');\n * ```\n *\n * @example\n *\n * Creating a custom GraphQL query for manipulating the cart response data.\n * ```ts\n * module.exports = {\n *   integrations: {\n *     magento: {\n *       customQueries: {\n *         'remove-item-from-cart-custom-query': ({ variables, metadata }) => ({\n *            variables,\n *            query: `\n *              mutation removeItemFromCart($input: RemoveItemFromCartInput) {\n *                removeItemFromCart(input: $input) {\n *                  cart {\n *                    ${metadata.fields}\n *                  }\n *                }\n *              }`\n *          }),\n *       },\n *     }\n *   }\n * };\n * ```\n *\n * @example\n *\n * Using a custom GraphQL query created in the previous example.\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n * // reduce the amount of fields returned by the query, when compared to the default query\n * // this will reduce the amount of data transferred from the server to the client.\n *\n * // All we need is the cart ID and the email address of the customer.\n * const customQuery = {\n *   cart: 'remove-item-from-cart-custom-query',\n *   metadata: {\n *     fields: 'id email'\n *   }\n * };\n *\n * // Assumes that the cart has an item with the UID 'MY='.\n * // Uses params from the previous example and the custom query.\n * const result = await sdk.magento.removeItemFromCart(params, customQuery);\n *\n * // result will contain only the fields specified in the custom query.\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function removeItemFromCart(context: "
            },
            {
              "kind": "Reference",
              "text": "Context",
              "canonicalReference": "@vue-storefront/magento-api!Context:interface"
            },
            {
              "kind": "Content",
              "text": ", input: "
            },
            {
              "kind": "Reference",
              "text": "RemoveItemFromCartInput",
              "canonicalReference": "@vue-storefront/magento-types!RemoveItemFromCartInput:interface"
            },
            {
              "kind": "Content",
              "text": ", customQuery?: "
            },
            {
              "kind": "Reference",
              "text": "CustomQuery",
              "canonicalReference": "@vue-storefront/magento-types!CustomQuery:type"
            },
            {
              "kind": "Content",
              "text": ", customHeaders?: "
            },
            {
              "kind": "Reference",
              "text": "CustomHeaders",
              "canonicalReference": "@vue-storefront/magento-types!CustomHeaders:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "FetchResult",
              "canonicalReference": "@apollo/client/link/core!FetchResult:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "RemoveItemFromCartMutation",
              "canonicalReference": "@vue-storefront/magento-types!RemoveItemFromCartMutation:type"
            },
            {
              "kind": "Content",
              "text": ">>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 15
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "context",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "input",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "customQuery",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            },
            {
              "parameterName": "customHeaders",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              }
            }
          ],
          "name": "removeItemFromCart"
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-api!removeProductsFromWishlist:function(1)",
          "docComment": "/**\n * Remove products from wishlist Customer must be logged in to perform this operation. (token in headers)\n *\n * @example\n *\n * Simple usage:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // remove\n * const result = await sdk.magento.removeProductsFromWishlist({\n *  id: 'some-wishlist-id',\n *  items: ['some-product-id']\n * });\n * ```\n *\n * @example\n *\n * Creating a custom GraphQL query\n * ```ts\n * module.exports = {\n *   integrations: {\n *     magento: {\n *       customQueries: {\n *         'remove-products-from-wishlist-custom-query': ({ variables, metadata }) => ({\n *            variables,\n *            query: `\n *              mutation removeProductsFromWishlist($id: ID!, $items: [ID!]!) {\n *                removeProductsFromWishlist(wishlistId: $id, wishlistItemsIds: $items) {\n *                  wishlist {\n *                    ${metadata.fields}\n *                  }\n *                }\n *              }\n *            `\n *         }),\n *       },\n *     }\n *   }\n * };\n * ```\n *\n * @example\n *\n * Using a custom GraphQL query to reduce the amount of data returned by the API\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n * // reduce the amount of fields returned by the query, when compared to the default query\n * const customQuery = {\n *   removeProductsFromWishlist: 'remove-products-from-wishlist-custom-query',\n *   metadata: {\n *     fields: 'id'\n *   }\n * };\n *\n * const result = await sdk.magento.removeProductsFromWishlist({\n *  id: 'some-wishlist-id',\n *  items: ['item-id-1', 'item-id-2']\n * }, customQuery);\n *\n * // result should be narrowed to only contain the `id` field\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function removeProductsFromWishlist(context: "
            },
            {
              "kind": "Reference",
              "text": "Context",
              "canonicalReference": "@vue-storefront/magento-api!Context:interface"
            },
            {
              "kind": "Content",
              "text": ", input: "
            },
            {
              "kind": "Reference",
              "text": "RemoveProductsFromWishlistMutationVariables",
              "canonicalReference": "@vue-storefront/magento-types!RemoveProductsFromWishlistMutationVariables:type"
            },
            {
              "kind": "Content",
              "text": ", customQuery?: "
            },
            {
              "kind": "Reference",
              "text": "CustomQuery",
              "canonicalReference": "@vue-storefront/magento-types!CustomQuery:type"
            },
            {
              "kind": "Content",
              "text": ", customHeaders?: "
            },
            {
              "kind": "Reference",
              "text": "CustomHeaders",
              "canonicalReference": "@vue-storefront/magento-types!CustomHeaders:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "FetchResult",
              "canonicalReference": "@apollo/client/link/core!FetchResult:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "RemoveProductsFromWishlistMutation",
              "canonicalReference": "@vue-storefront/magento-types!RemoveProductsFromWishlistMutation:type"
            },
            {
              "kind": "Content",
              "text": ">>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 15
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "context",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "input",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "customQuery",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            },
            {
              "parameterName": "customHeaders",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              }
            }
          ],
          "name": "removeProductsFromWishlist"
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-api!requestPasswordResetEmail:function(1)",
          "docComment": "/**\n * Request password reset email\n *\n * @example\n *\n * Simple usage:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // trigger sending of password reset email\n * const result = await sdk.magento.requestPasswordResetEmail({ email: 'john.doe@gmail.com'});\n *\n * // result.data.requestPasswordResetEmail contains the boolean response from the API\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function requestPasswordResetEmail(context: "
            },
            {
              "kind": "Reference",
              "text": "Context",
              "canonicalReference": "@vue-storefront/magento-api!Context:interface"
            },
            {
              "kind": "Content",
              "text": ", input: "
            },
            {
              "kind": "Reference",
              "text": "RequestPasswordResetEmailMutationVariables",
              "canonicalReference": "@vue-storefront/magento-types!RequestPasswordResetEmailMutationVariables:type"
            },
            {
              "kind": "Content",
              "text": ", customHeaders?: "
            },
            {
              "kind": "Reference",
              "text": "CustomHeaders",
              "canonicalReference": "@vue-storefront/magento-types!CustomHeaders:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "FetchResult",
              "canonicalReference": "@apollo/client/link/core!FetchResult:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "RequestPasswordResetEmailMutation",
              "canonicalReference": "@vue-storefront/magento-types!RequestPasswordResetEmailMutation:type"
            },
            {
              "kind": "Content",
              "text": ">>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 13
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "context",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "input",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "customHeaders",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "name": "requestPasswordResetEmail"
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-api!resetPassword:function(1)",
          "docComment": "/**\n * Reset customer password.\n *\n * @example\n *\n * Simple usage:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // fetch resetPassword\n * const await sdk.magento.resetPassword({\n *   email: 'customer.email@gmail.com'\n *   newPassword: 'newPassword',\n *   resetPasswordToken: 'resetPasswordToken' // token obtained from email {@link @vue-storefront/magento-sdk#requestPasswordResetEmail}\n * });\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function resetPassword(context: "
            },
            {
              "kind": "Reference",
              "text": "Context",
              "canonicalReference": "@vue-storefront/magento-api!Context:interface"
            },
            {
              "kind": "Content",
              "text": ", input: "
            },
            {
              "kind": "Reference",
              "text": "ResetPasswordMutationVariables",
              "canonicalReference": "@vue-storefront/magento-types!ResetPasswordMutationVariables:type"
            },
            {
              "kind": "Content",
              "text": ", customHeaders?: "
            },
            {
              "kind": "Reference",
              "text": "CustomHeaders",
              "canonicalReference": "@vue-storefront/magento-types!CustomHeaders:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "FetchResult",
              "canonicalReference": "@apollo/client/link/core!FetchResult:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ResetPasswordMutation",
              "canonicalReference": "@vue-storefront/magento-types!ResetPasswordMutation:type"
            },
            {
              "kind": "Content",
              "text": ">>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 13
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "context",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "input",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "customHeaders",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "name": "resetPassword"
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-api!reviews:function(1)",
          "docComment": "/**\n * Fetch customer reviews\n *\n * @example\n *\n * Simple usage:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // fetch reviews, customer must be logged in\n * const result = await sdk.magento.reviews();\n *\n * // log all reviews\n * result?.data?.customer?.reviews?.items.forEach(review => console.log(review));\n * ```\n *\n * @example\n *\n * Creating a custom GraphQL query\n * ```ts\n * module.exports = {\n *   integrations: {\n *     magento: {\n *       customQueries: {\n *         'customer-product-review-custom-query': ({ variables, metadata }) => ({\n *            variables,\n *            query: `\n *              query reviews($pageSize: Int = 10, $currentPage: Int = 1) {\n *                customer {\n *                  reviews(pageSize: $pageSize, currentPage: $currentPage) {\n *                    ${metadata?.fields}\n *                  }\n *                }\n *              }\n *            `\n *         }),\n *       },\n *     }\n *   }\n * };\n * ```\n *\n * @example\n *\n * Using a custom GraphQL query to reduce the amount of fields returned by the query\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n * // reduce the amount of fields returned by the query, when compared to the default query\n * // fetch only text\n *\n * const customQuery = {\n *   reviews: 'customer-product-review-custom-query',\n *   metadata: {\n *     fields: 'items { text }'\n *   }\n * };\n *\n * const result = await sdk.magento.reviews({}, customQuery);\n *\n * // result will only contain the text of the reviews\n * result?.data?.customer?.reviews?.items.forEach(review => console.log(review.text));\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function reviews(context: "
            },
            {
              "kind": "Reference",
              "text": "Context",
              "canonicalReference": "@vue-storefront/magento-api!Context:interface"
            },
            {
              "kind": "Content",
              "text": ", searchParams?: "
            },
            {
              "kind": "Reference",
              "text": "CustomerProductReviewParams",
              "canonicalReference": "@vue-storefront/magento-types!CustomerProductReviewParams:type"
            },
            {
              "kind": "Content",
              "text": ", customQuery?: "
            },
            {
              "kind": "Reference",
              "text": "CustomQuery",
              "canonicalReference": "@vue-storefront/magento-types!CustomQuery:type"
            },
            {
              "kind": "Content",
              "text": ", customHeaders?: "
            },
            {
              "kind": "Reference",
              "text": "CustomHeaders",
              "canonicalReference": "@vue-storefront/magento-types!CustomHeaders:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ApolloQueryResult",
              "canonicalReference": "@apollo/client/core!ApolloQueryResult:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CustomerProductReviewQuery",
              "canonicalReference": "@vue-storefront/magento-types!CustomerProductReviewQuery:type"
            },
            {
              "kind": "Content",
              "text": ">>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 15
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "context",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "searchParams",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "customQuery",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            },
            {
              "parameterName": "customHeaders",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              }
            }
          ],
          "name": "reviews"
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-api!revokeCustomerToken:function(1)",
          "docComment": "/**\n * Revoke customer token. It is used to log out the current customer.\n *\n * @example\n *\n * Simple usage if the customer is logged in and the token is valid:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // token will be invalidated and the customer will be logged out\n * await sdk.magento.revokeCustomerToken();\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function revokeCustomerToken(context: "
            },
            {
              "kind": "Reference",
              "text": "Context",
              "canonicalReference": "@vue-storefront/magento-api!Context:interface"
            },
            {
              "kind": "Content",
              "text": ", customHeaders?: "
            },
            {
              "kind": "Reference",
              "text": "CustomHeaders",
              "canonicalReference": "@vue-storefront/magento-types!CustomHeaders:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "FetchResult",
              "canonicalReference": "@apollo/client/link/core!FetchResult:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "RevokeCustomerTokenMutation",
              "canonicalReference": "@vue-storefront/magento-types!RevokeCustomerTokenMutation:type"
            },
            {
              "kind": "Content",
              "text": ">>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "context",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "customHeaders",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "revokeCustomerToken"
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-api!route:function(1)",
          "docComment": "/**\n * Resolve a route object data\n *\n * @example\n *\n * Simple usage:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // fetch route object data\n * const result = await sdk.magento.route({\n *   url: 'aether-gym-pant.html'\n * });\n *\n * // Example result:\n * {\n *    data: {\n *      route: { type: 'PRODUCT', sku: 'MP11', __typename: 'ConfigurableProduct' }\n *    },\n *    loading: false,\n *    networkStatus: 7\n * }\n * ```\n *\n * *\n *\n * @example\n *\n * Creating a custom GraphQL query to fetch additional data:\n * ```ts\n * module.exports = {\n *   integrations: {\n *     magento: {\n *       customQueries: {\n *         'route-custom-query': ({ variables, metadata }) => ({\n *            variables,\n *            query: `\n *              query route($url: String!) {\n *                route(url: $url) {\n *                  ${metadata?.fields}\n *                }\n *              }\n *            }`\n *         }),\n *       },\n *     }\n *   }\n * };\n * ```\n *\n * @example\n *\n * Using a custom GraphQL query created in the previous example.\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // reduce the amount of fields returned by the query, when compared to the default query\n * const customQuery = {\n *   route: 'route-custom-query',\n *   metadata: {\n *     fields: 'type ... on CategoryInterface { uid name image}' // fetch additional name and image fields\n *   }\n * };\n *\n * // data will contain only the fields specified in the custom query.\n * const { data } = await sdk.magento.route({ url: 'women.html' }, customQuery);\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function route(context: "
            },
            {
              "kind": "Reference",
              "text": "Context",
              "canonicalReference": "@vue-storefront/magento-api!Context:interface"
            },
            {
              "kind": "Content",
              "text": ", url: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", customQuery?: "
            },
            {
              "kind": "Reference",
              "text": "CustomQuery",
              "canonicalReference": "@vue-storefront/magento-types!CustomQuery:type"
            },
            {
              "kind": "Content",
              "text": ", customHeaders?: "
            },
            {
              "kind": "Reference",
              "text": "CustomHeaders",
              "canonicalReference": "@vue-storefront/magento-types!CustomHeaders:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ApolloQueryResult",
              "canonicalReference": "@apollo/client/core!ApolloQueryResult:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "RouteQuery",
              "canonicalReference": "@vue-storefront/magento-types!RouteQuery:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "RoutableInterface",
              "canonicalReference": "@vue-storefront/magento-types!RoutableInterface:interface"
            },
            {
              "kind": "Content",
              "text": ">>>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 17
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "context",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "url",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "customQuery",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            },
            {
              "parameterName": "customHeaders",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              }
            }
          ],
          "name": "route"
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-api!setBillingAddressOnCart:function(1)",
          "docComment": "/**\n * Set billing address on the cart\n *\n * @example\n *\n * Simple usage:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // Prepare parameters\n * const params = {\n *   cart_id: 'some-cart-id',\n *   billing_address: {\n *       address: {\n *        firstname: 'John',\n *        lastname: 'Doe',\n *        city: 'New York',\n *        country_code: 'US',\n *        street: ['Street 1', 'Street 2'],\n *        telephone: '123 123 123',\n *        region: 'AL',\n *        postcode: '10001',\n *        save_in_address_book: false\n *       },\n *     }\n * };\n *\n * // Set shipping address on the cart\n * await sdk.magento.setBillingAddressOnCart(params);\n * ```\n *\n * @example\n *\n * Creating a custom GraphQL query for reducing the amount of fields returned by the query, when compared to the default query.\n * ```ts\n * module.exports = {\n *   integrations: {\n *     magento: {\n *       customQueries: {\n *         'set-billing-address-on-cart-custom-query': ({ variables, metadata }) => ({\n *            variables,\n *            query: `\n *              mutation setBillingAddressOnCart($input: SetBillingAddressOnCartInput) {\n *                setBillingAddressOnCart(input: $input) {\n *                cart {\n *                  ${metadata.fields}\n *                }\n *              }\n *            }`\n *         }),\n *       },\n *     }\n *   }\n * };\n * ```\n *\n * @example\n *\n * Using a custom GraphQL query created in the previous example.\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // reduce the amount of fields returned by the query, when compared to the default query\n * const customQuery = {\n *   setBillingAddressOnCart: 'set-billing-address-on-cart-custom-query',\n *   metadata: {\n *     fields: 'billing_address { city }'\n *   }\n * };\n *\n * // data will contain only the fields specified in the custom query.\n * const { data } = await sdk.magento.setBillingAddressOnCart(params, customQuery);\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function setBillingAddressOnCart(context: "
            },
            {
              "kind": "Reference",
              "text": "Context",
              "canonicalReference": "@vue-storefront/magento-api!Context:interface"
            },
            {
              "kind": "Content",
              "text": ", input: "
            },
            {
              "kind": "Reference",
              "text": "SetBillingAddressOnCartInput",
              "canonicalReference": "@vue-storefront/magento-types!SetBillingAddressOnCartInput:interface"
            },
            {
              "kind": "Content",
              "text": ", customQuery?: "
            },
            {
              "kind": "Reference",
              "text": "CustomQuery",
              "canonicalReference": "@vue-storefront/magento-types!CustomQuery:type"
            },
            {
              "kind": "Content",
              "text": ", customHeaders?: "
            },
            {
              "kind": "Reference",
              "text": "CustomHeaders",
              "canonicalReference": "@vue-storefront/magento-types!CustomHeaders:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "FetchResult",
              "canonicalReference": "@apollo/client/link/core!FetchResult:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SetBillingAddressOnCartMutation",
              "canonicalReference": "@vue-storefront/magento-types!SetBillingAddressOnCartMutation:type"
            },
            {
              "kind": "Content",
              "text": ">>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 15
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "context",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "input",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "customQuery",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            },
            {
              "parameterName": "customHeaders",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              }
            }
          ],
          "name": "setBillingAddressOnCart"
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-api!setGuestEmailOnCart:function(1)",
          "docComment": "/**\n * Set the guest user email on the cart\n *\n * @example\n *\n * Simple usage:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // set an email on the cart\n * const result = await sdk.magento.setGuestEmailOnCart({ cart_id: 'some-cart-id', email: 'some-email' });\n *\n * // new email will be set on the cart\n * // data.setGuestEmailOnCart.cart.email will contain the email address\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function setGuestEmailOnCart(context: "
            },
            {
              "kind": "Reference",
              "text": "Context",
              "canonicalReference": "@vue-storefront/magento-api!Context:interface"
            },
            {
              "kind": "Content",
              "text": ", input: "
            },
            {
              "kind": "Reference",
              "text": "SetGuestEmailOnCartInput",
              "canonicalReference": "@vue-storefront/magento-types!SetGuestEmailOnCartInput:interface"
            },
            {
              "kind": "Content",
              "text": ", customQuery?: "
            },
            {
              "kind": "Reference",
              "text": "CustomQuery",
              "canonicalReference": "@vue-storefront/magento-types!CustomQuery:type"
            },
            {
              "kind": "Content",
              "text": ", customHeaders?: "
            },
            {
              "kind": "Reference",
              "text": "CustomHeaders",
              "canonicalReference": "@vue-storefront/magento-types!CustomHeaders:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "FetchResult",
              "canonicalReference": "@apollo/client/link/core!FetchResult:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SetGuestEmailOnCartMutation",
              "canonicalReference": "@vue-storefront/magento-types!SetGuestEmailOnCartMutation:type"
            },
            {
              "kind": "Content",
              "text": ">>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 15
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "context",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "input",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "customQuery",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            },
            {
              "parameterName": "customHeaders",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              }
            }
          ],
          "name": "setGuestEmailOnCart"
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-api!setPaymentMethodOnCart:function(1)",
          "docComment": "/**\n * Set payment method on cart.\n *\n * @example\n *\n * Simple usage:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * const params = {\n *   cart_id: 'some-cart-id'\n *   payment_method: {\n *     code: 'checkmo'\n *   }\n * };\n *\n * // sets payment method on cart and return payment information\n * // data contains properties like `available_payment_methods` and `selected_payment_method`\n * const { data } = await sdk.magento.setPaymentMethodOnCart(params);\n * ```\n *\n * @example\n *\n * Creating a custom GraphQL query for configuring the response data structure\n * ```ts\n * module.exports = {\n *   integrations: {\n *     magento: {\n *       customQueries: {\n *         'set-payment-method-on-cart-custom-query': ({ variables, metadata }) => ({\n *            variables,\n *            query: `\n *              mutation setPaymentMethodOnCart($input: SetPaymentMethodOnCartInput) {\n *                setPaymentMethodOnCart(input: $input) {\n *                  cart {\n *                    ${metadata.fields}\n *                  }\n *                }\n *              }\n *            `\n *         }),\n *       },\n *     }\n *   }\n * };\n * ```\n *\n * @example\n *\n * Using a custom GraphQL query created with the `set-payment-method-on-cart-custom-query` in the previous example\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n * // reduce the amount of fields returned by the query, when compared to the default query\n * const customQuery = {\n *   setPaymentMethodOnCart: 'set-payment-method-on-cart-custom-query',\n *   metadata: {\n *     fields: 'available_payment_methods { code title }'\n *   }\n * };\n *\n * // Params and options are the same as in the previous example\n * const { data } = await sdk.magento.setPaymentMethodOnCart(params, customQuery);\n *\n * // data contains only the properties selected in the custom query\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function setPaymentMethodOnCart(context: "
            },
            {
              "kind": "Reference",
              "text": "Context",
              "canonicalReference": "@vue-storefront/magento-api!Context:interface"
            },
            {
              "kind": "Content",
              "text": ", input: "
            },
            {
              "kind": "Reference",
              "text": "SetPaymentMethodOnCartInputs",
              "canonicalReference": "@vue-storefront/magento-types!SetPaymentMethodOnCartInputs:interface"
            },
            {
              "kind": "Content",
              "text": ", customQuery?: "
            },
            {
              "kind": "Reference",
              "text": "CustomQuery",
              "canonicalReference": "@vue-storefront/magento-types!CustomQuery:type"
            },
            {
              "kind": "Content",
              "text": ", customHeaders?: "
            },
            {
              "kind": "Reference",
              "text": "CustomHeaders",
              "canonicalReference": "@vue-storefront/magento-types!CustomHeaders:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "FetchResult",
              "canonicalReference": "@apollo/client/link/core!FetchResult:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SetPaymentMethodOnCartMutation",
              "canonicalReference": "@vue-storefront/magento-types!SetPaymentMethodOnCartMutation:type"
            },
            {
              "kind": "Content",
              "text": ">>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 15
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "context",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "input",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "customQuery",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            },
            {
              "parameterName": "customHeaders",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              }
            }
          ],
          "name": "setPaymentMethodOnCart"
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-api!setShippingAddressesOnCart:function(1)",
          "docComment": "/**\n * Set shipping addresses on the cart It should be used to set single or multiple shipping addresses on the cart.\n *\n * @example\n *\n * Simple usage:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // Prepare parameters\n * const params = {\n *   cart_id: 'some-cart-id',\n *   shipping_addresses: [\n *     {\n *       address: {\n *        firstname: 'John',\n *        lastname: 'Doe',\n *        city: 'New York',\n *        country_code: 'US',\n *        street: ['Street 1', 'Street 2'],\n *        telephone: '123 123 123',\n *        region: 'AL',\n *        postcode: '10001',\n *        save_in_address_book: false\n *       },\n *     }\n *   ]\n * };\n *\n * // Set shipping address on the cart\n * await sdk.magento.setShippingAddressesOnCart(params);\n * ```\n *\n * @example\n *\n * You can also use the `setShippingAddressesOnCart` method to set multiple shipping addresses on the cart.\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // Prepare parameters\n * const params = {\n *  cart_id: 'some-cart-id',\n *  shipping_addresses: [\n *   {\n *     address: address1, // address1 is an object with address details\n *   },\n *   {\n *     address: address2, // address2 is an object with address details\n *   }\n * ];\n *\n * // This will set address1 and address2 on the cart\n * await sdk.magento.setShippingAddressesOnCart(params);\n * ```\n *\n * @example\n *\n * Creating a custom GraphQL query for reducing the amount of fields returned by the query, when compared to the default query.\n * ```ts\n * module.exports = {\n *   integrations: {\n *     magento: {\n *       customQueries: {\n *         'set-shipping-addresses-on-cart-custom-query': ({ variables, metadata }) => ({\n *            variables,\n *            query: `\n *              mutation setShippingAddressesOnCart($input: SetShippingAddressesOnCartInput) {\n *                setShippingAddressesOnCart(input: $input) {\n *                cart {\n *                  ${metadata.fields}\n *                }\n *              }\n *            }`\n *         }),\n *       },\n *     }\n *   }\n * };\n * ```\n *\n * @example\n *\n * Using a custom GraphQL query created in the previous example.\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // reduce the amount of fields returned by the query, when compared to the default query\n * const customQuery = {\n *   cart: 'set-shipping-addresses-on-cart-custom-query',\n *   metadata: {\n *     fields: 'shipping_addresses { city }'\n *   }\n * };\n *\n * // data will contain only the fields specified in the custom query.\n * const { data } = await sdk.magento.setShippingAddressesOnCart(params, customQuery);\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function setShippingAddressesOnCart(context: "
            },
            {
              "kind": "Reference",
              "text": "Context",
              "canonicalReference": "@vue-storefront/magento-api!Context:interface"
            },
            {
              "kind": "Content",
              "text": ", input: "
            },
            {
              "kind": "Reference",
              "text": "SetShippingAddressesOnCartInput",
              "canonicalReference": "@vue-storefront/magento-types!SetShippingAddressesOnCartInput:interface"
            },
            {
              "kind": "Content",
              "text": ", customQuery?: "
            },
            {
              "kind": "Reference",
              "text": "CustomQuery",
              "canonicalReference": "@vue-storefront/magento-types!CustomQuery:type"
            },
            {
              "kind": "Content",
              "text": ", customHeaders?: "
            },
            {
              "kind": "Reference",
              "text": "CustomHeaders",
              "canonicalReference": "@vue-storefront/magento-types!CustomHeaders:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "FetchResult",
              "canonicalReference": "@apollo/client/link/core!FetchResult:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SetShippingAddressesOnCartMutation",
              "canonicalReference": "@vue-storefront/magento-types!SetShippingAddressesOnCartMutation:type"
            },
            {
              "kind": "Content",
              "text": ">>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 15
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "context",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "input",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "customQuery",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            },
            {
              "parameterName": "customHeaders",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              }
            }
          ],
          "name": "setShippingAddressesOnCart"
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-api!setShippingMethodsOnCart:function(1)",
          "docComment": "/**\n * Set shipping methods on cart. Before using this method, you need to set shipping address on cart.\n *\n * @example\n *\n * Simple usage:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // Assuming that shipping address is already set on cart.\n * // if not, you need to set shipping address on cart first.\n *\n * const params = {\n *   cart_id: 'some-cart-id',\n *   shipping_methods: [\n *     {\n *       carrier_code: 'flatrate',\n *       method_code: 'flatrate'\n *     }\n *   ]\n * };\n *\n * const { data } = await sdk.magento.setShippingMethodsOnCart(params);\n *\n * // you can get set shipping methods on cart response from\n * // data?.setShippingMethodsOnCart?.cart?.shipping_addresses?.[0]?.selected_shipping_method?.method_code\n * ```\n *\n * @example\n *\n * Creating a custom GraphQL query to change the amount of fields returned by the query, when compared to the default query\n * ```ts\n * module.exports = {\n *   integrations: {\n *     magento: {\n *       customQueries: {\n *         'set-shipping-methods-on-cart-custom-query': ({ variables, metadata }) => ({\n *            variables,\n *            query: `\n *              mutation setShippingMethodsOnCart($input: SetShippingMethodsOnCartInput) {\n *                setShippingMethodsOnCart(input: $input) {\n *                  cart {\n *                    ${metadata.fields}\n *                  }\n *                }\n *              }`\n *         }),\n *       },\n *     }\n *   }\n * };\n * ```\n *\n * @example\n *\n * Using a custom GraphQL query created in the previous example\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n * // reduce the amount of fields returned by the query, when compared to the default query\n * // you will get only selected_shipping_method.method_code field\n *\n * const customQuery = {\n *   setShippingMethodsOnCart: 'set-shipping-methods-on-cart-custom-query',\n *   metadata: {\n *     fields: 'shipping_addresses { selected_shipping_method { method_code } }'\n *   }\n * };\n *\n * const params = {\n *   cart_id: 'some-cart-id',\n *   shipping_methods: [\n *     {\n *       carrier_code: 'flatrate',\n *       method_code: 'flatrate'\n *     }\n *   ]\n * };\n *\n * const { data } = await sdk.magento.setShippingMethodsOnCart(params, customQuery);\n *\n * // data will contain only the fields specified in the custom query.\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function setShippingMethodsOnCart(context: "
            },
            {
              "kind": "Reference",
              "text": "Context",
              "canonicalReference": "@vue-storefront/magento-api!Context:interface"
            },
            {
              "kind": "Content",
              "text": ", input: "
            },
            {
              "kind": "Reference",
              "text": "SetShippingMethodsOnCartInput",
              "canonicalReference": "@vue-storefront/magento-types!SetShippingMethodsOnCartInput:interface"
            },
            {
              "kind": "Content",
              "text": ", customQuery?: "
            },
            {
              "kind": "Reference",
              "text": "CustomQuery",
              "canonicalReference": "@vue-storefront/magento-types!CustomQuery:type"
            },
            {
              "kind": "Content",
              "text": ", customHeaders?: "
            },
            {
              "kind": "Reference",
              "text": "CustomHeaders",
              "canonicalReference": "@vue-storefront/magento-types!CustomHeaders:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "FetchResult",
              "canonicalReference": "@apollo/client/link/core!FetchResult:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SetShippingMethodsOnCartMutation",
              "canonicalReference": "@vue-storefront/magento-types!SetShippingMethodsOnCartMutation:type"
            },
            {
              "kind": "Content",
              "text": ">>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 15
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "context",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "input",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "customQuery",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            },
            {
              "parameterName": "customHeaders",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              }
            }
          ],
          "name": "setShippingMethodsOnCart"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@vue-storefront/magento-api!Storage_2:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface Storage "
            }
          ],
          "releaseTag": "Public",
          "name": "Storage_2",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@vue-storefront/magento-api!Storage_2#get:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get: "
                },
                {
                  "kind": "Content",
                  "text": "(name: string) => any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "get",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@vue-storefront/magento-api!Storage_2#remove:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "remove: "
                },
                {
                  "kind": "Content",
                  "text": "(name: string) => any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "remove",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@vue-storefront/magento-api!Storage_2#removeAll:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "removeAll: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "removeAll",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@vue-storefront/magento-api!Storage_2#set:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "set: "
                },
                {
                  "kind": "Content",
                  "text": "(name: string, value: any) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "set",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-api!Store:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type Store = "
            },
            {
              "kind": "Content",
              "text": "{\n    code: string;\n    storeGroup?: "
            },
            {
              "kind": "Reference",
              "text": "StoreGroup",
              "canonicalReference": "@vue-storefront/magento-api!StoreGroup:type"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "Store",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-api!storeConfig:function(1)",
          "docComment": "/**\n * Fetch store configuration\n *\n * @example\n *\n * Simple usage:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // fetch store configuration\n * const result = await sdk.magento.storeConfig();\n *\n * // result?.data?.storeConfig contains the store configuration\n * ```\n *\n * @example\n * ```ts\n * module.exports = {\n *   integrations: {\n *     magento: {\n *       customQueries: {\n *         'store-config-custom-query': ({ variables, metadata }) => ({\n *            variables,\n *            query: `\n *              query storeConfig {\n *                storeConfig {\n *                  ${metadata?.fields}\n *                }\n *              }\n *            `\n *         }),\n *       },\n *     }\n *   }\n * };\n * ```\n *\n * @example\n *\n * Using a custom GraphQL query to select only the fields you need\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n * // we want to fetch only logo related data\n * const customQuery = {\n *   storeConfig: 'store-config-custom-query',\n *   metadata: {\n *     fields: 'logo_alt logo_height logo_width'\n *   }\n * };\n *\n * const result = await sdk.magento.storeConfig(customQuery);\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function storeConfig(context: "
            },
            {
              "kind": "Reference",
              "text": "Context",
              "canonicalReference": "@vue-storefront/magento-api!Context:interface"
            },
            {
              "kind": "Content",
              "text": ", customQuery?: "
            },
            {
              "kind": "Reference",
              "text": "CustomQuery",
              "canonicalReference": "@vue-storefront/magento-types!CustomQuery:type"
            },
            {
              "kind": "Content",
              "text": ", customHeaders?: "
            },
            {
              "kind": "Reference",
              "text": "CustomHeaders",
              "canonicalReference": "@vue-storefront/magento-types!CustomHeaders:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ApolloQueryResult",
              "canonicalReference": "@apollo/client/core!ApolloQueryResult:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "StoreConfigQuery",
              "canonicalReference": "@vue-storefront/magento-types!StoreConfigQuery:type"
            },
            {
              "kind": "Content",
              "text": ">>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 13
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "context",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "customQuery",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "customHeaders",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "name": "storeConfig"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-api!StoreGroup:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type StoreGroup = "
            },
            {
              "kind": "Content",
              "text": "{\n    code: string;\n    defaultStore: string;\n    stores: "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<string, "
            },
            {
              "kind": "Reference",
              "text": "Store",
              "canonicalReference": "@vue-storefront/magento-api!Store:type"
            },
            {
              "kind": "Content",
              "text": ">;\n    website?: "
            },
            {
              "kind": "Reference",
              "text": "Website",
              "canonicalReference": "@vue-storefront/magento-api!Website:type"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "StoreGroup",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 8
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-api!subscribeEmailToNewsletter:function(1)",
          "docComment": "/**\n * Allows guests and registered customers to sign up to receive newsletters.\n *\n * @example\n *\n * Simple usage:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // subscribe an email in the newsletter. * const email = 'somemail@vsf.local';\n * const result = await sdk.magento.subscribeEmailToNewsletter({ email });\n *\n * result.data?.subscribeEmailToNewsletter?.status; // status of the operation. Possible values: https://developer.adobe.com/commerce/webapi/graphql/schema/customer/mutations/subscribe-email-to-newsletter/#subscriptionstatusesenum\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function subscribeEmailToNewsletter(context: "
            },
            {
              "kind": "Reference",
              "text": "Context",
              "canonicalReference": "@vue-storefront/magento-api!Context:interface"
            },
            {
              "kind": "Content",
              "text": ", { email }: "
            },
            {
              "kind": "Reference",
              "text": "SubscribeEmailToNewsletterMutationVariables",
              "canonicalReference": "@vue-storefront/magento-types!SubscribeEmailToNewsletterMutationVariables:type"
            },
            {
              "kind": "Content",
              "text": ", customHeaders?: "
            },
            {
              "kind": "Reference",
              "text": "CustomHeaders",
              "canonicalReference": "@vue-storefront/magento-types!CustomHeaders:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "FetchResult",
              "canonicalReference": "@apollo/client/link/core!FetchResult:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SubscribeEmailToNewsletterMutation",
              "canonicalReference": "@vue-storefront/magento-types!SubscribeEmailToNewsletterMutation:type"
            },
            {
              "kind": "Content",
              "text": ">>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 13
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "context",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "{ email }",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "customHeaders",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "name": "subscribeEmailToNewsletter"
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-api!updateCartItems:function(1)",
          "docComment": "/**\n * Update items in the cart\n *\n * @example\n *\n * Simple usage, updating the quantity of a cart item:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // update the quantity of a cart item\n * const result = await sdk.magento.updateCartItems({\n *  cart_id: 'some-cart-id'\n *  cart_items: [{\n *      cart_item_uid: 'MY=',\n *      quantity: 10 // update the quantity to 10\n *     }]\n * });\n *\n * // result will contain the updated cart.\n * ```\n *\n * @example\n *\n * Creating a custom GraphQL query for manipulating the cart response data.\n * ```ts\n * module.exports = {\n *   integrations: {\n *     magento: {\n *       customQueries: {\n *         'update-cart-items-custom-query': ({ variables, metadata }) => ({\n *            variables,\n *            query: `\n *              mutation updateCartItems($input: UpdateCartItemsInput) {\n *                updateCartItems(input: $input) {\n *                  cart {\n *                    ${metadata.fields}\n *                  }\n *                 }\n *              }`\n *         }),\n *       },\n *     }\n *   }\n * };\n * ```\n *\n * @example\n *\n * Using a custom GraphQL query created in the previous example. Note that the custom query must be passed to the `customQuery` property of the `options` parameter. The `metadata` property of the `options` parameter can be used to pass additional data to the custom query.\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n * // reduce the amount of fields returned by the query, when compared to the default query\n * const customQuery = {\n *   updateCartItems: 'update-cart-items-custom-query',\n *   metadata: {\n *     fields: 'id items { uid quantity product { uid sku }}'\n *   }\n * };\n *\n * // update the quantity of a cart item with params and custom query\n * // Params are the same as in the previous example.\n * const result = await sdk.magento.updateCartItems(params, customQuery);\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function updateCartItems(context: "
            },
            {
              "kind": "Reference",
              "text": "Context",
              "canonicalReference": "@vue-storefront/magento-api!Context:interface"
            },
            {
              "kind": "Content",
              "text": ", input: "
            },
            {
              "kind": "Reference",
              "text": "UpdateCartItemsInput",
              "canonicalReference": "@vue-storefront/magento-types!UpdateCartItemsInput:interface"
            },
            {
              "kind": "Content",
              "text": ", customQuery?: "
            },
            {
              "kind": "Reference",
              "text": "CustomQuery",
              "canonicalReference": "@vue-storefront/magento-types!CustomQuery:type"
            },
            {
              "kind": "Content",
              "text": ", customHeaders?: "
            },
            {
              "kind": "Reference",
              "text": "CustomHeaders",
              "canonicalReference": "@vue-storefront/magento-types!CustomHeaders:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "FetchResult",
              "canonicalReference": "@apollo/client/link/core!FetchResult:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "UpdateCartItemsMutation",
              "canonicalReference": "@vue-storefront/magento-types!UpdateCartItemsMutation:type"
            },
            {
              "kind": "Content",
              "text": ">>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 15
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "context",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "input",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "customQuery",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            },
            {
              "parameterName": "customHeaders",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              }
            }
          ],
          "name": "updateCartItems"
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-api!updateCustomer:function(1)",
          "docComment": "/**\n * Update customer data. Customer data is updated based on the current customer token.\n *\n * @example\n *\n * Simple usage:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // Updates customer first name\n * const result = await sdk.magento.updateCustomer({\n *   firstname: 'New John'\n * });\n *\n * // result contains updated customer data\n * console.log(result); // result.data.updateCustomerV2.customer.firstname === 'New John'\n * ```\n *\n * @example\n *\n * Creating a custom GraphQL query\n * ```ts\n * module.exports = {\n *   integrations: {\n *     magento: {\n *       customQueries: {\n *         'update-customer-custom-query': ({ variables, metadata }) => ({\n *            variables,\n *            query: `\n *              mutation updateCustomer($input: CustomerUpdateInput!) {\n *                updateCustomerV2(input: $input) {\n *                  customer {\n *                    ${metadata.fields}\n *                  }\n *                }\n *              }\n *            `\n *         }),\n *       },\n *     }\n *   }\n * };\n * ```\n *\n * @example\n *\n * Using a custom GraphQL query to reduce the amount of data returned by the query\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n * // reduce the amount of fields returned by the query, when compared to the default query\n * const customQuery = {\n *   updateCustomer: 'update-customer-custom-query',\n *   metadata: {\n *     fields: 'firstname lastname'\n *   }\n * };\n *\n * const result = await sdk.magento.updateCustomer({\n *   firstname: 'New John'\n *   lastname: 'New Doe'\n * }, customQuery);\n *\n * // result contains only the fields specified in the custom query\n * // result.data.updateCustomerV2.customer.firstname === 'New John'\n * // result.data.updateCustomerV2.customer.lastname === 'New Doe'\n * console.log(result); // result.data.updateCustomerV2.customer.firstname === 'New John'\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function updateCustomer(context: "
            },
            {
              "kind": "Reference",
              "text": "Context",
              "canonicalReference": "@vue-storefront/magento-api!Context:interface"
            },
            {
              "kind": "Content",
              "text": ", input: "
            },
            {
              "kind": "Reference",
              "text": "CustomerUpdateInput",
              "canonicalReference": "@vue-storefront/magento-types!CustomerUpdateInput:interface"
            },
            {
              "kind": "Content",
              "text": ", customQuery?: "
            },
            {
              "kind": "Reference",
              "text": "CustomQuery",
              "canonicalReference": "@vue-storefront/magento-types!CustomQuery:type"
            },
            {
              "kind": "Content",
              "text": ", customHeaders?: "
            },
            {
              "kind": "Reference",
              "text": "CustomHeaders",
              "canonicalReference": "@vue-storefront/magento-types!CustomHeaders:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "FetchResult",
              "canonicalReference": "@apollo/client/link/core!FetchResult:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "UpdateCustomerMutation",
              "canonicalReference": "@vue-storefront/magento-types!UpdateCustomerMutation:type"
            },
            {
              "kind": "Content",
              "text": ">>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 15
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "context",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "input",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "customQuery",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            },
            {
              "parameterName": "customHeaders",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              }
            }
          ],
          "name": "updateCustomer"
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-api!updateCustomerAddress:function(1)",
          "docComment": "/**\n * Update customer address The user needs to be logged in in order to send this request\n *\n * @example\n *\n * Simple usage:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // fetch updated customer address\n * const result = await sdk.magento.updateCustomerAddress();\n * ```\n *\n * @example\n *\n * Creating a custom GraphQL query for updating customer address\n * ```ts\n * module.exports = {\n *   integrations: {\n *     magento: {\n *       customQueries: {\n *         'update-customer-address-custom-query': ({ variables, metadata }) => ({\n *            variables,\n *            query: `\n *              mutation updateCustomerAddress($id: Int!, $input: CustomerAddressInput) {\n *                updateCustomerAddress(id: $id, input: $input) {\n *                  ${metadata.fields}\n *                }\n *              }\n *              `\n *            `\n *         }),\n *       },\n *     }\n *   }\n * };\n * ```\n *\n * @example\n *\n * Using a custom GraphQL query to update customer address\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n * // reduce the amount of fields returned by the query, when compared to the default query\n * const customQuery = {\n *   updateCustomerAddress: 'update-customer-address-custom-query',\n *   metadata: {\n *     fields: 'id city company'\n *   }\n * };\n *\n * const result = await sdk.magento.updateCustomerAddress({ id: 308, input: { city: \"Warsaw\" }  }, customQuery);\n *\n * // result will contain only the fields specified in the custom query.\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function updateCustomerAddress(context: "
            },
            {
              "kind": "Reference",
              "text": "Context",
              "canonicalReference": "@vue-storefront/magento-api!Context:interface"
            },
            {
              "kind": "Content",
              "text": ", params: "
            },
            {
              "kind": "Reference",
              "text": "UpdateCustomerAddressMutationVariables",
              "canonicalReference": "@vue-storefront/magento-types!UpdateCustomerAddressMutationVariables:type"
            },
            {
              "kind": "Content",
              "text": ", customQuery?: "
            },
            {
              "kind": "Reference",
              "text": "CustomQuery",
              "canonicalReference": "@vue-storefront/magento-types!CustomQuery:type"
            },
            {
              "kind": "Content",
              "text": ", customHeaders?: "
            },
            {
              "kind": "Reference",
              "text": "CustomHeaders",
              "canonicalReference": "@vue-storefront/magento-types!CustomHeaders:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "FetchResult",
              "canonicalReference": "@apollo/client/link/core!FetchResult:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "UpdateCustomerAddressMutation",
              "canonicalReference": "@vue-storefront/magento-types!UpdateCustomerAddressMutation:type"
            },
            {
              "kind": "Content",
              "text": ">>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 15
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "context",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "params",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "customQuery",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            },
            {
              "parameterName": "customHeaders",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              }
            }
          ],
          "name": "updateCustomerAddress"
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-api!updateCustomerEmail:function(1)",
          "docComment": "/**\n * Update customer email\n *\n * @example\n *\n * Simple usage:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // update customer\n * const result = await sdk.magento.updateCustomerEmail({ email: \"johndoe@example.com\", password: \"hunter2\" });\n * ```\n *\n * @example\n *\n * Creating a custom GraphQL query for updating customer\n * ```ts\n * module.exports = {\n *   integrations: {\n *     magento: {\n *       customQueries: {\n *         'update-customer-email-custom-query': ({ variables, metadata }) => ({\n *            variables,\n *            query: `\n *              mutation updateCustomerEmail($email: String!, $password: String!) {\n *                updateCustomerEmail(email: $email, password: $password){\n *                  customer {\n *                    ${metadata.fields}\n *                  }\n *                }\n *              }\n *            `\n *         }),\n *       },\n *     }\n *   }\n * };\n * ```\n *\n * @example\n *\n * Using a custom GraphQL query to update customer\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n * // reduce the amount of fields returned by the query, when compared to the default query\n * const customQuery = {\n *   updateCustomerEmail: 'update-customer-email-custom-query',\n *   metadata: {\n *     fields: 'email firstname'\n *   }\n * };\n *\n * const result = await sdk.magento.updateCustomerEmail({ email: \"johndoe@example.com\", password: \"hunter2\" }, customQuery);\n *\n * // Result will contain only the fields specified in the custom query.\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function updateCustomerEmail(context: "
            },
            {
              "kind": "Reference",
              "text": "Context",
              "canonicalReference": "@vue-storefront/magento-api!Context:interface"
            },
            {
              "kind": "Content",
              "text": ", input: "
            },
            {
              "kind": "Reference",
              "text": "UpdateCustomerEmailMutationVariables",
              "canonicalReference": "@vue-storefront/magento-types!UpdateCustomerEmailMutationVariables:type"
            },
            {
              "kind": "Content",
              "text": ", customQuery?: "
            },
            {
              "kind": "Reference",
              "text": "CustomQuery",
              "canonicalReference": "@vue-storefront/magento-types!CustomQuery:type"
            },
            {
              "kind": "Content",
              "text": ", customHeaders?: "
            },
            {
              "kind": "Reference",
              "text": "CustomHeaders",
              "canonicalReference": "@vue-storefront/magento-types!CustomHeaders:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "FetchResult",
              "canonicalReference": "@apollo/client/link/core!FetchResult:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "UpdateCustomerEmailMutation",
              "canonicalReference": "@vue-storefront/magento-types!UpdateCustomerEmailMutation:type"
            },
            {
              "kind": "Content",
              "text": ">>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 15
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "context",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "input",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "customQuery",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            },
            {
              "parameterName": "customHeaders",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              }
            }
          ],
          "name": "updateCustomerEmail"
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-api!upsellProducts:function(1)",
          "docComment": "/**\n * Get upsell products for a given product.\n *\n * @example\n *\n * Simple usage without filters, sorting or pagination:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // fetch list of upsell-products with default parameters\n * const upsellProducts = await sdk.magento.upsellProducts({});\n * ```\n *\n * @example\n *\n * Usage with filters, sorting and pagination:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // make a request to fetch list of products with upsell products\n * const upsellProducts = await sdk.magento.upsellProducts({\n *  pageSize: 20,\n *  currentPage: 1,\n *  filter: {\n *    sku: {\n *      eq: PRODUCT_SKU\n *    }\n *  }\n * });\n * ```\n *\n * @example\n *\n * Creating a custom GraphQL query for getting upsellProducts.\n * ```ts\n * module.exports = {\n *   integrations: {\n *     magento: {\n *       customQueries: {\n *         'upsell-products-custom-query': ({ variables, metadata }) => ({\n *            variables,\n *            query: `\n *              query upsellProducts(\n *                $search: String = \"\",\n *                $filter: ProductAttributeFilterInput,\n *                $pageSize: Int = 10,\n *                $currentPage: Int = 1,\n *                $sort: ProductAttributeSortInput\n *              ) {\n *                products(search: $search, filter: $filter, sort: $sort, pageSize: $pageSize, currentPage: $currentPage) {\n *                  ${metadata.fields}\n *                }\n *              }\n *            `\n *         }),\n *       },\n *     }\n *   }\n * };\n * ```\n *\n * @example\n *\n * Using a custom GraphQL query to fetch upsell-products.\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n * const customQuery = {\n *  upsellProducts: 'upsell-products-custom-query',\n *    metadata: {\n *      fields: 'items { sku name upsell_products { sku } }'\n *    }\n * };\n *\n * const upsellProducts = await sdk.magento.upsellProducts({\n *  filter: {\n *    sku: {\n *      eq: 'some-sku' // optional SKU filter\n *    }\n *  }\n * }, customQuery);\n *\n * // upsellProducts will contain only the fields specified in the custom query.\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function upsellProducts(context: "
            },
            {
              "kind": "Reference",
              "text": "Context",
              "canonicalReference": "@vue-storefront/magento-api!Context:interface"
            },
            {
              "kind": "Content",
              "text": ", searchParams?: "
            },
            {
              "kind": "Reference",
              "text": "GetProductSearchParams",
              "canonicalReference": "@vue-storefront/magento-types!GetProductSearchParams:type"
            },
            {
              "kind": "Content",
              "text": ", customQuery?: "
            },
            {
              "kind": "Reference",
              "text": "CustomQuery",
              "canonicalReference": "@vue-storefront/magento-types!CustomQuery:type"
            },
            {
              "kind": "Content",
              "text": ", customHeaders?: "
            },
            {
              "kind": "Reference",
              "text": "CustomHeaders",
              "canonicalReference": "@vue-storefront/magento-types!CustomHeaders:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ApolloQueryResult",
              "canonicalReference": "@apollo/client/core!ApolloQueryResult:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "UpsellProductsQuery",
              "canonicalReference": "@vue-storefront/magento-types!UpsellProductsQuery:type"
            },
            {
              "kind": "Content",
              "text": ">>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 15
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "context",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "searchParams",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "customQuery",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            },
            {
              "parameterName": "customHeaders",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              }
            }
          ],
          "name": "upsellProducts"
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-api!urlResolver:function(1)",
          "docComment": "/**\n * Fetches the resolver for received URL.\n *\n * @deprecated\n *\n * - use {@link https://docs.alokai.com/integrations/magento/api/magento-api/route | route} instead.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function urlResolver(context: "
            },
            {
              "kind": "Reference",
              "text": "Context",
              "canonicalReference": "@vue-storefront/magento-api!Context:interface"
            },
            {
              "kind": "Content",
              "text": ", url: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", customQuery?: "
            },
            {
              "kind": "Reference",
              "text": "CustomQuery",
              "canonicalReference": "@vue-storefront/magento-types!CustomQuery:type"
            },
            {
              "kind": "Content",
              "text": ", customHeaders?: "
            },
            {
              "kind": "Reference",
              "text": "CustomHeaders",
              "canonicalReference": "@vue-storefront/magento-types!CustomHeaders:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ApolloQueryResult",
              "canonicalReference": "@apollo/client/core!ApolloQueryResult:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "UrlResolverQuery",
              "canonicalReference": "@vue-storefront/magento-types!UrlResolverQuery:type"
            },
            {
              "kind": "Content",
              "text": ">>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 15
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "context",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "url",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "customQuery",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            },
            {
              "parameterName": "customHeaders",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              }
            }
          ],
          "name": "urlResolver"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/magento-api!Website:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type Website = "
            },
            {
              "kind": "Content",
              "text": "{\n    code: string;\n    defaultStoreGroup: string;\n    storeGroups: "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<string, "
            },
            {
              "kind": "Reference",
              "text": "StoreGroup",
              "canonicalReference": "@vue-storefront/magento-api!StoreGroup:type"
            },
            {
              "kind": "Content",
              "text": ">;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "Website",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-api!wishlist:function(1)",
          "docComment": "/**\n * Get wishlist.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function wishlist(context: "
            },
            {
              "kind": "Reference",
              "text": "Context",
              "canonicalReference": "@vue-storefront/magento-api!Context:interface"
            },
            {
              "kind": "Content",
              "text": ", searchParams: "
            },
            {
              "kind": "Reference",
              "text": "WishlistQueryVariables",
              "canonicalReference": "@vue-storefront/magento-types!WishlistQueryVariables:type"
            },
            {
              "kind": "Content",
              "text": ", customQuery?: "
            },
            {
              "kind": "Reference",
              "text": "CustomQuery",
              "canonicalReference": "@vue-storefront/magento-types!CustomQuery:type"
            },
            {
              "kind": "Content",
              "text": ", customHeaders?: "
            },
            {
              "kind": "Reference",
              "text": "CustomHeaders",
              "canonicalReference": "@vue-storefront/magento-types!CustomHeaders:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ApolloQueryResult",
              "canonicalReference": "@apollo/client/core!ApolloQueryResult:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "WishlistQuery",
              "canonicalReference": "@vue-storefront/magento-types!WishlistQuery:type"
            },
            {
              "kind": "Content",
              "text": ">>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 15
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "context",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "searchParams",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "customQuery",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            },
            {
              "parameterName": "customHeaders",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              }
            }
          ],
          "name": "wishlist"
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/magento-api!wishlistItemsCount:function(1)",
          "docComment": "/**\n * Count items in the wishlist\n *\n * @example\n *\n * Simple usage:\n * ```ts\n * import { sdk } from '~/sdk.config.ts';\n *\n * // returns items counter of each wishlist for currently logged in customer\n * const response = await sdk.magento.wishlistItemsCount();\n * // response.data?.customer!.wishlists - array with object containing items counter.\n * // response.data?.customer!.wishlists[X]!.items_count - items_counter for each selected wishlist.\n * // index of element in the array isn't equal wishlist's id in the magento.\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function wishlistItemsCount(context: "
            },
            {
              "kind": "Reference",
              "text": "Context",
              "canonicalReference": "@vue-storefront/magento-api!Context:interface"
            },
            {
              "kind": "Content",
              "text": ", customHeaders?: "
            },
            {
              "kind": "Reference",
              "text": "CustomHeaders",
              "canonicalReference": "@vue-storefront/magento-types!CustomHeaders:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ApolloQueryResult",
              "canonicalReference": "@apollo/client/core!ApolloQueryResult:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "WishlistQuery",
              "canonicalReference": "@vue-storefront/magento-types!WishlistQuery:type"
            },
            {
              "kind": "Content",
              "text": ">>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "context",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "customHeaders",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "wishlistItemsCount"
        }
      ]
    }
  ]
}
