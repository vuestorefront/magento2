name: Deploy to Vue Storefront Cloud
on:
  push:
    branches:
      - main
      - develop
      - enterprise
      - release/*

jobs:
  create-deployment:
    runs-on: ubuntu-latest
    outputs:
      environment-name: ${{ steps.determine-environment.outputs.name }}
      environment-code: ${{ steps.determine-environment.outputs.code }}
      deployment_id: ${{ steps.deployment.outputs.deployment_id }}
    steps:
      - name: Determine environment name
        id: determine-environment
        shell: bash
        run: |
          REF=${{ github.ref }}

          if [ $REF = 'refs/heads/main' ]; then
            ENVNAME='production'
            ENVCODE='demo-magento2'

          elif [ $REF = 'refs/heads/develop' ]; then
            ENVNAME='dev'
            ENVCODE='demo-magento2-dev'

          elif [[ $REF = refs/heads/release* ]]; then
            ENVNAME='canary'
            ENVCODE='demo-magento2-canary'

          elif [ $REF = 'refs/heads/enterprise' ]; then
            ENVNAME='enterprise'
            ENVCODE='demo-magento2-enterprise'

          else
              echo 'unrecognized branch name'
              exit 1
          fi

          echo ::set-output name=name::$ENVNAME
          echo ::set-output name=code::$ENVCODE

      - name: Create GitHub deployment
        id: deployment
        uses: chrnorm/deployment-action@v2
        with:
          token: ${{ secrets.DEPLOYMENT_PERSONAL_ACCESS_TOKEN }}
          environment: ${{ steps.determine-environment.outputs.name }}
          initial-status: in_progress
  build:
    needs: create-deployment
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v1

      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: 16.x

      - name: Build and publish docker image
        uses: elgohr/Publish-Docker-Github-Action@master
        with:
          name: demo-magento2-storefrontcloud-io/vue-storefront:${{ github.sha }}
          registry: registry.vuestorefront.cloud
          username: ${{ secrets.CLOUD_USERNAME }}
          password: ${{ secrets.CLOUD_PASSWORD }}
          dockerfile: .vuestorefrontcloud/docker/Dockerfile
          buildoptions: --compress
          buildargs: NPM_EMAIL,NPM_PASS,NPM_USER,NPM_REGISTRY,LAST_COMMIT,VSF_STORE_URL,VSF_MAGENTO_BASE_URL,VSF_MAGENTO_GRAPHQL_URL,VSF_MAGENTO_EXTERNAL_CHECKOUT_ENABLED,VSF_MAGENTO_EXTERNAL_CHECKOUT_URL,VSF_MAGENTO_EXTERNAL_CHECKOUT_SYNC_PATH,VSF_IMAGE_PROVIDER,VSF_IMAGE_PROVIDER_BASE_URL,VSF_IMAGE_PROVIDER_DOMAIN,VSF_REDIS_HOST,VSF_REDIS_PORT,VSF_REDIS_CACHE_INVALIDATE_KEY,VSF_REDIS_CACHE_INVALIDATE_URL,VSF_REDIS_KEY_PREFIX,VSF_REDIS_ENABLED,VSF_RECAPTCHA_ENABLED,VSF_RECAPTCHA_HIDE_BADGE,VSF_RECAPTCHA_VERSION,VSF_RECAPTCHA_SIZE,VSF_RECAPTCHA_MIN_SCORE,VSF_RECAPTCHA_SITE_KEY,VSF_RECAPTCHA_SECRET_KEY,VSF_SENTRY_DSN,

        env:
          NPM_EMAIL: ${{ secrets.NPM_EMAIL }}
          NPM_USER: ${{ secrets.CLOUD_USERNAME }}
          NPM_PASS: ${{ secrets.CLOUD_PASSWORD }}
          NPM_REGISTRY: https://registrynpm.storefrontcloud.io

          VSF_STORE_URL: ''

          VSF_MAGENTO_BASE_URL: https://magento2-instance.vuestorefront.io/
          VSF_MAGENTO_GRAPHQL_URL: https://magento2-instance.vuestorefront.io/graphql
          VSF_MAGENTO_EXTERNAL_CHECKOUT_ENABLED: false
          VSF_MAGENTO_EXTERNAL_CHECKOUT_URL: ''
          VSF_MAGENTO_EXTERNAL_CHECKOUT_SYNC_PATH: ''

          VSF_IMAGE_PROVIDER: cloudinary
          VSF_IMAGE_PROVIDER_BASE_URL: https://res-4.cloudinary.com/dnozky7on/image/upload/
          VSF_IMAGE_PROVIDER_DOMAIN: https://res-4.cloudinary.com

          VSF_REDIS_ENABLED: true
          VSF_REDIS_HOST: redis # VSF cloud specific
          VSF_REDIS_PORT: 6379
          VSF_REDIS_KEY_PREFIX: ${{ github.sha }}
          VSF_REDIS_CACHE_INVALIDATE_KEY: magento2vsf2
          VSF_REDIS_CACHE_INVALIDATE_URL: /cache-invalidate

          VSF_RECAPTCHA_ENABLED: true
          VSF_RECAPTCHA_HIDE_BADGE: false
          VSF_RECAPTCHA_VERSION: 3
          VSF_RECAPTCHA_SIZE: invisible
          VSF_RECAPTCHA_MIN_SCORE: 0.5
          VSF_RECAPTCHA_SITE_KEY: 6Ldce0EeAAAAAAGGtGWG-e-SygXiFub6PXHT5fKd
          VSF_RECAPTCHA_SECRET_KEY: ${{ secrets.RECAPTCHA_SECRET_KEY }}

          VSF_SENTRY_DSN: ${{ secrets.SENTRY_DSN }}

          LAST_COMMIT: ${{ github.sha  }}

  deploy:
    needs: [create-deployment, build]
    uses: ./.github/workflows/deployment-template.yml
    with:
      environment-code: ${{ needs.create-deployment.outputs.environment-code }}
    secrets:
      cloud-username: ${{ secrets.CLOUD_USERNAME }}
      cloud-password: ${{ secrets.CLOUD_PASSWORD }}


  finalize-deployment:
    runs-on: ubuntu-latest
    needs: [create-deployment, build, deploy]
    if: always()
    steps:
      - name: Update deployment status (success)
        if: ${{ !(contains(join(needs.*.result, ','), 'failure') || contains(join(needs.*.result, ','), 'cancelled')) }}
        uses: chrnorm/deployment-status@v2
        with:
          token: ${{ secrets.DEPLOYMENT_PERSONAL_ACCESS_TOKEN }}
          deployment-id: ${{ needs.create-deployment.outputs.deployment_id }}
          state: success

      - name: Update deployment status (failure)
        if: ${{ contains(join(needs.*.result, ','), 'failure') || contains(join(needs.*.result, ','), 'cancelled')  }}
        uses: chrnorm/deployment-status@v2
        with:
          token: ${{ secrets.DEPLOYMENT_PERSONAL_ACCESS_TOKEN }}
          deployment-id: ${{ needs.create-deployment.outputs.deployment_id }}
          state: failure
